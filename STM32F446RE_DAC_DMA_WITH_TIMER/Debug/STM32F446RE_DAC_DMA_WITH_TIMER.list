
STM32F446RE_DAC_DMA_WITH_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080057b8  080057b8  000067b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b8  080059b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000069b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080059cc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080059cc  00007130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e969  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d8  00000000  00000000  000159a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00017b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad7  00000000  00000000  00018958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224cc  00000000  00000000  0001942f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bea  00000000  00000000  0003b8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2d18  00000000  00000000  0004c4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f1fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e20  00000000  00000000  0011f240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00123060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080057a0 	.word	0x080057a0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080057a0 	.word	0x080057a0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96a 	b.w	8000e30 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14e      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b80:	4694      	mov	ip, r2
 8000b82:	458c      	cmp	ip, r1
 8000b84:	4686      	mov	lr, r0
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	d962      	bls.n	8000c52 <__udivmoddi4+0xde>
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0320 	rsb	r3, r2, #32
 8000b92:	4091      	lsls	r1, r2
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fa1f f68c 	uxth.w	r6, ip
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb04 f106 	mul.w	r1, r4, r6
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bca:	f080 8112 	bcs.w	8000df2 <__udivmoddi4+0x27e>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 810f 	bls.w	8000df2 <__udivmoddi4+0x27e>
 8000bd4:	3c02      	subs	r4, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be2:	fb07 1110 	mls	r1, r7, r0, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb00 f606 	mul.w	r6, r0, r6
 8000bee:	429e      	cmp	r6, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x94>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bfa:	f080 80fc 	bcs.w	8000df6 <__udivmoddi4+0x282>
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	f240 80f9 	bls.w	8000df6 <__udivmoddi4+0x282>
 8000c04:	4463      	add	r3, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	1b9b      	subs	r3, r3, r6
 8000c0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11d      	cbz	r5, 8000c1a <__udivmoddi4+0xa6>
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	2200      	movs	r2, #0
 8000c16:	e9c5 3200 	strd	r3, r2, [r5]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d905      	bls.n	8000c2e <__udivmoddi4+0xba>
 8000c22:	b10d      	cbz	r5, 8000c28 <__udivmoddi4+0xb4>
 8000c24:	e9c5 0100 	strd	r0, r1, [r5]
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e7f5      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c2e:	fab3 f183 	clz	r1, r3
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d146      	bne.n	8000cc4 <__udivmoddi4+0x150>
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xcc>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f0c0 80f0 	bcc.w	8000e20 <__udivmoddi4+0x2ac>
 8000c40:	1a86      	subs	r6, r0, r2
 8000c42:	eb64 0303 	sbc.w	r3, r4, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d0e6      	beq.n	8000c1a <__udivmoddi4+0xa6>
 8000c4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c50:	e7e3      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	f040 8090 	bne.w	8000d78 <__udivmoddi4+0x204>
 8000c58:	eba1 040c 	sub.w	r4, r1, ip
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa1f f78c 	uxth.w	r7, ip
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	fb07 f006 	mul.w	r0, r7, r6
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x11c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x11a>
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c8e:	4626      	mov	r6, r4
 8000c90:	1a1c      	subs	r4, r3, r0
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	fb00 f707 	mul.w	r7, r0, r7
 8000ca6:	429f      	cmp	r7, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x148>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x146>
 8000cb4:	429f      	cmp	r7, r3
 8000cb6:	f200 80b0 	bhi.w	8000e1a <__udivmoddi4+0x2a6>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	1bdb      	subs	r3, r3, r7
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0x9c>
 8000cc4:	f1c1 0620 	rsb	r6, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 f706 	lsr.w	r7, r2, r6
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd8:	ea43 030c 	orr.w	r3, r3, ip
 8000cdc:	40f4      	lsrs	r4, r6
 8000cde:	fa00 f801 	lsl.w	r8, r0, r1
 8000ce2:	0c38      	lsrs	r0, r7, #16
 8000ce4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cfc:	45a1      	cmp	r9, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x1a6>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d0a:	f080 8084 	bcs.w	8000e16 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8081 	bls.w	8000e16 <__udivmoddi4+0x2a2>
 8000d14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d18:	443c      	add	r4, r7
 8000d1a:	eba4 0409 	sub.w	r4, r4, r9
 8000d1e:	fa1f f983 	uxth.w	r9, r3
 8000d22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d26:	fb00 4413 	mls	r4, r0, r3, r4
 8000d2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x1d2>
 8000d36:	193c      	adds	r4, r7, r4
 8000d38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d3c:	d267      	bcs.n	8000e0e <__udivmoddi4+0x29a>
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d965      	bls.n	8000e0e <__udivmoddi4+0x29a>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4e:	eba4 040c 	sub.w	r4, r4, ip
 8000d52:	429c      	cmp	r4, r3
 8000d54:	46ce      	mov	lr, r9
 8000d56:	469c      	mov	ip, r3
 8000d58:	d351      	bcc.n	8000dfe <__udivmoddi4+0x28a>
 8000d5a:	d04e      	beq.n	8000dfa <__udivmoddi4+0x286>
 8000d5c:	b155      	cbz	r5, 8000d74 <__udivmoddi4+0x200>
 8000d5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d62:	eb64 040c 	sbc.w	r4, r4, ip
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	40cb      	lsrs	r3, r1
 8000d6c:	431e      	orrs	r6, r3
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	e9c5 6400 	strd	r6, r4, [r5]
 8000d74:	2100      	movs	r1, #0
 8000d76:	e750      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000d78:	f1c2 0320 	rsb	r3, r2, #32
 8000d7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	fa24 f303 	lsr.w	r3, r4, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f107 	mul.w	r1, r0, r7
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x24c>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db6:	d22c      	bcs.n	8000e12 <__udivmoddi4+0x29e>
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d92a      	bls.n	8000e12 <__udivmoddi4+0x29e>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	1a5b      	subs	r3, r3, r1
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd0:	fb01 f307 	mul.w	r3, r1, r7
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x276>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de0:	d213      	bcs.n	8000e0a <__udivmoddi4+0x296>
 8000de2:	42a3      	cmp	r3, r4
 8000de4:	d911      	bls.n	8000e0a <__udivmoddi4+0x296>
 8000de6:	3902      	subs	r1, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	1ae4      	subs	r4, r4, r3
 8000dec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df0:	e739      	b.n	8000c66 <__udivmoddi4+0xf2>
 8000df2:	4604      	mov	r4, r0
 8000df4:	e6f0      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000df6:	4608      	mov	r0, r1
 8000df8:	e706      	b.n	8000c08 <__udivmoddi4+0x94>
 8000dfa:	45c8      	cmp	r8, r9
 8000dfc:	d2ae      	bcs.n	8000d5c <__udivmoddi4+0x1e8>
 8000dfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7a8      	b.n	8000d5c <__udivmoddi4+0x1e8>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	e7ed      	b.n	8000dea <__udivmoddi4+0x276>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	e799      	b.n	8000d46 <__udivmoddi4+0x1d2>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e7d4      	b.n	8000dc0 <__udivmoddi4+0x24c>
 8000e16:	46d6      	mov	lr, sl
 8000e18:	e77f      	b.n	8000d1a <__udivmoddi4+0x1a6>
 8000e1a:	4463      	add	r3, ip
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e74d      	b.n	8000cbc <__udivmoddi4+0x148>
 8000e20:	4606      	mov	r6, r0
 8000e22:	4623      	mov	r3, r4
 8000e24:	4608      	mov	r0, r1
 8000e26:	e70f      	b.n	8000c48 <__udivmoddi4+0xd4>
 8000e28:	3e02      	subs	r6, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	e730      	b.n	8000c90 <__udivmoddi4+0x11c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	0000      	movs	r0, r0
	...

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b098      	sub	sp, #96	@ 0x60
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fc87 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f8cf 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 fa57 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e4a:	f000 fa35 	bl	80012b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e4e:	f000 fa09 	bl	8001264 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000e52:	f000 f93b 	bl	80010cc <MX_DAC_Init>
  MX_TIM8_Init();
 8000e56:	f000 f963 	bl	8001120 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  uint32_t ramp_or_sine 	= 0;  // == 0  is ramp , == 1 is sine
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	657b      	str	r3, [r7, #84]	@ 0x54
  //-----
  uint32_t index_count 		= 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t window_len		= win_len;
 8000e62:	2319      	movs	r3, #25
 8000e64:	653b      	str	r3, [r7, #80]	@ 0x50
  uint16_t data[win_len]	={0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2232      	movs	r2, #50	@ 0x32
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fc3b 	bl	80046e8 <memset>
  uint16_t data_idx_val 	= 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  //------------ INTIIAL MEMORY WRITE
  double sin_val,x,y;
  y = window_len;
 8000e78:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000e7a:	f7ff fb07 	bl	800048c <__aeabi_ui2d>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  while (index_count < window_len ){
 8000e86:	e072      	b.n	8000f6e <main+0x136>
  	  //data[index_count] = i;
  	  x = index_count;
 8000e88:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000e8a:	f7ff faff 	bl	800048c <__aeabi_ui2d>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  	  if (ramp_or_sine){
 8000e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d03c      	beq.n	8000f16 <main+0xde>
  		  sin_val 			= (2047 * sin((x / y) * 2.0 * M_PI)) + 2048.0;
 8000e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000ea0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000ea4:	f7ff fc96 	bl	80007d4 <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	f7ff f9ae 	bl	8000214 <__adddf3>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	a344      	add	r3, pc, #272	@ (adr r3, 8000fd4 <main+0x19c>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fb5b 	bl	8000580 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	ec43 2b17 	vmov	d7, r2, r3
 8000ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ed6:	eef0 0a67 	vmov.f32	s1, s15
 8000eda:	f003 fc31 	bl	8004740 <sin>
 8000ede:	ec51 0b10 	vmov	r0, r1, d0
 8000ee2:	a33e      	add	r3, pc, #248	@ (adr r3, 8000fdc <main+0x1a4>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb4a 	bl	8000580 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb8 <main+0x180>)
 8000efa:	f7ff f98b 	bl	8000214 <__adddf3>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  		  data_idx_val		= (uint16_t)sin_val;
 8000f06:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000f0a:	f7ff fdfb 	bl	8000b04 <__aeabi_d2uiz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000f14:	e017      	b.n	8000f46 <main+0x10e>

  	  }
  	  else {
  		  data_idx_val = (uint16_t)( x * (4096/y));
 8000f16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4927      	ldr	r1, [pc, #156]	@ (8000fbc <main+0x184>)
 8000f20:	f7ff fc58 	bl	80007d4 <__aeabi_ddiv>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000f30:	f7ff fb26 	bl	8000580 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fde2 	bl	8000b04 <__aeabi_d2uiz>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  	  }
  	  if (data_idx_val>4095){
 8000f46:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f4e:	d303      	bcc.n	8000f58 <main+0x120>
  		  data_idx_val = 4095;
 8000f50:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f54:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  	  }
  	  // -- write to mem
  	  data[index_count] = data_idx_val;
 8000f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	3360      	adds	r3, #96	@ 0x60
 8000f5e:	443b      	add	r3, r7
 8000f60:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000f64:	f823 2c5c 	strh.w	r2, [r3, #-92]
  	  index_count +=1;
 8000f68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  while (index_count < window_len ){
 8000f6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d388      	bcc.n	8000e88 <main+0x50>

   }
  ///------- DAC START
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f76:	2100      	movs	r1, #0
 8000f78:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <main+0x188>)
 8000f7a:	f000 fd8e 	bl	8001a9a <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, 2048);
 8000f7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <main+0x188>)
 8000f88:	f000 fdde 	bl	8001b48 <HAL_DAC_SetValue>
  HAL_DMA_Start(&hdma_tim8_up, (uint32_t)&data[0], (uint32_t)&(DAC->DHR12R1), window_len);
 8000f8c:	1d39      	adds	r1, r7, #4
 8000f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f90:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <main+0x18c>)
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <main+0x190>)
 8000f94:	f000 ff0a 	bl	8001dac <HAL_DMA_Start>

  TIM8->DIER |= TIM_DIER_UDE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <main+0x194>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <main+0x194>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start(&htim8);
 8000fa4:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <main+0x198>)
 8000fa6:	f002 f9dd 	bl	8003364 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000faa:	2100      	movs	r1, #0
 8000fac:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <main+0x198>)
 8000fae:	f002 fa9b 	bl	80034e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb2:	bf00      	nop
 8000fb4:	e7fd      	b.n	8000fb2 <main+0x17a>
 8000fb6:	bf00      	nop
 8000fb8:	40a00000 	.word	0x40a00000
 8000fbc:	40b00000 	.word	0x40b00000
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	40007408 	.word	0x40007408
 8000fc8:	20000084 	.word	0x20000084
 8000fcc:	40010400 	.word	0x40010400
 8000fd0:	2000003c 	.word	0x2000003c
 8000fd4:	54442d18 	.word	0x54442d18
 8000fd8:	400921fb 	.word	0x400921fb
 8000fdc:	00000000 	.word	0x00000000
 8000fe0:	409ffc00 	.word	0x409ffc00

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	@ 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2234      	movs	r2, #52	@ 0x34
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fb78 	bl	80046e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <SystemClock_Config+0xe0>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	4a2c      	ldr	r2, [pc, #176]	@ (80010c4 <SystemClock_Config+0xe0>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	@ 0x40
 8001018:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <SystemClock_Config+0xe0>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <SystemClock_Config+0xe4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a26      	ldr	r2, [pc, #152]	@ (80010c8 <SystemClock_Config+0xe4>)
 800102e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <SystemClock_Config+0xe4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001054:	2310      	movs	r3, #16
 8001056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001058:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800105c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001062:	2302      	movs	r3, #2
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fe8a 	bl	8002d88 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800107a:	f000 f9ab 	bl	80013d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800107e:	f001 fae9 	bl	8002654 <HAL_PWREx_EnableOverDrive>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001088:	f000 f9a4 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001098:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800109c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2105      	movs	r1, #5
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fb22 	bl	80026f4 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80010b6:	f000 f98d 	bl	80013d4 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	@ 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_DAC_Init+0x4c>)
 80010dc:	4a0f      	ldr	r2, [pc, #60]	@ (800111c <MX_DAC_Init+0x50>)
 80010de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_DAC_Init+0x4c>)
 80010e2:	f000 fcb8 	bl	8001a56 <HAL_DAC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010ec:	f000 f972 	bl	80013d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_DAC_Init+0x4c>)
 8001100:	f000 fd4c 	bl	8001b9c <HAL_DAC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800110a:	f000 f963 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000028 	.word	0x20000028
 800111c:	40007400 	.word	0x40007400

08001120 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	@ 0x58
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fac5 	bl	80046e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800115e:	4b3f      	ldr	r3, [pc, #252]	@ (800125c <MX_TIM8_Init+0x13c>)
 8001160:	4a3f      	ldr	r2, [pc, #252]	@ (8001260 <MX_TIM8_Init+0x140>)
 8001162:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001164:	4b3d      	ldr	r3, [pc, #244]	@ (800125c <MX_TIM8_Init+0x13c>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b3c      	ldr	r3, [pc, #240]	@ (800125c <MX_TIM8_Init+0x13c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = timer_period;
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <MX_TIM8_Init+0x13c>)
 8001172:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8001176:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <MX_TIM8_Init+0x13c>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800117e:	4b37      	ldr	r3, [pc, #220]	@ (800125c <MX_TIM8_Init+0x13c>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b35      	ldr	r3, [pc, #212]	@ (800125c <MX_TIM8_Init+0x13c>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800118a:	4834      	ldr	r0, [pc, #208]	@ (800125c <MX_TIM8_Init+0x13c>)
 800118c:	f002 f89a 	bl	80032c4 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001196:	f000 f91d 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011a4:	4619      	mov	r1, r3
 80011a6:	482d      	ldr	r0, [pc, #180]	@ (800125c <MX_TIM8_Init+0x13c>)
 80011a8:	f002 fb28 	bl	80037fc <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011b2:	f000 f90f 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011b6:	4829      	ldr	r0, [pc, #164]	@ (800125c <MX_TIM8_Init+0x13c>)
 80011b8:	f002 f93c 	bl	8003434 <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80011c2:	f000 f907 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011d2:	4619      	mov	r1, r3
 80011d4:	4821      	ldr	r0, [pc, #132]	@ (800125c <MX_TIM8_Init+0x13c>)
 80011d6:	f002 fef5 	bl	8003fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80011e0:	f000 f8f8 	bl	80013d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	@ 0x60
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = timer_period/2;
 80011e8:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f2:	2300      	movs	r3, #0
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	4814      	ldr	r0, [pc, #80]	@ (800125c <MX_TIM8_Init+0x13c>)
 800120c:	f002 fa34 	bl	8003678 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001216:	f000 f8dd 	bl	80013d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001232:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <MX_TIM8_Init+0x13c>)
 800123e:	f002 ff3d 	bl	80040bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001248:	f000 f8c4 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_TIM8_Init+0x13c>)
 800124e:	f000 f987 	bl	8001560 <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3758      	adds	r7, #88	@ 0x58
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000003c 	.word	0x2000003c
 8001260:	40010400 	.word	0x40010400

08001264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART2_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800129c:	f002 ff60 	bl	8004160 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 f895 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000e4 	.word	0x200000e4
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_DMA_Init+0x3c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <MX_DMA_Init+0x3c>)
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2039      	movs	r0, #57	@ 0x39
 80012e0:	f000 fb83 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012e4:	2039      	movs	r0, #57	@ 0x39
 80012e6:	f000 fb9c 	bl	8001a22 <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a2c      	ldr	r2, [pc, #176]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a25      	ldr	r2, [pc, #148]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yesil_Led_GPIO_Port, Yesil_Led_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	4812      	ldr	r0, [pc, #72]	@ (80013cc <MX_GPIO_Init+0xd4>)
 8001384:	f001 f94c 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <MX_GPIO_Init+0xd8>)
 80013a0:	f000 ffaa 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yesil_Led_Pin */
  GPIO_InitStruct.Pin = Yesil_Led_Pin;
 80013a4:	2320      	movs	r3, #32
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Yesil_Led_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_GPIO_Init+0xd4>)
 80013bc:	f000 ff9c 	bl	80022f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	@ 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020800 	.word	0x40020800

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <Error_Handler+0x8>

080013e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <HAL_MspInit+0x4c>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_MspInit+0x4c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800141e:	2007      	movs	r0, #7
 8001420:	f000 fad8 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <HAL_DAC_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d127      	bne.n	80014a2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_DAC_MspInit+0x80>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <HAL_DAC_MspInit+0x80>)
 800145c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <HAL_DAC_MspInit+0x80>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_DAC_MspInit+0x80>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_DAC_MspInit+0x80>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_DAC_MspInit+0x80>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Dac_cikis_Pin;
 800148a:	2310      	movs	r3, #16
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148e:	2303      	movs	r3, #3
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Dac_cikis_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <HAL_DAC_MspInit+0x84>)
 800149e:	f000 ff2b 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40007400 	.word	0x40007400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a22      	ldr	r2, [pc, #136]	@ (8001550 <HAL_TIM_Base_MspInit+0x98>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d13e      	bne.n	8001548 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <HAL_TIM_Base_MspInit+0x9c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	4a20      	ldr	r2, [pc, #128]	@ (8001554 <HAL_TIM_Base_MspInit+0x9c>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <HAL_TIM_Base_MspInit+0x9c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_UP Init */
    hdma_tim8_up.Instance = DMA2_Stream1;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 80014e8:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <HAL_TIM_Base_MspInit+0xa4>)
 80014ea:	601a      	str	r2, [r3, #0]
    hdma_tim8_up.Init.Channel = DMA_CHANNEL_7;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 80014ee:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80014f2:	605a      	str	r2, [r3, #4]
    hdma_tim8_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 80014f6:	2240      	movs	r2, #64	@ 0x40
 80014f8:	609a      	str	r2, [r3, #8]
    hdma_tim8_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
    hdma_tim8_up.Init.MemInc = DMA_MINC_ENABLE;
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 8001502:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001506:	611a      	str	r2, [r3, #16]
    hdma_tim8_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 800150a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800150e:	615a      	str	r2, [r3, #20]
    hdma_tim8_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 8001512:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001516:	619a      	str	r2, [r3, #24]
    hdma_tim8_up.Init.Mode = DMA_CIRCULAR;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 800151a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800151e:	61da      	str	r2, [r3, #28]
    hdma_tim8_up.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
    hdma_tim8_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_up) != HAL_OK)
 800152c:	480a      	ldr	r0, [pc, #40]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 800152e:	f000 fb8f 	bl	8001c50 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001538:	f7ff ff4c 	bl	80013d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim8_up);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 8001540:	621a      	str	r2, [r3, #32]
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <HAL_TIM_Base_MspInit+0xa0>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40010400 	.word	0x40010400
 8001554:	40023800 	.word	0x40023800
 8001558:	20000084 	.word	0x20000084
 800155c:	40026428 	.word	0x40026428

08001560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <HAL_TIM_MspPostInit+0x68>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d11d      	bne.n	80015be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_TIM_MspPostInit+0x6c>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800159e:	2340      	movs	r3, #64	@ 0x40
 80015a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015ae:	2303      	movs	r3, #3
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <HAL_TIM_MspPostInit+0x70>)
 80015ba:	f000 fe9d 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40010400 	.word	0x40010400
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020800 	.word	0x40020800

080015d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_UART_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_UART_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_UART_MspInit+0x88>)
 8001600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_UART_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <HAL_UART_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	@ (800165c <HAL_UART_MspInit+0x88>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_UART_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800162e:	230c      	movs	r3, #12
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163e:	2307      	movs	r3, #7
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <HAL_UART_MspInit+0x8c>)
 800164a:	f000 fe55 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40004400 	.word	0x40004400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ba:	f000 f89b 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_up);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA2_Stream1_IRQHandler+0x10>)
 80016ca:	f000 fbab 	bl	8001e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000084 	.word	0x20000084

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001734 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001700:	f7ff ffea 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	@ (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800172a:	f002 ffe5 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fb83 	bl	8000e38 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001740:	080059c0 	.word	0x080059c0
  ldr r2, =_sbss
 8001744:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001748:	20000130 	.word	0x20000130

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f92b 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fe2c 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f943 	bl	8001a3e <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 f90b 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	@ (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008
 8001818:	2000012c 	.word	0x2000012c

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000012c 	.word	0x2000012c

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	@ (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	@ (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	@ (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	@ 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	@ 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff3e 	bl	800187c <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff8e 	bl	8001928 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5d 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff31 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e014      	b.n	8001a92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	791b      	ldrb	r3, [r3, #4]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fcd9 	bl	8001430 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2202      	movs	r2, #2
 8001a82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e046      	b.n	8001b3c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	795b      	ldrb	r3, [r3, #5]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_DAC_Start+0x20>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e040      	b.n	8001b3c <HAL_DAC_Start+0xa2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001aee:	2b3c      	cmp	r3, #60	@ 0x3c
 8001af0:	d11d      	bne.n	8001b2e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0201 	orr.w	r2, r2, #1
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	e014      	b.n	8001b2e <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	213c      	movs	r1, #60	@ 0x3c
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d107      	bne.n	8001b2e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0202 	orr.w	r2, r2, #2
 8001b2c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e015      	b.n	8001b90 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	3308      	adds	r3, #8
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e004      	b.n	8001b86 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	3314      	adds	r3, #20
 8001b84:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_DAC_ConfigChannel+0x1c>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e042      	b.n	8001c42 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	795b      	ldrb	r3, [r3, #5]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DAC_ConfigChannel+0x2c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e03c      	b.n	8001c42 <HAL_DAC_ConfigChannel+0xa6>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	22c0      	movs	r2, #192	@ 0xc0
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	400a      	ands	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fdde 	bl	800181c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e099      	b.n	8001da0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8c:	e00f      	b.n	8001cae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8e:	f7ff fdc5 	bl	800181c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d908      	bls.n	8001cae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e078      	b.n	8001da0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e8      	bne.n	8001c8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4b38      	ldr	r3, [pc, #224]	@ (8001da8 <HAL_DMA_Init+0x158>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d107      	bne.n	8001d18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	4313      	orrs	r3, r2
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f023 0307 	bic.w	r3, r3, #7
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d117      	bne.n	8001d72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fa53 	bl	8002200 <DMA_CheckFifoParam>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2240      	movs	r2, #64	@ 0x40
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e016      	b.n	8001da0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fa0a 	bl	8002194 <DMA_CalcBaseAndBitshift>
 8001d80:	4603      	mov	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d88:	223f      	movs	r2, #63	@ 0x3f
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	f010803f 	.word	0xf010803f

08001dac <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Start+0x20>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e026      	b.n	8001e1a <HAL_DMA_Start+0x6e>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d115      	bne.n	8001e0c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f99f 	bl	8002138 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e005      	b.n	8001e18 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
 8001e16:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e30:	4b8e      	ldr	r3, [pc, #568]	@ (800206c <HAL_DMA_IRQHandler+0x248>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a8e      	ldr	r2, [pc, #568]	@ (8002070 <HAL_DMA_IRQHandler+0x24c>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4e:	2208      	movs	r2, #8
 8001e50:	409a      	lsls	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01a      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0204 	bic.w	r2, r2, #4
 8001e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	2201      	movs	r2, #1
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	f043 0202 	orr.w	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	2204      	movs	r2, #4
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2204      	movs	r2, #4
 8001eea:	409a      	lsls	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef4:	f043 0204 	orr.w	r2, r3, #4
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	2210      	movs	r2, #16
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d043      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d03c      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	2210      	movs	r2, #16
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d018      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d024      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
 8001f52:	e01f      	b.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
 8001f64:	e016      	b.n	8001f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0208 	bic.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2220      	movs	r2, #32
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 808f 	beq.w	80020c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8087 	beq.w	80020c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2220      	movs	r2, #32
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d136      	bne.n	800203c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0216 	bic.w	r2, r2, #22
 8001fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x1da>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0208 	bic.w	r2, r2, #8
 800200c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	223f      	movs	r2, #63	@ 0x3f
 8002014:	409a      	lsls	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800202e:	2b00      	cmp	r3, #0
 8002030:	d07e      	beq.n	8002130 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
        }
        return;
 800203a:	e079      	b.n	8002130 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205c:	2b00      	cmp	r3, #0
 800205e:	d031      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
 8002068:	e02c      	b.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000
 8002070:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e01e      	b.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0210 	bic.w	r2, r2, #16
 80020a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d032      	beq.n	8002132 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d022      	beq.n	800211e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2205      	movs	r2, #5
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d307      	bcc.n	800210c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f2      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x2cc>
 800210a:	e000      	b.n	800210e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800210c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e000      	b.n	8002132 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002130:	bf00      	nop
    }
  }
}
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b40      	cmp	r3, #64	@ 0x40
 8002164:	d108      	bne.n	8002178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002176:	e007      	b.n	8002188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b10      	subs	r3, #16
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <DMA_CalcBaseAndBitshift+0x64>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ae:	4a13      	ldr	r2, [pc, #76]	@ (80021fc <DMA_CalcBaseAndBitshift+0x68>)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d909      	bls.n	80021d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021d4:	e007      	b.n	80021e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	080057d0 	.word	0x080057d0

08002200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d856      	bhi.n	80022ce <DMA_CheckFifoParam+0xce>
 8002220:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <DMA_CheckFifoParam+0x28>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002239 	.word	0x08002239
 800222c:	0800224b 	.word	0x0800224b
 8002230:	08002239 	.word	0x08002239
 8002234:	080022cf 	.word	0x080022cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d046      	beq.n	80022d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e043      	b.n	80022d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002252:	d140      	bne.n	80022d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002258:	e03d      	b.n	80022d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002262:	d121      	bne.n	80022a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d837      	bhi.n	80022da <DMA_CheckFifoParam+0xda>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <DMA_CheckFifoParam+0x70>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002281 	.word	0x08002281
 8002274:	08002287 	.word	0x08002287
 8002278:	08002281 	.word	0x08002281
 800227c:	08002299 	.word	0x08002299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e030      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d025      	beq.n	80022de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002296:	e022      	b.n	80022de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a6:	e01c      	b.n	80022e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d903      	bls.n	80022b6 <DMA_CheckFifoParam+0xb6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b4:	e018      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ba:	e015      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e00b      	b.n	80022e6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ce:	bf00      	nop
 80022d0:	e00a      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e008      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e006      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e004      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
    }
  } 
  
  return status; 
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e165      	b.n	80025e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8154 	bne.w	80025da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80ae 	beq.w	80025da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b5d      	ldr	r3, [pc, #372]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a5c      	ldr	r2, [pc, #368]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
 800248e:	4b5a      	ldr	r3, [pc, #360]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a58      	ldr	r2, [pc, #352]	@ (80025fc <HAL_GPIO_Init+0x304>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002600 <HAL_GPIO_Init+0x308>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d025      	beq.n	8002512 <HAL_GPIO_Init+0x21a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002604 <HAL_GPIO_Init+0x30c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01f      	beq.n	800250e <HAL_GPIO_Init+0x216>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_GPIO_Init+0x310>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d019      	beq.n	800250a <HAL_GPIO_Init+0x212>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4c      	ldr	r2, [pc, #304]	@ (800260c <HAL_GPIO_Init+0x314>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002610 <HAL_GPIO_Init+0x318>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00d      	beq.n	8002502 <HAL_GPIO_Init+0x20a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002614 <HAL_GPIO_Init+0x31c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x206>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a49      	ldr	r2, [pc, #292]	@ (8002618 <HAL_GPIO_Init+0x320>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_GPIO_Init+0x202>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	@ (80025fc <HAL_GPIO_Init+0x304>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b3a      	ldr	r3, [pc, #232]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a31      	ldr	r2, [pc, #196]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b2f      	ldr	r3, [pc, #188]	@ (800261c <HAL_GPIO_Init+0x324>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a26      	ldr	r2, [pc, #152]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <HAL_GPIO_Init+0x324>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_GPIO_Init+0x324>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a11      	ldr	r2, [pc, #68]	@ (800261c <HAL_GPIO_Init+0x324>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f ae96 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40021800 	.word	0x40021800
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	@ 0x40
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002680:	f7ff f8cc 	bl	800181c <HAL_GetTick>
 8002684:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002686:	e009      	b.n	800269c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002688:	f7ff f8c8 	bl	800181c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002696:	d901      	bls.n	800269c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e01f      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <HAL_PWREx_EnableOverDrive+0x98>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a8:	d1ee      	bne.n	8002688 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b0:	f7ff f8b4 	bl	800181c <HAL_GetTick>
 80026b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026b6:	e009      	b.n	80026cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026b8:	f7ff f8b0 	bl	800181c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c6:	d901      	bls.n	80026cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e007      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026cc:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <HAL_PWREx_EnableOverDrive+0x98>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026d8:	d1ee      	bne.n	80026b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	420e0040 	.word	0x420e0040
 80026ec:	40007000 	.word	0x40007000
 80026f0:	420e0044 	.word	0x420e0044

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0cc      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b68      	ldr	r3, [pc, #416]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d90c      	bls.n	8002730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b65      	ldr	r3, [pc, #404]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b63      	ldr	r3, [pc, #396]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0b8      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002748:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002752:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002760:	4b53      	ldr	r3, [pc, #332]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a52      	ldr	r2, [pc, #328]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800276a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b50      	ldr	r3, [pc, #320]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	494d      	ldr	r1, [pc, #308]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d044      	beq.n	8002814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b47      	ldr	r3, [pc, #284]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d119      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e07f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e06f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e067      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4934      	ldr	r1, [pc, #208]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e4:	f7ff f81a 	bl	800181c <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7ff f816 	bl	800181c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e04f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b2b      	ldr	r3, [pc, #172]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002814:	4b25      	ldr	r3, [pc, #148]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d20c      	bcs.n	800283c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e032      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4916      	ldr	r1, [pc, #88]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002866:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	490e      	ldr	r1, [pc, #56]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800287a:	f000 f855 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 800287e:	4602      	mov	r2, r0
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	490a      	ldr	r1, [pc, #40]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	5ccb      	ldrb	r3, [r1, r3]
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a09      	ldr	r2, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe ff7a 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023c00 	.word	0x40023c00
 80028b0:	40023800 	.word	0x40023800
 80028b4:	080057b8 	.word	0x080057b8
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	080057c8 	.word	0x080057c8

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002904:	f7ff ffdc 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0b5b      	lsrs	r3, r3, #13
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	@ (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	080057c8 	.word	0x080057c8

08002928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	b0ae      	sub	sp, #184	@ 0xb8
 800292e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294e:	4bcb      	ldr	r3, [pc, #812]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b0c      	cmp	r3, #12
 8002958:	f200 8206 	bhi.w	8002d68 <HAL_RCC_GetSysClockFreq+0x440>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <HAL_RCC_GetSysClockFreq+0x3c>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002999 	.word	0x08002999
 8002968:	08002d69 	.word	0x08002d69
 800296c:	08002d69 	.word	0x08002d69
 8002970:	08002d69 	.word	0x08002d69
 8002974:	080029a1 	.word	0x080029a1
 8002978:	08002d69 	.word	0x08002d69
 800297c:	08002d69 	.word	0x08002d69
 8002980:	08002d69 	.word	0x08002d69
 8002984:	080029a9 	.word	0x080029a9
 8002988:	08002d69 	.word	0x08002d69
 800298c:	08002d69 	.word	0x08002d69
 8002990:	08002d69 	.word	0x08002d69
 8002994:	08002b99 	.word	0x08002b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4bb9      	ldr	r3, [pc, #740]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x358>)
 800299a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800299e:	e1e7      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029a0:	4bb8      	ldr	r3, [pc, #736]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029a6:	e1e3      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a8:	4bb4      	ldr	r3, [pc, #720]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b4:	4bb1      	ldr	r3, [pc, #708]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d071      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c0:	4bae      	ldr	r3, [pc, #696]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f8:	0150      	lsls	r0, r2, #5
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4621      	mov	r1, r4
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002a18:	4649      	mov	r1, r9
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a22:	4641      	mov	r1, r8
 8002a24:	018a      	lsls	r2, r1, #6
 8002a26:	4641      	mov	r1, r8
 8002a28:	1a51      	subs	r1, r2, r1
 8002a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a40:	4649      	mov	r1, r9
 8002a42:	00cb      	lsls	r3, r1, #3
 8002a44:	4641      	mov	r1, r8
 8002a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	00ca      	lsls	r2, r1, #3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	4622      	mov	r2, r4
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	460a      	mov	r2, r1
 8002a5e:	eb42 0303 	adc.w	r3, r2, r3
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a70:	4629      	mov	r1, r5
 8002a72:	024b      	lsls	r3, r1, #9
 8002a74:	4621      	mov	r1, r4
 8002a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	024a      	lsls	r2, r1, #9
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a94:	f7fe f856 	bl	8000b44 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aa2:	e067      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa4:	4b75      	ldr	r3, [pc, #468]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ab0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002abe:	2300      	movs	r3, #0
 8002ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ac2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4621      	mov	r1, r4
 8002ae0:	1a51      	subs	r1, r2, r1
 8002ae2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002af8:	4649      	mov	r1, r9
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	4641      	mov	r1, r8
 8002afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b02:	4641      	mov	r1, r8
 8002b04:	018a      	lsls	r2, r1, #6
 8002b06:	4641      	mov	r1, r8
 8002b08:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b26:	4692      	mov	sl, r2
 8002b28:	469b      	mov	fp, r3
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	eb1a 0303 	adds.w	r3, sl, r3
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	462b      	mov	r3, r5
 8002b34:	eb4b 0303 	adc.w	r3, fp, r3
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b60:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b66:	f7fd ffed 	bl	8000b44 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b74:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b96:	e0eb      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b38      	ldr	r3, [pc, #224]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba4:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d06b      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b32      	ldr	r3, [pc, #200]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002bcc:	4622      	mov	r2, r4
 8002bce:	462b      	mov	r3, r5
 8002bd0:	f04f 0000 	mov.w	r0, #0
 8002bd4:	f04f 0100 	mov.w	r1, #0
 8002bd8:	0159      	lsls	r1, r3, #5
 8002bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bde:	0150      	lsls	r0, r2, #5
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4621      	mov	r1, r4
 8002be6:	1a51      	subs	r1, r2, r1
 8002be8:	61b9      	str	r1, [r7, #24]
 8002bea:	4629      	mov	r1, r5
 8002bec:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bfe:	4659      	mov	r1, fp
 8002c00:	018b      	lsls	r3, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c08:	4651      	mov	r1, sl
 8002c0a:	018a      	lsls	r2, r1, #6
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	ebb2 0801 	subs.w	r8, r2, r1
 8002c12:	4659      	mov	r1, fp
 8002c14:	eb63 0901 	sbc.w	r9, r3, r1
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c2c:	4690      	mov	r8, r2
 8002c2e:	4699      	mov	r9, r3
 8002c30:	4623      	mov	r3, r4
 8002c32:	eb18 0303 	adds.w	r3, r8, r3
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	462b      	mov	r3, r5
 8002c3a:	eb49 0303 	adc.w	r3, r9, r3
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	024b      	lsls	r3, r1, #9
 8002c50:	4621      	mov	r1, r4
 8002c52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c56:	4621      	mov	r1, r4
 8002c58:	024a      	lsls	r2, r1, #9
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c62:	2200      	movs	r2, #0
 8002c64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c6c:	f7fd ff6a 	bl	8000b44 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c7a:	e065      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x420>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c88:	4b3d      	ldr	r3, [pc, #244]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	4611      	mov	r1, r2
 8002c94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c98:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	0159      	lsls	r1, r3, #5
 8002cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb4:	0150      	lsls	r0, r2, #5
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4641      	mov	r1, r8
 8002cbc:	1a51      	subs	r1, r2, r1
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	018b      	lsls	r3, r1, #6
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cde:	4651      	mov	r1, sl
 8002ce0:	018a      	lsls	r2, r1, #6
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	1a54      	subs	r4, r2, r1
 8002ce6:	4659      	mov	r1, fp
 8002ce8:	eb63 0501 	sbc.w	r5, r3, r1
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	00eb      	lsls	r3, r5, #3
 8002cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cfa:	00e2      	lsls	r2, r4, #3
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	461d      	mov	r5, r3
 8002d00:	4643      	mov	r3, r8
 8002d02:	18e3      	adds	r3, r4, r3
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	464b      	mov	r3, r9
 8002d08:	eb45 0303 	adc.w	r3, r5, r3
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	028b      	lsls	r3, r1, #10
 8002d1e:	4621      	mov	r1, r4
 8002d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d24:	4621      	mov	r1, r4
 8002d26:	028a      	lsls	r2, r1, #10
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d30:	2200      	movs	r2, #0
 8002d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d3a:	f7fd ff03 	bl	8000b44 <__aeabi_uldivmod>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4613      	mov	r3, r2
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d48:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0f1b      	lsrs	r3, r3, #28
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d66:	e003      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	37b8      	adds	r7, #184	@ 0xb8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	00f42400 	.word	0x00f42400

08002d88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e28d      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8083 	beq.w	8002eae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002da8:	4b94      	ldr	r3, [pc, #592]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d019      	beq.n	8002de8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002db4:	4b91      	ldr	r3, [pc, #580]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b8b      	ldr	r3, [pc, #556]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b88      	ldr	r3, [pc, #544]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4b84      	ldr	r3, [pc, #528]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05b      	beq.n	8002eac <HAL_RCC_OscConfig+0x124>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d157      	bne.n	8002eac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e25a      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x90>
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01d      	b.n	8002e54 <HAL_RCC_OscConfig+0xcc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0xb4>
 8002e22:	4b76      	ldr	r3, [pc, #472]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a75      	ldr	r2, [pc, #468]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b73      	ldr	r3, [pc, #460]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a72      	ldr	r2, [pc, #456]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0xcc>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6e      	ldr	r2, [pc, #440]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b6c      	ldr	r3, [pc, #432]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fcde 	bl	800181c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fcda 	bl	800181c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e21f      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0xdc>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fcca 	bl	800181c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fcc6 	bl	800181c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e20b      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b57      	ldr	r3, [pc, #348]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x104>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06f      	beq.n	8002f9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002eba:	4b50      	ldr	r3, [pc, #320]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d017      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d105      	bne.n	8002ede <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d11c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d116      	bne.n	8002f24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x186>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1d3      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4937      	ldr	r1, [pc, #220]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	e03a      	b.n	8002f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2c:	4b34      	ldr	r3, [pc, #208]	@ (8003000 <HAL_RCC_OscConfig+0x278>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fc73 	bl	800181c <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fc6f 	bl	800181c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e1b4      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4925      	ldr	r1, [pc, #148]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
 8002f6c:	e015      	b.n	8002f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6e:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_RCC_OscConfig+0x278>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fc52 	bl	800181c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fc4e 	bl	800181c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e193      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d036      	beq.n	8003014 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fc32 	bl	800181c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fc2e 	bl	800181c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e173      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x234>
 8002fda:	e01b      	b.n	8003014 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fc1b 	bl	800181c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	e00e      	b.n	8003008 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fea:	f7fe fc17 	bl	800181c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d907      	bls.n	8003008 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e15c      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470000 	.word	0x42470000
 8003004:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	4b8a      	ldr	r3, [pc, #552]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800300a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ea      	bne.n	8002fea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8097 	beq.w	8003150 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003026:	4b83      	ldr	r3, [pc, #524]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b7f      	ldr	r3, [pc, #508]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	4a7e      	ldr	r2, [pc, #504]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	@ 0x40
 8003042:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	4b79      	ldr	r3, [pc, #484]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305e:	4b76      	ldr	r3, [pc, #472]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306a:	f7fe fbd7 	bl	800181c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003072:	f7fe fbd3 	bl	800181c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e118      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x31e>
 8003098:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	4a65      	ldr	r2, [pc, #404]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a4:	e01c      	b.n	80030e0 <HAL_RCC_OscConfig+0x358>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x340>
 80030ae:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b2:	4a60      	ldr	r2, [pc, #384]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	4a5d      	ldr	r2, [pc, #372]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0x358>
 80030c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	4a59      	ldr	r2, [pc, #356]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d4:	4b57      	ldr	r3, [pc, #348]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d8:	4a56      	ldr	r2, [pc, #344]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe fb98 	bl	800181c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe fb94 	bl	800181c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0d7      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	4b4b      	ldr	r3, [pc, #300]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ee      	beq.n	80030f0 <HAL_RCC_OscConfig+0x368>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe fb82 	bl	800181c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe fb7e 	bl	800181c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0c1      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003132:	4b40      	ldr	r3, [pc, #256]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1ee      	bne.n	800311c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	4a3a      	ldr	r2, [pc, #232]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80ad 	beq.w	80032b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800315a:	4b36      	ldr	r3, [pc, #216]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d060      	beq.n	8003228 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d145      	bne.n	80031fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b33      	ldr	r3, [pc, #204]	@ (800323c <HAL_RCC_OscConfig+0x4b4>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fb52 	bl	800181c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fb4e 	bl	800181c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e093      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	491b      	ldr	r1, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x4b4>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe fb23 	bl	800181c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe fb1f 	bl	800181c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e064      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x452>
 80031f8:	e05c      	b.n	80032b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_RCC_OscConfig+0x4b4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fb0c 	bl	800181c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fb08 	bl	800181c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e04d      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x480>
 8003226:	e045      	b.n	80032b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e040      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000
 800323c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003240:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <HAL_RCC_OscConfig+0x538>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d030      	beq.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d129      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d122      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	4293      	cmp	r3, r2
 800327a:	d119      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d10f      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e041      	b.n	800335a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe f8e4 	bl	80014b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f000 fb42 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d001      	beq.n	800337c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e046      	b.n	800340a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a23      	ldr	r2, [pc, #140]	@ (8003418 <HAL_TIM_Base_Start+0xb4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d022      	beq.n	80033d4 <HAL_TIM_Base_Start+0x70>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003396:	d01d      	beq.n	80033d4 <HAL_TIM_Base_Start+0x70>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1f      	ldr	r2, [pc, #124]	@ (800341c <HAL_TIM_Base_Start+0xb8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d018      	beq.n	80033d4 <HAL_TIM_Base_Start+0x70>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_TIM_Base_Start+0xbc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <HAL_TIM_Base_Start+0x70>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003424 <HAL_TIM_Base_Start+0xc0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00e      	beq.n	80033d4 <HAL_TIM_Base_Start+0x70>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <HAL_TIM_Base_Start+0xc4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_TIM_Base_Start+0x70>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a19      	ldr	r2, [pc, #100]	@ (800342c <HAL_TIM_Base_Start+0xc8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d004      	beq.n	80033d4 <HAL_TIM_Base_Start+0x70>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a18      	ldr	r2, [pc, #96]	@ (8003430 <HAL_TIM_Base_Start+0xcc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d111      	bne.n	80033f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d010      	beq.n	8003408 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	e007      	b.n	8003408 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	40000c00 	.word	0x40000c00
 8003428:	40010400 	.word	0x40010400
 800342c:	40014000 	.word	0x40014000
 8003430:	40001800 	.word	0x40001800

08003434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e041      	b.n	80034ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f839 	bl	80034d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f000 fa8a 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x24>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e022      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d109      	bne.n	8003526 <HAL_TIM_PWM_Start+0x3e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	e015      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d109      	bne.n	8003540 <HAL_TIM_PWM_Start+0x58>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e008      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07c      	b.n	8003654 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_TIM_PWM_Start+0x82>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003568:	e013      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0x92>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003578:	e00b      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0xa2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003588:	e003      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fcec 	bl	8003f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2d      	ldr	r2, [pc, #180]	@ (800365c <HAL_TIM_PWM_Start+0x174>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_PWM_Start+0xcc>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003660 <HAL_TIM_PWM_Start+0x178>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_PWM_Start+0xd0>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_TIM_PWM_Start+0xd2>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a22      	ldr	r2, [pc, #136]	@ (800365c <HAL_TIM_PWM_Start+0x174>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d01d      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <HAL_TIM_PWM_Start+0x17c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003668 <HAL_TIM_PWM_Start+0x180>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	@ (800366c <HAL_TIM_PWM_Start+0x184>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a16      	ldr	r2, [pc, #88]	@ (8003660 <HAL_TIM_PWM_Start+0x178>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a18      	ldr	r2, [pc, #96]	@ (8003670 <HAL_TIM_PWM_Start+0x188>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a16      	ldr	r2, [pc, #88]	@ (8003674 <HAL_TIM_PWM_Start+0x18c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d111      	bne.n	8003642 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b06      	cmp	r3, #6
 800362e:	d010      	beq.n	8003652 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	e007      	b.n	8003652 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40010000 	.word	0x40010000
 8003660:	40010400 	.word	0x40010400
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40001800 	.word	0x40001800

08003678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003692:	2302      	movs	r3, #2
 8003694:	e0ae      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	f200 809f 	bhi.w	80037e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	080037e5 	.word	0x080037e5
 80036b4:	080037e5 	.word	0x080037e5
 80036b8:	080037e5 	.word	0x080037e5
 80036bc:	08003721 	.word	0x08003721
 80036c0:	080037e5 	.word	0x080037e5
 80036c4:	080037e5 	.word	0x080037e5
 80036c8:	080037e5 	.word	0x080037e5
 80036cc:	08003763 	.word	0x08003763
 80036d0:	080037e5 	.word	0x080037e5
 80036d4:	080037e5 	.word	0x080037e5
 80036d8:	080037e5 	.word	0x080037e5
 80036dc:	080037a3 	.word	0x080037a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f9fc 	bl	8003ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0204 	bic.w	r2, r2, #4
 800370a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6999      	ldr	r1, [r3, #24]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	619a      	str	r2, [r3, #24]
      break;
 800371e:	e064      	b.n	80037ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fa4c 	bl	8003bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800373a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6999      	ldr	r1, [r3, #24]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	021a      	lsls	r2, r3, #8
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	619a      	str	r2, [r3, #24]
      break;
 8003760:	e043      	b.n	80037ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 faa1 	bl	8003cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0208 	orr.w	r2, r2, #8
 800377c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0204 	bic.w	r2, r2, #4
 800378c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69d9      	ldr	r1, [r3, #28]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	61da      	str	r2, [r3, #28]
      break;
 80037a0:	e023      	b.n	80037ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 faf5 	bl	8003d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69d9      	ldr	r1, [r3, #28]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	021a      	lsls	r2, r3, #8
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	61da      	str	r2, [r3, #28]
      break;
 80037e2:	e002      	b.n	80037ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
      break;
 80037e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIM_ConfigClockSource+0x1c>
 8003814:	2302      	movs	r3, #2
 8003816:	e0b4      	b.n	8003982 <HAL_TIM_ConfigClockSource+0x186>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800383e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003850:	d03e      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003856:	f200 8087 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385e:	f000 8086 	beq.w	800396e <HAL_TIM_ConfigClockSource+0x172>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	d87f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b70      	cmp	r3, #112	@ 0x70
 800386a:	d01a      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0xa6>
 800386c:	2b70      	cmp	r3, #112	@ 0x70
 800386e:	d87b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b60      	cmp	r3, #96	@ 0x60
 8003872:	d050      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x11a>
 8003874:	2b60      	cmp	r3, #96	@ 0x60
 8003876:	d877      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003878:	2b50      	cmp	r3, #80	@ 0x50
 800387a:	d03c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0xfa>
 800387c:	2b50      	cmp	r3, #80	@ 0x50
 800387e:	d873      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d058      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x13a>
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d86f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b30      	cmp	r3, #48	@ 0x30
 800388a:	d064      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d86b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d060      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d867      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05c      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d05a      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 80038a0:	e062      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b2:	f000 fb41 	bl	8003f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
      break;
 80038ce:	e04f      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	f000 fb2a 	bl	8003f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038f2:	609a      	str	r2, [r3, #8]
      break;
 80038f4:	e03c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	461a      	mov	r2, r3
 8003904:	f000 fa9e 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2150      	movs	r1, #80	@ 0x50
 800390e:	4618      	mov	r0, r3
 8003910:	f000 faf7 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003914:	e02c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003922:	461a      	mov	r2, r3
 8003924:	f000 fabd 	bl	8003ea2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2160      	movs	r1, #96	@ 0x60
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fae7 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003934:	e01c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	461a      	mov	r2, r3
 8003944:	f000 fa7e 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2140      	movs	r1, #64	@ 0x40
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fad7 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003954:	e00c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 face 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003966:	e003      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e000      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800396e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a46      	ldr	r2, [pc, #280]	@ (8003ab8 <TIM_Base_SetConfig+0x12c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a43      	ldr	r2, [pc, #268]	@ (8003abc <TIM_Base_SetConfig+0x130>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a42      	ldr	r2, [pc, #264]	@ (8003ac0 <TIM_Base_SetConfig+0x134>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a41      	ldr	r2, [pc, #260]	@ (8003ac4 <TIM_Base_SetConfig+0x138>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a40      	ldr	r2, [pc, #256]	@ (8003ac8 <TIM_Base_SetConfig+0x13c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a35      	ldr	r2, [pc, #212]	@ (8003ab8 <TIM_Base_SetConfig+0x12c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d02b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ec:	d027      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a32      	ldr	r2, [pc, #200]	@ (8003abc <TIM_Base_SetConfig+0x130>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d023      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a31      	ldr	r2, [pc, #196]	@ (8003ac0 <TIM_Base_SetConfig+0x134>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a30      	ldr	r2, [pc, #192]	@ (8003ac4 <TIM_Base_SetConfig+0x138>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac8 <TIM_Base_SetConfig+0x13c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d017      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2e      	ldr	r2, [pc, #184]	@ (8003acc <TIM_Base_SetConfig+0x140>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad0 <TIM_Base_SetConfig+0x144>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad4 <TIM_Base_SetConfig+0x148>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad8 <TIM_Base_SetConfig+0x14c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2a      	ldr	r2, [pc, #168]	@ (8003adc <TIM_Base_SetConfig+0x150>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a29      	ldr	r2, [pc, #164]	@ (8003ae0 <TIM_Base_SetConfig+0x154>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a10      	ldr	r2, [pc, #64]	@ (8003ab8 <TIM_Base_SetConfig+0x12c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_Base_SetConfig+0xf8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ac8 <TIM_Base_SetConfig+0x13c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40010400 	.word	0x40010400
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800
 8003ad8:	40001800 	.word	0x40001800
 8003adc:	40001c00 	.word	0x40001c00
 8003ae0:	40002000 	.word	0x40002000

08003ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f023 0201 	bic.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 0302 	bic.w	r3, r3, #2
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a20      	ldr	r2, [pc, #128]	@ (8003bbc <TIM_OC1_SetConfig+0xd8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC1_SetConfig+0x64>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc0 <TIM_OC1_SetConfig+0xdc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10c      	bne.n	8003b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0308 	bic.w	r3, r3, #8
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a15      	ldr	r2, [pc, #84]	@ (8003bbc <TIM_OC1_SetConfig+0xd8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_OC1_SetConfig+0x8e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a14      	ldr	r2, [pc, #80]	@ (8003bc0 <TIM_OC1_SetConfig+0xdc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f023 0210 	bic.w	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0320 	bic.w	r3, r3, #32
 8003c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <TIM_OC2_SetConfig+0xe4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC2_SetConfig+0x68>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <TIM_OC2_SetConfig+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10d      	bne.n	8003c48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <TIM_OC2_SetConfig+0xe4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_OC2_SetConfig+0x94>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a16      	ldr	r2, [pc, #88]	@ (8003cac <TIM_OC2_SetConfig+0xe8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d113      	bne.n	8003c80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	621a      	str	r2, [r3, #32]
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40010400 	.word	0x40010400

08003cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a21      	ldr	r2, [pc, #132]	@ (8003d90 <TIM_OC3_SetConfig+0xe0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC3_SetConfig+0x66>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a20      	ldr	r2, [pc, #128]	@ (8003d94 <TIM_OC3_SetConfig+0xe4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10d      	bne.n	8003d32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <TIM_OC3_SetConfig+0xe0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_OC3_SetConfig+0x92>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a15      	ldr	r2, [pc, #84]	@ (8003d94 <TIM_OC3_SetConfig+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d113      	bne.n	8003d6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40010400 	.word	0x40010400

08003d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	031b      	lsls	r3, r3, #12
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a12      	ldr	r2, [pc, #72]	@ (8003e3c <TIM_OC4_SetConfig+0xa4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_OC4_SetConfig+0x68>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <TIM_OC4_SetConfig+0xa8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d109      	bne.n	8003e14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010400 	.word	0x40010400

08003e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 030a 	bic.w	r3, r3, #10
 8003e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b087      	sub	sp, #28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f023 0210 	bic.w	r2, r3, #16
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	031b      	lsls	r3, r3, #12
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ede:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f043 0307 	orr.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e05a      	b.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a21      	ldr	r2, [pc, #132]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004028:	d01d      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1a      	ldr	r2, [pc, #104]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a18      	ldr	r2, [pc, #96]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a17      	ldr	r2, [pc, #92]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a15      	ldr	r2, [pc, #84]	@ (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800406c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40010400 	.word	0x40010400
 80040b4:	40014000 	.word	0x40014000
 80040b8:	40001800 	.word	0x40001800

080040bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e03d      	b.n	8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e042      	b.n	80041f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fa24 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	@ 0x24
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f82b 	bl	8004200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b0c0      	sub	sp, #256	@ 0x100
 8004206:	af00      	add	r7, sp, #0
 8004208:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	68d9      	ldr	r1, [r3, #12]
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	ea40 0301 	orr.w	r3, r0, r1
 8004228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	431a      	orrs	r2, r3
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004258:	f021 010c 	bic.w	r1, r1, #12
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004266:	430b      	orrs	r3, r1
 8004268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427a:	6999      	ldr	r1, [r3, #24]
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	ea40 0301 	orr.w	r3, r0, r1
 8004286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b8f      	ldr	r3, [pc, #572]	@ (80044cc <UART_SetConfig+0x2cc>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d005      	beq.n	80042a0 <UART_SetConfig+0xa0>
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b8d      	ldr	r3, [pc, #564]	@ (80044d0 <UART_SetConfig+0x2d0>)
 800429c:	429a      	cmp	r2, r3
 800429e:	d104      	bne.n	80042aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042a0:	f7fe fb2e 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 80042a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042a8:	e003      	b.n	80042b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042aa:	f7fe fb15 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 80042ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042bc:	f040 810c 	bne.w	80044d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042d2:	4622      	mov	r2, r4
 80042d4:	462b      	mov	r3, r5
 80042d6:	1891      	adds	r1, r2, r2
 80042d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042da:	415b      	adcs	r3, r3
 80042dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042e2:	4621      	mov	r1, r4
 80042e4:	eb12 0801 	adds.w	r8, r2, r1
 80042e8:	4629      	mov	r1, r5
 80042ea:	eb43 0901 	adc.w	r9, r3, r1
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004302:	4690      	mov	r8, r2
 8004304:	4699      	mov	r9, r3
 8004306:	4623      	mov	r3, r4
 8004308:	eb18 0303 	adds.w	r3, r8, r3
 800430c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004310:	462b      	mov	r3, r5
 8004312:	eb49 0303 	adc.w	r3, r9, r3
 8004316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004326:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800432a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800432e:	460b      	mov	r3, r1
 8004330:	18db      	adds	r3, r3, r3
 8004332:	653b      	str	r3, [r7, #80]	@ 0x50
 8004334:	4613      	mov	r3, r2
 8004336:	eb42 0303 	adc.w	r3, r2, r3
 800433a:	657b      	str	r3, [r7, #84]	@ 0x54
 800433c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004344:	f7fc fbfe 	bl	8000b44 <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4b61      	ldr	r3, [pc, #388]	@ (80044d4 <UART_SetConfig+0x2d4>)
 800434e:	fba3 2302 	umull	r2, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	011c      	lsls	r4, r3, #4
 8004356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004360:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	1891      	adds	r1, r2, r2
 800436e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004370:	415b      	adcs	r3, r3
 8004372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004378:	4641      	mov	r1, r8
 800437a:	eb12 0a01 	adds.w	sl, r2, r1
 800437e:	4649      	mov	r1, r9
 8004380:	eb43 0b01 	adc.w	fp, r3, r1
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004398:	4692      	mov	sl, r2
 800439a:	469b      	mov	fp, r3
 800439c:	4643      	mov	r3, r8
 800439e:	eb1a 0303 	adds.w	r3, sl, r3
 80043a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043a6:	464b      	mov	r3, r9
 80043a8:	eb4b 0303 	adc.w	r3, fp, r3
 80043ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043da:	f7fc fbb3 	bl	8000b44 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	4b3b      	ldr	r3, [pc, #236]	@ (80044d4 <UART_SetConfig+0x2d4>)
 80043e6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2264      	movs	r2, #100	@ 0x64
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	1acb      	subs	r3, r1, r3
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043fa:	4b36      	ldr	r3, [pc, #216]	@ (80044d4 <UART_SetConfig+0x2d4>)
 80043fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004408:	441c      	add	r4, r3
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004414:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004424:	415b      	adcs	r3, r3
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800442c:	4641      	mov	r1, r8
 800442e:	1851      	adds	r1, r2, r1
 8004430:	6339      	str	r1, [r7, #48]	@ 0x30
 8004432:	4649      	mov	r1, r9
 8004434:	414b      	adcs	r3, r1
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004444:	4659      	mov	r1, fp
 8004446:	00cb      	lsls	r3, r1, #3
 8004448:	4651      	mov	r1, sl
 800444a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444e:	4651      	mov	r1, sl
 8004450:	00ca      	lsls	r2, r1, #3
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	4603      	mov	r3, r0
 8004458:	4642      	mov	r2, r8
 800445a:	189b      	adds	r3, r3, r2
 800445c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004460:	464b      	mov	r3, r9
 8004462:	460a      	mov	r2, r1
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004478:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800447c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004480:	460b      	mov	r3, r1
 8004482:	18db      	adds	r3, r3, r3
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004486:	4613      	mov	r3, r2
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800448e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004496:	f7fc fb55 	bl	8000b44 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <UART_SetConfig+0x2d4>)
 80044a0:	fba3 1302 	umull	r1, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	2164      	movs	r1, #100	@ 0x64
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	3332      	adds	r3, #50	@ 0x32
 80044b2:	4a08      	ldr	r2, [pc, #32]	@ (80044d4 <UART_SetConfig+0x2d4>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	f003 0207 	and.w	r2, r3, #7
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4422      	add	r2, r4
 80044c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044c8:	e106      	b.n	80046d8 <UART_SetConfig+0x4d8>
 80044ca:	bf00      	nop
 80044cc:	40011000 	.word	0x40011000
 80044d0:	40011400 	.word	0x40011400
 80044d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044ea:	4642      	mov	r2, r8
 80044ec:	464b      	mov	r3, r9
 80044ee:	1891      	adds	r1, r2, r2
 80044f0:	6239      	str	r1, [r7, #32]
 80044f2:	415b      	adcs	r3, r3
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044fa:	4641      	mov	r1, r8
 80044fc:	1854      	adds	r4, r2, r1
 80044fe:	4649      	mov	r1, r9
 8004500:	eb43 0501 	adc.w	r5, r3, r1
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	00eb      	lsls	r3, r5, #3
 800450e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004512:	00e2      	lsls	r2, r4, #3
 8004514:	4614      	mov	r4, r2
 8004516:	461d      	mov	r5, r3
 8004518:	4643      	mov	r3, r8
 800451a:	18e3      	adds	r3, r4, r3
 800451c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004520:	464b      	mov	r3, r9
 8004522:	eb45 0303 	adc.w	r3, r5, r3
 8004526:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004536:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004546:	4629      	mov	r1, r5
 8004548:	008b      	lsls	r3, r1, #2
 800454a:	4621      	mov	r1, r4
 800454c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004550:	4621      	mov	r1, r4
 8004552:	008a      	lsls	r2, r1, #2
 8004554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004558:	f7fc faf4 	bl	8000b44 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b60      	ldr	r3, [pc, #384]	@ (80046e4 <UART_SetConfig+0x4e4>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	011c      	lsls	r4, r3, #4
 800456a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004574:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	61b9      	str	r1, [r7, #24]
 8004584:	415b      	adcs	r3, r3
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800458c:	4641      	mov	r1, r8
 800458e:	1851      	adds	r1, r2, r1
 8004590:	6139      	str	r1, [r7, #16]
 8004592:	4649      	mov	r1, r9
 8004594:	414b      	adcs	r3, r1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045a4:	4659      	mov	r1, fp
 80045a6:	00cb      	lsls	r3, r1, #3
 80045a8:	4651      	mov	r1, sl
 80045aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ae:	4651      	mov	r1, sl
 80045b0:	00ca      	lsls	r2, r1, #3
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	4642      	mov	r2, r8
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045c0:	464b      	mov	r3, r9
 80045c2:	460a      	mov	r2, r1
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045e4:	4649      	mov	r1, r9
 80045e6:	008b      	lsls	r3, r1, #2
 80045e8:	4641      	mov	r1, r8
 80045ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ee:	4641      	mov	r1, r8
 80045f0:	008a      	lsls	r2, r1, #2
 80045f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045f6:	f7fc faa5 	bl	8000b44 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <UART_SetConfig+0x4e4>)
 8004602:	fba3 2301 	umull	r2, r3, r3, r1
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2264      	movs	r2, #100	@ 0x64
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	1acb      	subs	r3, r1, r3
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	3332      	adds	r3, #50	@ 0x32
 8004614:	4a33      	ldr	r2, [pc, #204]	@ (80046e4 <UART_SetConfig+0x4e4>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004620:	441c      	add	r4, r3
 8004622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004626:	2200      	movs	r2, #0
 8004628:	673b      	str	r3, [r7, #112]	@ 0x70
 800462a:	677a      	str	r2, [r7, #116]	@ 0x74
 800462c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	415b      	adcs	r3, r3
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004672:	464b      	mov	r3, r9
 8004674:	460a      	mov	r2, r1
 8004676:	eb42 0303 	adc.w	r3, r2, r3
 800467a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	663b      	str	r3, [r7, #96]	@ 0x60
 8004686:	667a      	str	r2, [r7, #100]	@ 0x64
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004694:	4649      	mov	r1, r9
 8004696:	008b      	lsls	r3, r1, #2
 8004698:	4641      	mov	r1, r8
 800469a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469e:	4641      	mov	r1, r8
 80046a0:	008a      	lsls	r2, r1, #2
 80046a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046a6:	f7fc fa4d 	bl	8000b44 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <UART_SetConfig+0x4e4>)
 80046b0:	fba3 1302 	umull	r1, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2164      	movs	r1, #100	@ 0x64
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	3332      	adds	r3, #50	@ 0x32
 80046c2:	4a08      	ldr	r2, [pc, #32]	@ (80046e4 <UART_SetConfig+0x4e4>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4422      	add	r2, r4
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046de:	46bd      	mov	sp, r7
 80046e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e4:	51eb851f 	.word	0x51eb851f

080046e8 <memset>:
 80046e8:	4402      	add	r2, r0
 80046ea:	4603      	mov	r3, r0
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d100      	bne.n	80046f2 <memset+0xa>
 80046f0:	4770      	bx	lr
 80046f2:	f803 1b01 	strb.w	r1, [r3], #1
 80046f6:	e7f9      	b.n	80046ec <memset+0x4>

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	@ (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	@ (800473c <__libc_init_array+0x44>)
 800470c:	f001 f848 	bl	80057a0 <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	080059b8 	.word	0x080059b8
 8004734:	080059b8 	.word	0x080059b8
 8004738:	080059b8 	.word	0x080059b8
 800473c:	080059bc 	.word	0x080059bc

08004740 <sin>:
 8004740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004742:	ec53 2b10 	vmov	r2, r3, d0
 8004746:	4826      	ldr	r0, [pc, #152]	@ (80047e0 <sin+0xa0>)
 8004748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800474c:	4281      	cmp	r1, r0
 800474e:	d807      	bhi.n	8004760 <sin+0x20>
 8004750:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80047d8 <sin+0x98>
 8004754:	2000      	movs	r0, #0
 8004756:	b005      	add	sp, #20
 8004758:	f85d eb04 	ldr.w	lr, [sp], #4
 800475c:	f000 b90c 	b.w	8004978 <__kernel_sin>
 8004760:	4820      	ldr	r0, [pc, #128]	@ (80047e4 <sin+0xa4>)
 8004762:	4281      	cmp	r1, r0
 8004764:	d908      	bls.n	8004778 <sin+0x38>
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	f7fb fd51 	bl	8000210 <__aeabi_dsub>
 800476e:	ec41 0b10 	vmov	d0, r0, r1
 8004772:	b005      	add	sp, #20
 8004774:	f85d fb04 	ldr.w	pc, [sp], #4
 8004778:	4668      	mov	r0, sp
 800477a:	f000 f9b9 	bl	8004af0 <__ieee754_rem_pio2>
 800477e:	f000 0003 	and.w	r0, r0, #3
 8004782:	2801      	cmp	r0, #1
 8004784:	d00c      	beq.n	80047a0 <sin+0x60>
 8004786:	2802      	cmp	r0, #2
 8004788:	d011      	beq.n	80047ae <sin+0x6e>
 800478a:	b9e8      	cbnz	r0, 80047c8 <sin+0x88>
 800478c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004790:	ed9d 0b00 	vldr	d0, [sp]
 8004794:	2001      	movs	r0, #1
 8004796:	f000 f8ef 	bl	8004978 <__kernel_sin>
 800479a:	ec51 0b10 	vmov	r0, r1, d0
 800479e:	e7e6      	b.n	800476e <sin+0x2e>
 80047a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047a4:	ed9d 0b00 	vldr	d0, [sp]
 80047a8:	f000 f81e 	bl	80047e8 <__kernel_cos>
 80047ac:	e7f5      	b.n	800479a <sin+0x5a>
 80047ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047b2:	ed9d 0b00 	vldr	d0, [sp]
 80047b6:	2001      	movs	r0, #1
 80047b8:	f000 f8de 	bl	8004978 <__kernel_sin>
 80047bc:	ec53 2b10 	vmov	r2, r3, d0
 80047c0:	4610      	mov	r0, r2
 80047c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80047c6:	e7d2      	b.n	800476e <sin+0x2e>
 80047c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047cc:	ed9d 0b00 	vldr	d0, [sp]
 80047d0:	f000 f80a 	bl	80047e8 <__kernel_cos>
 80047d4:	e7f2      	b.n	80047bc <sin+0x7c>
 80047d6:	bf00      	nop
	...
 80047e0:	3fe921fb 	.word	0x3fe921fb
 80047e4:	7fefffff 	.word	0x7fefffff

080047e8 <__kernel_cos>:
 80047e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	ec57 6b10 	vmov	r6, r7, d0
 80047f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80047f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80047f8:	ed8d 1b00 	vstr	d1, [sp]
 80047fc:	d206      	bcs.n	800480c <__kernel_cos+0x24>
 80047fe:	4630      	mov	r0, r6
 8004800:	4639      	mov	r1, r7
 8004802:	f7fc f957 	bl	8000ab4 <__aeabi_d2iz>
 8004806:	2800      	cmp	r0, #0
 8004808:	f000 8088 	beq.w	800491c <__kernel_cos+0x134>
 800480c:	4632      	mov	r2, r6
 800480e:	463b      	mov	r3, r7
 8004810:	4630      	mov	r0, r6
 8004812:	4639      	mov	r1, r7
 8004814:	f7fb feb4 	bl	8000580 <__aeabi_dmul>
 8004818:	4b51      	ldr	r3, [pc, #324]	@ (8004960 <__kernel_cos+0x178>)
 800481a:	2200      	movs	r2, #0
 800481c:	4604      	mov	r4, r0
 800481e:	460d      	mov	r5, r1
 8004820:	f7fb feae 	bl	8000580 <__aeabi_dmul>
 8004824:	a340      	add	r3, pc, #256	@ (adr r3, 8004928 <__kernel_cos+0x140>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	4682      	mov	sl, r0
 800482c:	468b      	mov	fp, r1
 800482e:	4620      	mov	r0, r4
 8004830:	4629      	mov	r1, r5
 8004832:	f7fb fea5 	bl	8000580 <__aeabi_dmul>
 8004836:	a33e      	add	r3, pc, #248	@ (adr r3, 8004930 <__kernel_cos+0x148>)
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb fcea 	bl	8000214 <__adddf3>
 8004840:	4622      	mov	r2, r4
 8004842:	462b      	mov	r3, r5
 8004844:	f7fb fe9c 	bl	8000580 <__aeabi_dmul>
 8004848:	a33b      	add	r3, pc, #236	@ (adr r3, 8004938 <__kernel_cos+0x150>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f7fb fcdf 	bl	8000210 <__aeabi_dsub>
 8004852:	4622      	mov	r2, r4
 8004854:	462b      	mov	r3, r5
 8004856:	f7fb fe93 	bl	8000580 <__aeabi_dmul>
 800485a:	a339      	add	r3, pc, #228	@ (adr r3, 8004940 <__kernel_cos+0x158>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fcd8 	bl	8000214 <__adddf3>
 8004864:	4622      	mov	r2, r4
 8004866:	462b      	mov	r3, r5
 8004868:	f7fb fe8a 	bl	8000580 <__aeabi_dmul>
 800486c:	a336      	add	r3, pc, #216	@ (adr r3, 8004948 <__kernel_cos+0x160>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fccd 	bl	8000210 <__aeabi_dsub>
 8004876:	4622      	mov	r2, r4
 8004878:	462b      	mov	r3, r5
 800487a:	f7fb fe81 	bl	8000580 <__aeabi_dmul>
 800487e:	a334      	add	r3, pc, #208	@ (adr r3, 8004950 <__kernel_cos+0x168>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f7fb fcc6 	bl	8000214 <__adddf3>
 8004888:	4622      	mov	r2, r4
 800488a:	462b      	mov	r3, r5
 800488c:	f7fb fe78 	bl	8000580 <__aeabi_dmul>
 8004890:	4622      	mov	r2, r4
 8004892:	462b      	mov	r3, r5
 8004894:	f7fb fe74 	bl	8000580 <__aeabi_dmul>
 8004898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800489c:	4604      	mov	r4, r0
 800489e:	460d      	mov	r5, r1
 80048a0:	4630      	mov	r0, r6
 80048a2:	4639      	mov	r1, r7
 80048a4:	f7fb fe6c 	bl	8000580 <__aeabi_dmul>
 80048a8:	460b      	mov	r3, r1
 80048aa:	4602      	mov	r2, r0
 80048ac:	4629      	mov	r1, r5
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7fb fcae 	bl	8000210 <__aeabi_dsub>
 80048b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004964 <__kernel_cos+0x17c>)
 80048b6:	4598      	cmp	r8, r3
 80048b8:	4606      	mov	r6, r0
 80048ba:	460f      	mov	r7, r1
 80048bc:	d810      	bhi.n	80048e0 <__kernel_cos+0xf8>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4650      	mov	r0, sl
 80048c4:	4659      	mov	r1, fp
 80048c6:	f7fb fca3 	bl	8000210 <__aeabi_dsub>
 80048ca:	460b      	mov	r3, r1
 80048cc:	4926      	ldr	r1, [pc, #152]	@ (8004968 <__kernel_cos+0x180>)
 80048ce:	4602      	mov	r2, r0
 80048d0:	2000      	movs	r0, #0
 80048d2:	f7fb fc9d 	bl	8000210 <__aeabi_dsub>
 80048d6:	ec41 0b10 	vmov	d0, r0, r1
 80048da:	b003      	add	sp, #12
 80048dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e0:	4b22      	ldr	r3, [pc, #136]	@ (800496c <__kernel_cos+0x184>)
 80048e2:	4921      	ldr	r1, [pc, #132]	@ (8004968 <__kernel_cos+0x180>)
 80048e4:	4598      	cmp	r8, r3
 80048e6:	bf8c      	ite	hi
 80048e8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004970 <__kernel_cos+0x188>)
 80048ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80048ee:	2400      	movs	r4, #0
 80048f0:	4622      	mov	r2, r4
 80048f2:	462b      	mov	r3, r5
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fb fc8b 	bl	8000210 <__aeabi_dsub>
 80048fa:	4622      	mov	r2, r4
 80048fc:	4680      	mov	r8, r0
 80048fe:	4689      	mov	r9, r1
 8004900:	462b      	mov	r3, r5
 8004902:	4650      	mov	r0, sl
 8004904:	4659      	mov	r1, fp
 8004906:	f7fb fc83 	bl	8000210 <__aeabi_dsub>
 800490a:	4632      	mov	r2, r6
 800490c:	463b      	mov	r3, r7
 800490e:	f7fb fc7f 	bl	8000210 <__aeabi_dsub>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4640      	mov	r0, r8
 8004918:	4649      	mov	r1, r9
 800491a:	e7da      	b.n	80048d2 <__kernel_cos+0xea>
 800491c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004958 <__kernel_cos+0x170>
 8004920:	e7db      	b.n	80048da <__kernel_cos+0xf2>
 8004922:	bf00      	nop
 8004924:	f3af 8000 	nop.w
 8004928:	be8838d4 	.word	0xbe8838d4
 800492c:	bda8fae9 	.word	0xbda8fae9
 8004930:	bdb4b1c4 	.word	0xbdb4b1c4
 8004934:	3e21ee9e 	.word	0x3e21ee9e
 8004938:	809c52ad 	.word	0x809c52ad
 800493c:	3e927e4f 	.word	0x3e927e4f
 8004940:	19cb1590 	.word	0x19cb1590
 8004944:	3efa01a0 	.word	0x3efa01a0
 8004948:	16c15177 	.word	0x16c15177
 800494c:	3f56c16c 	.word	0x3f56c16c
 8004950:	5555554c 	.word	0x5555554c
 8004954:	3fa55555 	.word	0x3fa55555
 8004958:	00000000 	.word	0x00000000
 800495c:	3ff00000 	.word	0x3ff00000
 8004960:	3fe00000 	.word	0x3fe00000
 8004964:	3fd33332 	.word	0x3fd33332
 8004968:	3ff00000 	.word	0x3ff00000
 800496c:	3fe90000 	.word	0x3fe90000
 8004970:	3fd20000 	.word	0x3fd20000
 8004974:	00000000 	.word	0x00000000

08004978 <__kernel_sin>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	ec55 4b10 	vmov	r4, r5, d0
 8004980:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004984:	b085      	sub	sp, #20
 8004986:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800498a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800498e:	4680      	mov	r8, r0
 8004990:	d205      	bcs.n	800499e <__kernel_sin+0x26>
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fc f88d 	bl	8000ab4 <__aeabi_d2iz>
 800499a:	2800      	cmp	r0, #0
 800499c:	d052      	beq.n	8004a44 <__kernel_sin+0xcc>
 800499e:	4622      	mov	r2, r4
 80049a0:	462b      	mov	r3, r5
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fb fdeb 	bl	8000580 <__aeabi_dmul>
 80049aa:	4682      	mov	sl, r0
 80049ac:	468b      	mov	fp, r1
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4620      	mov	r0, r4
 80049b4:	4629      	mov	r1, r5
 80049b6:	f7fb fde3 	bl	8000580 <__aeabi_dmul>
 80049ba:	a342      	add	r3, pc, #264	@ (adr r3, 8004ac4 <__kernel_sin+0x14c>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	e9cd 0100 	strd	r0, r1, [sp]
 80049c4:	4650      	mov	r0, sl
 80049c6:	4659      	mov	r1, fp
 80049c8:	f7fb fdda 	bl	8000580 <__aeabi_dmul>
 80049cc:	a33f      	add	r3, pc, #252	@ (adr r3, 8004acc <__kernel_sin+0x154>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f7fb fc1d 	bl	8000210 <__aeabi_dsub>
 80049d6:	4652      	mov	r2, sl
 80049d8:	465b      	mov	r3, fp
 80049da:	f7fb fdd1 	bl	8000580 <__aeabi_dmul>
 80049de:	a33d      	add	r3, pc, #244	@ (adr r3, 8004ad4 <__kernel_sin+0x15c>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fc16 	bl	8000214 <__adddf3>
 80049e8:	4652      	mov	r2, sl
 80049ea:	465b      	mov	r3, fp
 80049ec:	f7fb fdc8 	bl	8000580 <__aeabi_dmul>
 80049f0:	a33a      	add	r3, pc, #232	@ (adr r3, 8004adc <__kernel_sin+0x164>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb fc0b 	bl	8000210 <__aeabi_dsub>
 80049fa:	4652      	mov	r2, sl
 80049fc:	465b      	mov	r3, fp
 80049fe:	f7fb fdbf 	bl	8000580 <__aeabi_dmul>
 8004a02:	a338      	add	r3, pc, #224	@ (adr r3, 8004ae4 <__kernel_sin+0x16c>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f7fb fc04 	bl	8000214 <__adddf3>
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460f      	mov	r7, r1
 8004a10:	f1b8 0f00 	cmp.w	r8, #0
 8004a14:	d11b      	bne.n	8004a4e <__kernel_sin+0xd6>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	f7fb fdaf 	bl	8000580 <__aeabi_dmul>
 8004a22:	a325      	add	r3, pc, #148	@ (adr r3, 8004ab8 <__kernel_sin+0x140>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f7fb fbf2 	bl	8000210 <__aeabi_dsub>
 8004a2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a30:	f7fb fda6 	bl	8000580 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4620      	mov	r0, r4
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	f7fb fbea 	bl	8000214 <__adddf3>
 8004a40:	4604      	mov	r4, r0
 8004a42:	460d      	mov	r5, r1
 8004a44:	ec45 4b10 	vmov	d0, r4, r5
 8004a48:	b005      	add	sp, #20
 8004a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a52:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac0 <__kernel_sin+0x148>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	f7fb fd93 	bl	8000580 <__aeabi_dmul>
 8004a5a:	4632      	mov	r2, r6
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	4689      	mov	r9, r1
 8004a60:	463b      	mov	r3, r7
 8004a62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a66:	f7fb fd8b 	bl	8000580 <__aeabi_dmul>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4640      	mov	r0, r8
 8004a70:	4649      	mov	r1, r9
 8004a72:	f7fb fbcd 	bl	8000210 <__aeabi_dsub>
 8004a76:	4652      	mov	r2, sl
 8004a78:	465b      	mov	r3, fp
 8004a7a:	f7fb fd81 	bl	8000580 <__aeabi_dmul>
 8004a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a82:	f7fb fbc5 	bl	8000210 <__aeabi_dsub>
 8004a86:	a30c      	add	r3, pc, #48	@ (adr r3, 8004ab8 <__kernel_sin+0x140>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	460f      	mov	r7, r1
 8004a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a94:	f7fb fd74 	bl	8000580 <__aeabi_dmul>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fb fbb8 	bl	8000214 <__adddf3>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7fb fbb0 	bl	8000210 <__aeabi_dsub>
 8004ab0:	e7c6      	b.n	8004a40 <__kernel_sin+0xc8>
 8004ab2:	bf00      	nop
 8004ab4:	f3af 8000 	nop.w
 8004ab8:	55555549 	.word	0x55555549
 8004abc:	3fc55555 	.word	0x3fc55555
 8004ac0:	3fe00000 	.word	0x3fe00000
 8004ac4:	5acfd57c 	.word	0x5acfd57c
 8004ac8:	3de5d93a 	.word	0x3de5d93a
 8004acc:	8a2b9ceb 	.word	0x8a2b9ceb
 8004ad0:	3e5ae5e6 	.word	0x3e5ae5e6
 8004ad4:	57b1fe7d 	.word	0x57b1fe7d
 8004ad8:	3ec71de3 	.word	0x3ec71de3
 8004adc:	19c161d5 	.word	0x19c161d5
 8004ae0:	3f2a01a0 	.word	0x3f2a01a0
 8004ae4:	1110f8a6 	.word	0x1110f8a6
 8004ae8:	3f811111 	.word	0x3f811111
 8004aec:	00000000 	.word	0x00000000

08004af0 <__ieee754_rem_pio2>:
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	ec57 6b10 	vmov	r6, r7, d0
 8004af8:	4bc5      	ldr	r3, [pc, #788]	@ (8004e10 <__ieee754_rem_pio2+0x320>)
 8004afa:	b08d      	sub	sp, #52	@ 0x34
 8004afc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004b00:	4598      	cmp	r8, r3
 8004b02:	4604      	mov	r4, r0
 8004b04:	9704      	str	r7, [sp, #16]
 8004b06:	d807      	bhi.n	8004b18 <__ieee754_rem_pio2+0x28>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	ed80 0b00 	vstr	d0, [r0]
 8004b10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004b14:	2500      	movs	r5, #0
 8004b16:	e028      	b.n	8004b6a <__ieee754_rem_pio2+0x7a>
 8004b18:	4bbe      	ldr	r3, [pc, #760]	@ (8004e14 <__ieee754_rem_pio2+0x324>)
 8004b1a:	4598      	cmp	r8, r3
 8004b1c:	d878      	bhi.n	8004c10 <__ieee754_rem_pio2+0x120>
 8004b1e:	9b04      	ldr	r3, [sp, #16]
 8004b20:	4dbd      	ldr	r5, [pc, #756]	@ (8004e18 <__ieee754_rem_pio2+0x328>)
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	4630      	mov	r0, r6
 8004b26:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004dd8 <__ieee754_rem_pio2+0x2e8>)
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	dd38      	ble.n	8004ba2 <__ieee754_rem_pio2+0xb2>
 8004b30:	f7fb fb6e 	bl	8000210 <__aeabi_dsub>
 8004b34:	45a8      	cmp	r8, r5
 8004b36:	4606      	mov	r6, r0
 8004b38:	460f      	mov	r7, r1
 8004b3a:	d01a      	beq.n	8004b72 <__ieee754_rem_pio2+0x82>
 8004b3c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004de0 <__ieee754_rem_pio2+0x2f0>)
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f7fb fb65 	bl	8000210 <__aeabi_dsub>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4680      	mov	r8, r0
 8004b4c:	4689      	mov	r9, r1
 8004b4e:	4630      	mov	r0, r6
 8004b50:	4639      	mov	r1, r7
 8004b52:	f7fb fb5d 	bl	8000210 <__aeabi_dsub>
 8004b56:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004de0 <__ieee754_rem_pio2+0x2f0>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f7fb fb58 	bl	8000210 <__aeabi_dsub>
 8004b60:	e9c4 8900 	strd	r8, r9, [r4]
 8004b64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b68:	2501      	movs	r5, #1
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	b00d      	add	sp, #52	@ 0x34
 8004b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b72:	a39d      	add	r3, pc, #628	@ (adr r3, 8004de8 <__ieee754_rem_pio2+0x2f8>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fb4a 	bl	8000210 <__aeabi_dsub>
 8004b7c:	a39c      	add	r3, pc, #624	@ (adr r3, 8004df0 <__ieee754_rem_pio2+0x300>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	4606      	mov	r6, r0
 8004b84:	460f      	mov	r7, r1
 8004b86:	f7fb fb43 	bl	8000210 <__aeabi_dsub>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4680      	mov	r8, r0
 8004b90:	4689      	mov	r9, r1
 8004b92:	4630      	mov	r0, r6
 8004b94:	4639      	mov	r1, r7
 8004b96:	f7fb fb3b 	bl	8000210 <__aeabi_dsub>
 8004b9a:	a395      	add	r3, pc, #596	@ (adr r3, 8004df0 <__ieee754_rem_pio2+0x300>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	e7dc      	b.n	8004b5c <__ieee754_rem_pio2+0x6c>
 8004ba2:	f7fb fb37 	bl	8000214 <__adddf3>
 8004ba6:	45a8      	cmp	r8, r5
 8004ba8:	4606      	mov	r6, r0
 8004baa:	460f      	mov	r7, r1
 8004bac:	d018      	beq.n	8004be0 <__ieee754_rem_pio2+0xf0>
 8004bae:	a38c      	add	r3, pc, #560	@ (adr r3, 8004de0 <__ieee754_rem_pio2+0x2f0>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f7fb fb2e 	bl	8000214 <__adddf3>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	4689      	mov	r9, r1
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	f7fb fb24 	bl	8000210 <__aeabi_dsub>
 8004bc8:	a385      	add	r3, pc, #532	@ (adr r3, 8004de0 <__ieee754_rem_pio2+0x2f0>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fb21 	bl	8000214 <__adddf3>
 8004bd2:	f04f 35ff 	mov.w	r5, #4294967295
 8004bd6:	e9c4 8900 	strd	r8, r9, [r4]
 8004bda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004bde:	e7c4      	b.n	8004b6a <__ieee754_rem_pio2+0x7a>
 8004be0:	a381      	add	r3, pc, #516	@ (adr r3, 8004de8 <__ieee754_rem_pio2+0x2f8>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fb15 	bl	8000214 <__adddf3>
 8004bea:	a381      	add	r3, pc, #516	@ (adr r3, 8004df0 <__ieee754_rem_pio2+0x300>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	460f      	mov	r7, r1
 8004bf4:	f7fb fb0e 	bl	8000214 <__adddf3>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4680      	mov	r8, r0
 8004bfe:	4689      	mov	r9, r1
 8004c00:	4630      	mov	r0, r6
 8004c02:	4639      	mov	r1, r7
 8004c04:	f7fb fb04 	bl	8000210 <__aeabi_dsub>
 8004c08:	a379      	add	r3, pc, #484	@ (adr r3, 8004df0 <__ieee754_rem_pio2+0x300>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	e7de      	b.n	8004bce <__ieee754_rem_pio2+0xde>
 8004c10:	4b82      	ldr	r3, [pc, #520]	@ (8004e1c <__ieee754_rem_pio2+0x32c>)
 8004c12:	4598      	cmp	r8, r3
 8004c14:	f200 80d1 	bhi.w	8004dba <__ieee754_rem_pio2+0x2ca>
 8004c18:	f000 f966 	bl	8004ee8 <fabs>
 8004c1c:	ec57 6b10 	vmov	r6, r7, d0
 8004c20:	a375      	add	r3, pc, #468	@ (adr r3, 8004df8 <__ieee754_rem_pio2+0x308>)
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	4630      	mov	r0, r6
 8004c28:	4639      	mov	r1, r7
 8004c2a:	f7fb fca9 	bl	8000580 <__aeabi_dmul>
 8004c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e20 <__ieee754_rem_pio2+0x330>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	f7fb faef 	bl	8000214 <__adddf3>
 8004c36:	f7fb ff3d 	bl	8000ab4 <__aeabi_d2iz>
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	f7fb fc36 	bl	80004ac <__aeabi_i2d>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c48:	a363      	add	r3, pc, #396	@ (adr r3, 8004dd8 <__ieee754_rem_pio2+0x2e8>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fc97 	bl	8000580 <__aeabi_dmul>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4630      	mov	r0, r6
 8004c58:	4639      	mov	r1, r7
 8004c5a:	f7fb fad9 	bl	8000210 <__aeabi_dsub>
 8004c5e:	a360      	add	r3, pc, #384	@ (adr r3, 8004de0 <__ieee754_rem_pio2+0x2f0>)
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	4682      	mov	sl, r0
 8004c66:	468b      	mov	fp, r1
 8004c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c6c:	f7fb fc88 	bl	8000580 <__aeabi_dmul>
 8004c70:	2d1f      	cmp	r5, #31
 8004c72:	4606      	mov	r6, r0
 8004c74:	460f      	mov	r7, r1
 8004c76:	dc0c      	bgt.n	8004c92 <__ieee754_rem_pio2+0x1a2>
 8004c78:	4b6a      	ldr	r3, [pc, #424]	@ (8004e24 <__ieee754_rem_pio2+0x334>)
 8004c7a:	1e6a      	subs	r2, r5, #1
 8004c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c80:	4543      	cmp	r3, r8
 8004c82:	d006      	beq.n	8004c92 <__ieee754_rem_pio2+0x1a2>
 8004c84:	4632      	mov	r2, r6
 8004c86:	463b      	mov	r3, r7
 8004c88:	4650      	mov	r0, sl
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	f7fb fac0 	bl	8000210 <__aeabi_dsub>
 8004c90:	e00e      	b.n	8004cb0 <__ieee754_rem_pio2+0x1c0>
 8004c92:	463b      	mov	r3, r7
 8004c94:	4632      	mov	r2, r6
 8004c96:	4650      	mov	r0, sl
 8004c98:	4659      	mov	r1, fp
 8004c9a:	f7fb fab9 	bl	8000210 <__aeabi_dsub>
 8004c9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ca8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	dc02      	bgt.n	8004cb6 <__ieee754_rem_pio2+0x1c6>
 8004cb0:	e9c4 0100 	strd	r0, r1, [r4]
 8004cb4:	e039      	b.n	8004d2a <__ieee754_rem_pio2+0x23a>
 8004cb6:	a34c      	add	r3, pc, #304	@ (adr r3, 8004de8 <__ieee754_rem_pio2+0x2f8>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cc0:	f7fb fc5e 	bl	8000580 <__aeabi_dmul>
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	460f      	mov	r7, r1
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4650      	mov	r0, sl
 8004cce:	4659      	mov	r1, fp
 8004cd0:	f7fb fa9e 	bl	8000210 <__aeabi_dsub>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4680      	mov	r8, r0
 8004cda:	4689      	mov	r9, r1
 8004cdc:	4650      	mov	r0, sl
 8004cde:	4659      	mov	r1, fp
 8004ce0:	f7fb fa96 	bl	8000210 <__aeabi_dsub>
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	f7fb fa92 	bl	8000210 <__aeabi_dsub>
 8004cec:	a340      	add	r3, pc, #256	@ (adr r3, 8004df0 <__ieee754_rem_pio2+0x300>)
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	460f      	mov	r7, r1
 8004cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cfa:	f7fb fc41 	bl	8000580 <__aeabi_dmul>
 8004cfe:	4632      	mov	r2, r6
 8004d00:	463b      	mov	r3, r7
 8004d02:	f7fb fa85 	bl	8000210 <__aeabi_dsub>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	460f      	mov	r7, r1
 8004d0e:	4640      	mov	r0, r8
 8004d10:	4649      	mov	r1, r9
 8004d12:	f7fb fa7d 	bl	8000210 <__aeabi_dsub>
 8004d16:	9a05      	ldr	r2, [sp, #20]
 8004d18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b31      	cmp	r3, #49	@ 0x31
 8004d20:	dc20      	bgt.n	8004d64 <__ieee754_rem_pio2+0x274>
 8004d22:	e9c4 0100 	strd	r0, r1, [r4]
 8004d26:	46c2      	mov	sl, r8
 8004d28:	46cb      	mov	fp, r9
 8004d2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004d2e:	4650      	mov	r0, sl
 8004d30:	4642      	mov	r2, r8
 8004d32:	464b      	mov	r3, r9
 8004d34:	4659      	mov	r1, fp
 8004d36:	f7fb fa6b 	bl	8000210 <__aeabi_dsub>
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	f7fb fa67 	bl	8000210 <__aeabi_dsub>
 8004d42:	9b04      	ldr	r3, [sp, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d4a:	f6bf af0e 	bge.w	8004b6a <__ieee754_rem_pio2+0x7a>
 8004d4e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004d52:	6063      	str	r3, [r4, #4]
 8004d54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d58:	f8c4 8000 	str.w	r8, [r4]
 8004d5c:	60a0      	str	r0, [r4, #8]
 8004d5e:	60e3      	str	r3, [r4, #12]
 8004d60:	426d      	negs	r5, r5
 8004d62:	e702      	b.n	8004b6a <__ieee754_rem_pio2+0x7a>
 8004d64:	a326      	add	r3, pc, #152	@ (adr r3, 8004e00 <__ieee754_rem_pio2+0x310>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d6e:	f7fb fc07 	bl	8000580 <__aeabi_dmul>
 8004d72:	4606      	mov	r6, r0
 8004d74:	460f      	mov	r7, r1
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	f7fb fa47 	bl	8000210 <__aeabi_dsub>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4682      	mov	sl, r0
 8004d88:	468b      	mov	fp, r1
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	f7fb fa3f 	bl	8000210 <__aeabi_dsub>
 8004d92:	4632      	mov	r2, r6
 8004d94:	463b      	mov	r3, r7
 8004d96:	f7fb fa3b 	bl	8000210 <__aeabi_dsub>
 8004d9a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004e08 <__ieee754_rem_pio2+0x318>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	4606      	mov	r6, r0
 8004da2:	460f      	mov	r7, r1
 8004da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da8:	f7fb fbea 	bl	8000580 <__aeabi_dmul>
 8004dac:	4632      	mov	r2, r6
 8004dae:	463b      	mov	r3, r7
 8004db0:	f7fb fa2e 	bl	8000210 <__aeabi_dsub>
 8004db4:	4606      	mov	r6, r0
 8004db6:	460f      	mov	r7, r1
 8004db8:	e764      	b.n	8004c84 <__ieee754_rem_pio2+0x194>
 8004dba:	4b1b      	ldr	r3, [pc, #108]	@ (8004e28 <__ieee754_rem_pio2+0x338>)
 8004dbc:	4598      	cmp	r8, r3
 8004dbe:	d935      	bls.n	8004e2c <__ieee754_rem_pio2+0x33c>
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb fa22 	bl	8000210 <__aeabi_dsub>
 8004dcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004dd0:	e9c4 0100 	strd	r0, r1, [r4]
 8004dd4:	e69e      	b.n	8004b14 <__ieee754_rem_pio2+0x24>
 8004dd6:	bf00      	nop
 8004dd8:	54400000 	.word	0x54400000
 8004ddc:	3ff921fb 	.word	0x3ff921fb
 8004de0:	1a626331 	.word	0x1a626331
 8004de4:	3dd0b461 	.word	0x3dd0b461
 8004de8:	1a600000 	.word	0x1a600000
 8004dec:	3dd0b461 	.word	0x3dd0b461
 8004df0:	2e037073 	.word	0x2e037073
 8004df4:	3ba3198a 	.word	0x3ba3198a
 8004df8:	6dc9c883 	.word	0x6dc9c883
 8004dfc:	3fe45f30 	.word	0x3fe45f30
 8004e00:	2e000000 	.word	0x2e000000
 8004e04:	3ba3198a 	.word	0x3ba3198a
 8004e08:	252049c1 	.word	0x252049c1
 8004e0c:	397b839a 	.word	0x397b839a
 8004e10:	3fe921fb 	.word	0x3fe921fb
 8004e14:	4002d97b 	.word	0x4002d97b
 8004e18:	3ff921fb 	.word	0x3ff921fb
 8004e1c:	413921fb 	.word	0x413921fb
 8004e20:	3fe00000 	.word	0x3fe00000
 8004e24:	080057d8 	.word	0x080057d8
 8004e28:	7fefffff 	.word	0x7fefffff
 8004e2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004e30:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004e34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004e38:	4630      	mov	r0, r6
 8004e3a:	460f      	mov	r7, r1
 8004e3c:	f7fb fe3a 	bl	8000ab4 <__aeabi_d2iz>
 8004e40:	f7fb fb34 	bl	80004ac <__aeabi_i2d>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4630      	mov	r0, r6
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e50:	f7fb f9de 	bl	8000210 <__aeabi_dsub>
 8004e54:	4b22      	ldr	r3, [pc, #136]	@ (8004ee0 <__ieee754_rem_pio2+0x3f0>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	f7fb fb92 	bl	8000580 <__aeabi_dmul>
 8004e5c:	460f      	mov	r7, r1
 8004e5e:	4606      	mov	r6, r0
 8004e60:	f7fb fe28 	bl	8000ab4 <__aeabi_d2iz>
 8004e64:	f7fb fb22 	bl	80004ac <__aeabi_i2d>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4639      	mov	r1, r7
 8004e70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e74:	f7fb f9cc 	bl	8000210 <__aeabi_dsub>
 8004e78:	4b19      	ldr	r3, [pc, #100]	@ (8004ee0 <__ieee754_rem_pio2+0x3f0>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f7fb fb80 	bl	8000580 <__aeabi_dmul>
 8004e80:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004e84:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004e88:	f04f 0803 	mov.w	r8, #3
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	2700      	movs	r7, #0
 8004e90:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004e94:	4632      	mov	r2, r6
 8004e96:	463b      	mov	r3, r7
 8004e98:	46c2      	mov	sl, r8
 8004e9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e9e:	f7fb fdd7 	bl	8000a50 <__aeabi_dcmpeq>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d1f4      	bne.n	8004e90 <__ieee754_rem_pio2+0x3a0>
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <__ieee754_rem_pio2+0x3f4>)
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2302      	movs	r3, #2
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	462a      	mov	r2, r5
 8004eb0:	4653      	mov	r3, sl
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	a806      	add	r0, sp, #24
 8004eb6:	f000 f81f 	bl	8004ef8 <__kernel_rem_pio2>
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	f6bf ae53 	bge.w	8004b6a <__ieee754_rem_pio2+0x7a>
 8004ec4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004ec8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ecc:	e9c4 2300 	strd	r2, r3, [r4]
 8004ed0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004ed4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ed8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004edc:	e740      	b.n	8004d60 <__ieee754_rem_pio2+0x270>
 8004ede:	bf00      	nop
 8004ee0:	41700000 	.word	0x41700000
 8004ee4:	08005858 	.word	0x08005858

08004ee8 <fabs>:
 8004ee8:	ec51 0b10 	vmov	r0, r1, d0
 8004eec:	4602      	mov	r2, r0
 8004eee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004ef2:	ec43 2b10 	vmov	d0, r2, r3
 8004ef6:	4770      	bx	lr

08004ef8 <__kernel_rem_pio2>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	ed2d 8b02 	vpush	{d8}
 8004f00:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004f04:	f112 0f14 	cmn.w	r2, #20
 8004f08:	9306      	str	r3, [sp, #24]
 8004f0a:	9104      	str	r1, [sp, #16]
 8004f0c:	4bbe      	ldr	r3, [pc, #760]	@ (8005208 <__kernel_rem_pio2+0x310>)
 8004f0e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004f10:	9008      	str	r0, [sp, #32]
 8004f12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	9b06      	ldr	r3, [sp, #24]
 8004f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f1e:	bfa8      	it	ge
 8004f20:	1ed4      	subge	r4, r2, #3
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	bfb2      	itee	lt
 8004f26:	2400      	movlt	r4, #0
 8004f28:	2318      	movge	r3, #24
 8004f2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004f2e:	f06f 0317 	mvn.w	r3, #23
 8004f32:	fb04 3303 	mla	r3, r4, r3, r3
 8004f36:	eb03 0b02 	add.w	fp, r3, r2
 8004f3a:	9b00      	ldr	r3, [sp, #0]
 8004f3c:	9a05      	ldr	r2, [sp, #20]
 8004f3e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80051f8 <__kernel_rem_pio2+0x300>
 8004f42:	eb03 0802 	add.w	r8, r3, r2
 8004f46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004f48:	1aa7      	subs	r7, r4, r2
 8004f4a:	ae20      	add	r6, sp, #128	@ 0x80
 8004f4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004f50:	2500      	movs	r5, #0
 8004f52:	4545      	cmp	r5, r8
 8004f54:	dd13      	ble.n	8004f7e <__kernel_rem_pio2+0x86>
 8004f56:	9b06      	ldr	r3, [sp, #24]
 8004f58:	aa20      	add	r2, sp, #128	@ 0x80
 8004f5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004f5e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004f62:	f04f 0800 	mov.w	r8, #0
 8004f66:	9b00      	ldr	r3, [sp, #0]
 8004f68:	4598      	cmp	r8, r3
 8004f6a:	dc31      	bgt.n	8004fd0 <__kernel_rem_pio2+0xd8>
 8004f6c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80051f8 <__kernel_rem_pio2+0x300>
 8004f70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f78:	462f      	mov	r7, r5
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	e01b      	b.n	8004fb6 <__kernel_rem_pio2+0xbe>
 8004f7e:	42ef      	cmn	r7, r5
 8004f80:	d407      	bmi.n	8004f92 <__kernel_rem_pio2+0x9a>
 8004f82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004f86:	f7fb fa91 	bl	80004ac <__aeabi_i2d>
 8004f8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004f8e:	3501      	adds	r5, #1
 8004f90:	e7df      	b.n	8004f52 <__kernel_rem_pio2+0x5a>
 8004f92:	ec51 0b18 	vmov	r0, r1, d8
 8004f96:	e7f8      	b.n	8004f8a <__kernel_rem_pio2+0x92>
 8004f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004fa0:	f7fb faee 	bl	8000580 <__aeabi_dmul>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fac:	f7fb f932 	bl	8000214 <__adddf3>
 8004fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	9b05      	ldr	r3, [sp, #20]
 8004fb8:	429e      	cmp	r6, r3
 8004fba:	f1a7 0708 	sub.w	r7, r7, #8
 8004fbe:	ddeb      	ble.n	8004f98 <__kernel_rem_pio2+0xa0>
 8004fc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fc4:	f108 0801 	add.w	r8, r8, #1
 8004fc8:	ecaa 7b02 	vstmia	sl!, {d7}
 8004fcc:	3508      	adds	r5, #8
 8004fce:	e7ca      	b.n	8004f66 <__kernel_rem_pio2+0x6e>
 8004fd0:	9b00      	ldr	r3, [sp, #0]
 8004fd2:	f8dd 8000 	ldr.w	r8, [sp]
 8004fd6:	aa0c      	add	r2, sp, #48	@ 0x30
 8004fd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fde:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004fe0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004fea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fec:	ab98      	add	r3, sp, #608	@ 0x260
 8004fee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004ff2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004ff6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ffa:	ac0c      	add	r4, sp, #48	@ 0x30
 8004ffc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004ffe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005002:	46a1      	mov	r9, r4
 8005004:	46c2      	mov	sl, r8
 8005006:	f1ba 0f00 	cmp.w	sl, #0
 800500a:	f1a5 0508 	sub.w	r5, r5, #8
 800500e:	dc77      	bgt.n	8005100 <__kernel_rem_pio2+0x208>
 8005010:	4658      	mov	r0, fp
 8005012:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005016:	f000 fac7 	bl	80055a8 <scalbn>
 800501a:	ec57 6b10 	vmov	r6, r7, d0
 800501e:	2200      	movs	r2, #0
 8005020:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005024:	4630      	mov	r0, r6
 8005026:	4639      	mov	r1, r7
 8005028:	f7fb faaa 	bl	8000580 <__aeabi_dmul>
 800502c:	ec41 0b10 	vmov	d0, r0, r1
 8005030:	f000 fb3a 	bl	80056a8 <floor>
 8005034:	4b75      	ldr	r3, [pc, #468]	@ (800520c <__kernel_rem_pio2+0x314>)
 8005036:	ec51 0b10 	vmov	r0, r1, d0
 800503a:	2200      	movs	r2, #0
 800503c:	f7fb faa0 	bl	8000580 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4630      	mov	r0, r6
 8005046:	4639      	mov	r1, r7
 8005048:	f7fb f8e2 	bl	8000210 <__aeabi_dsub>
 800504c:	460f      	mov	r7, r1
 800504e:	4606      	mov	r6, r0
 8005050:	f7fb fd30 	bl	8000ab4 <__aeabi_d2iz>
 8005054:	9002      	str	r0, [sp, #8]
 8005056:	f7fb fa29 	bl	80004ac <__aeabi_i2d>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4630      	mov	r0, r6
 8005060:	4639      	mov	r1, r7
 8005062:	f7fb f8d5 	bl	8000210 <__aeabi_dsub>
 8005066:	f1bb 0f00 	cmp.w	fp, #0
 800506a:	4606      	mov	r6, r0
 800506c:	460f      	mov	r7, r1
 800506e:	dd6c      	ble.n	800514a <__kernel_rem_pio2+0x252>
 8005070:	f108 31ff 	add.w	r1, r8, #4294967295
 8005074:	ab0c      	add	r3, sp, #48	@ 0x30
 8005076:	9d02      	ldr	r5, [sp, #8]
 8005078:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800507c:	f1cb 0018 	rsb	r0, fp, #24
 8005080:	fa43 f200 	asr.w	r2, r3, r0
 8005084:	4415      	add	r5, r2
 8005086:	4082      	lsls	r2, r0
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	aa0c      	add	r2, sp, #48	@ 0x30
 800508c:	9502      	str	r5, [sp, #8]
 800508e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005092:	f1cb 0217 	rsb	r2, fp, #23
 8005096:	fa43 f902 	asr.w	r9, r3, r2
 800509a:	f1b9 0f00 	cmp.w	r9, #0
 800509e:	dd64      	ble.n	800516a <__kernel_rem_pio2+0x272>
 80050a0:	9b02      	ldr	r3, [sp, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	3301      	adds	r3, #1
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	4615      	mov	r5, r2
 80050aa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80050ae:	4590      	cmp	r8, r2
 80050b0:	f300 80b8 	bgt.w	8005224 <__kernel_rem_pio2+0x32c>
 80050b4:	f1bb 0f00 	cmp.w	fp, #0
 80050b8:	dd07      	ble.n	80050ca <__kernel_rem_pio2+0x1d2>
 80050ba:	f1bb 0f01 	cmp.w	fp, #1
 80050be:	f000 80bf 	beq.w	8005240 <__kernel_rem_pio2+0x348>
 80050c2:	f1bb 0f02 	cmp.w	fp, #2
 80050c6:	f000 80c6 	beq.w	8005256 <__kernel_rem_pio2+0x35e>
 80050ca:	f1b9 0f02 	cmp.w	r9, #2
 80050ce:	d14c      	bne.n	800516a <__kernel_rem_pio2+0x272>
 80050d0:	4632      	mov	r2, r6
 80050d2:	463b      	mov	r3, r7
 80050d4:	494e      	ldr	r1, [pc, #312]	@ (8005210 <__kernel_rem_pio2+0x318>)
 80050d6:	2000      	movs	r0, #0
 80050d8:	f7fb f89a 	bl	8000210 <__aeabi_dsub>
 80050dc:	4606      	mov	r6, r0
 80050de:	460f      	mov	r7, r1
 80050e0:	2d00      	cmp	r5, #0
 80050e2:	d042      	beq.n	800516a <__kernel_rem_pio2+0x272>
 80050e4:	4658      	mov	r0, fp
 80050e6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005200 <__kernel_rem_pio2+0x308>
 80050ea:	f000 fa5d 	bl	80055a8 <scalbn>
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	ec53 2b10 	vmov	r2, r3, d0
 80050f6:	f7fb f88b 	bl	8000210 <__aeabi_dsub>
 80050fa:	4606      	mov	r6, r0
 80050fc:	460f      	mov	r7, r1
 80050fe:	e034      	b.n	800516a <__kernel_rem_pio2+0x272>
 8005100:	4b44      	ldr	r3, [pc, #272]	@ (8005214 <__kernel_rem_pio2+0x31c>)
 8005102:	2200      	movs	r2, #0
 8005104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005108:	f7fb fa3a 	bl	8000580 <__aeabi_dmul>
 800510c:	f7fb fcd2 	bl	8000ab4 <__aeabi_d2iz>
 8005110:	f7fb f9cc 	bl	80004ac <__aeabi_i2d>
 8005114:	4b40      	ldr	r3, [pc, #256]	@ (8005218 <__kernel_rem_pio2+0x320>)
 8005116:	2200      	movs	r2, #0
 8005118:	4606      	mov	r6, r0
 800511a:	460f      	mov	r7, r1
 800511c:	f7fb fa30 	bl	8000580 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005128:	f7fb f872 	bl	8000210 <__aeabi_dsub>
 800512c:	f7fb fcc2 	bl	8000ab4 <__aeabi_d2iz>
 8005130:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005134:	f849 0b04 	str.w	r0, [r9], #4
 8005138:	4639      	mov	r1, r7
 800513a:	4630      	mov	r0, r6
 800513c:	f7fb f86a 	bl	8000214 <__adddf3>
 8005140:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005148:	e75d      	b.n	8005006 <__kernel_rem_pio2+0x10e>
 800514a:	d107      	bne.n	800515c <__kernel_rem_pio2+0x264>
 800514c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005150:	aa0c      	add	r2, sp, #48	@ 0x30
 8005152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005156:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800515a:	e79e      	b.n	800509a <__kernel_rem_pio2+0x1a2>
 800515c:	4b2f      	ldr	r3, [pc, #188]	@ (800521c <__kernel_rem_pio2+0x324>)
 800515e:	2200      	movs	r2, #0
 8005160:	f7fb fc94 	bl	8000a8c <__aeabi_dcmpge>
 8005164:	2800      	cmp	r0, #0
 8005166:	d143      	bne.n	80051f0 <__kernel_rem_pio2+0x2f8>
 8005168:	4681      	mov	r9, r0
 800516a:	2200      	movs	r2, #0
 800516c:	2300      	movs	r3, #0
 800516e:	4630      	mov	r0, r6
 8005170:	4639      	mov	r1, r7
 8005172:	f7fb fc6d 	bl	8000a50 <__aeabi_dcmpeq>
 8005176:	2800      	cmp	r0, #0
 8005178:	f000 80bf 	beq.w	80052fa <__kernel_rem_pio2+0x402>
 800517c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005180:	2200      	movs	r2, #0
 8005182:	9900      	ldr	r1, [sp, #0]
 8005184:	428b      	cmp	r3, r1
 8005186:	da6e      	bge.n	8005266 <__kernel_rem_pio2+0x36e>
 8005188:	2a00      	cmp	r2, #0
 800518a:	f000 8089 	beq.w	80052a0 <__kernel_rem_pio2+0x3a8>
 800518e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005192:	ab0c      	add	r3, sp, #48	@ 0x30
 8005194:	f1ab 0b18 	sub.w	fp, fp, #24
 8005198:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f6      	beq.n	800518e <__kernel_rem_pio2+0x296>
 80051a0:	4658      	mov	r0, fp
 80051a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005200 <__kernel_rem_pio2+0x308>
 80051a6:	f000 f9ff 	bl	80055a8 <scalbn>
 80051aa:	f108 0301 	add.w	r3, r8, #1
 80051ae:	00da      	lsls	r2, r3, #3
 80051b0:	9205      	str	r2, [sp, #20]
 80051b2:	ec55 4b10 	vmov	r4, r5, d0
 80051b6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80051b8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005214 <__kernel_rem_pio2+0x31c>
 80051bc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80051c0:	4646      	mov	r6, r8
 80051c2:	f04f 0a00 	mov.w	sl, #0
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	f280 80cf 	bge.w	800536a <__kernel_rem_pio2+0x472>
 80051cc:	4644      	mov	r4, r8
 80051ce:	2c00      	cmp	r4, #0
 80051d0:	f2c0 80fd 	blt.w	80053ce <__kernel_rem_pio2+0x4d6>
 80051d4:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <__kernel_rem_pio2+0x328>)
 80051d6:	461f      	mov	r7, r3
 80051d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80051da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051de:	9306      	str	r3, [sp, #24]
 80051e0:	f04f 0a00 	mov.w	sl, #0
 80051e4:	f04f 0b00 	mov.w	fp, #0
 80051e8:	2600      	movs	r6, #0
 80051ea:	eba8 0504 	sub.w	r5, r8, r4
 80051ee:	e0e2      	b.n	80053b6 <__kernel_rem_pio2+0x4be>
 80051f0:	f04f 0902 	mov.w	r9, #2
 80051f4:	e754      	b.n	80050a0 <__kernel_rem_pio2+0x1a8>
 80051f6:	bf00      	nop
	...
 8005204:	3ff00000 	.word	0x3ff00000
 8005208:	080059a0 	.word	0x080059a0
 800520c:	40200000 	.word	0x40200000
 8005210:	3ff00000 	.word	0x3ff00000
 8005214:	3e700000 	.word	0x3e700000
 8005218:	41700000 	.word	0x41700000
 800521c:	3fe00000 	.word	0x3fe00000
 8005220:	08005960 	.word	0x08005960
 8005224:	f854 3b04 	ldr.w	r3, [r4], #4
 8005228:	b945      	cbnz	r5, 800523c <__kernel_rem_pio2+0x344>
 800522a:	b123      	cbz	r3, 8005236 <__kernel_rem_pio2+0x33e>
 800522c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005230:	f844 3c04 	str.w	r3, [r4, #-4]
 8005234:	2301      	movs	r3, #1
 8005236:	3201      	adds	r2, #1
 8005238:	461d      	mov	r5, r3
 800523a:	e738      	b.n	80050ae <__kernel_rem_pio2+0x1b6>
 800523c:	1acb      	subs	r3, r1, r3
 800523e:	e7f7      	b.n	8005230 <__kernel_rem_pio2+0x338>
 8005240:	f108 32ff 	add.w	r2, r8, #4294967295
 8005244:	ab0c      	add	r3, sp, #48	@ 0x30
 8005246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800524e:	a90c      	add	r1, sp, #48	@ 0x30
 8005250:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005254:	e739      	b.n	80050ca <__kernel_rem_pio2+0x1d2>
 8005256:	f108 32ff 	add.w	r2, r8, #4294967295
 800525a:	ab0c      	add	r3, sp, #48	@ 0x30
 800525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005260:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005264:	e7f3      	b.n	800524e <__kernel_rem_pio2+0x356>
 8005266:	a90c      	add	r1, sp, #48	@ 0x30
 8005268:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800526c:	3b01      	subs	r3, #1
 800526e:	430a      	orrs	r2, r1
 8005270:	e787      	b.n	8005182 <__kernel_rem_pio2+0x28a>
 8005272:	3401      	adds	r4, #1
 8005274:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005278:	2a00      	cmp	r2, #0
 800527a:	d0fa      	beq.n	8005272 <__kernel_rem_pio2+0x37a>
 800527c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800527e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005282:	eb0d 0503 	add.w	r5, sp, r3
 8005286:	9b06      	ldr	r3, [sp, #24]
 8005288:	aa20      	add	r2, sp, #128	@ 0x80
 800528a:	4443      	add	r3, r8
 800528c:	f108 0701 	add.w	r7, r8, #1
 8005290:	3d98      	subs	r5, #152	@ 0x98
 8005292:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005296:	4444      	add	r4, r8
 8005298:	42bc      	cmp	r4, r7
 800529a:	da04      	bge.n	80052a6 <__kernel_rem_pio2+0x3ae>
 800529c:	46a0      	mov	r8, r4
 800529e:	e6a2      	b.n	8004fe6 <__kernel_rem_pio2+0xee>
 80052a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052a2:	2401      	movs	r4, #1
 80052a4:	e7e6      	b.n	8005274 <__kernel_rem_pio2+0x37c>
 80052a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80052ac:	f7fb f8fe 	bl	80004ac <__aeabi_i2d>
 80052b0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005578 <__kernel_rem_pio2+0x680>
 80052b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80052b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052c0:	46b2      	mov	sl, r6
 80052c2:	f04f 0800 	mov.w	r8, #0
 80052c6:	9b05      	ldr	r3, [sp, #20]
 80052c8:	4598      	cmp	r8, r3
 80052ca:	dd05      	ble.n	80052d8 <__kernel_rem_pio2+0x3e0>
 80052cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052d0:	3701      	adds	r7, #1
 80052d2:	eca5 7b02 	vstmia	r5!, {d7}
 80052d6:	e7df      	b.n	8005298 <__kernel_rem_pio2+0x3a0>
 80052d8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80052dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80052e0:	f7fb f94e 	bl	8000580 <__aeabi_dmul>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ec:	f7fa ff92 	bl	8000214 <__adddf3>
 80052f0:	f108 0801 	add.w	r8, r8, #1
 80052f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f8:	e7e5      	b.n	80052c6 <__kernel_rem_pio2+0x3ce>
 80052fa:	f1cb 0000 	rsb	r0, fp, #0
 80052fe:	ec47 6b10 	vmov	d0, r6, r7
 8005302:	f000 f951 	bl	80055a8 <scalbn>
 8005306:	ec55 4b10 	vmov	r4, r5, d0
 800530a:	4b9d      	ldr	r3, [pc, #628]	@ (8005580 <__kernel_rem_pio2+0x688>)
 800530c:	2200      	movs	r2, #0
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fb fbbb 	bl	8000a8c <__aeabi_dcmpge>
 8005316:	b300      	cbz	r0, 800535a <__kernel_rem_pio2+0x462>
 8005318:	4b9a      	ldr	r3, [pc, #616]	@ (8005584 <__kernel_rem_pio2+0x68c>)
 800531a:	2200      	movs	r2, #0
 800531c:	4620      	mov	r0, r4
 800531e:	4629      	mov	r1, r5
 8005320:	f7fb f92e 	bl	8000580 <__aeabi_dmul>
 8005324:	f7fb fbc6 	bl	8000ab4 <__aeabi_d2iz>
 8005328:	4606      	mov	r6, r0
 800532a:	f7fb f8bf 	bl	80004ac <__aeabi_i2d>
 800532e:	4b94      	ldr	r3, [pc, #592]	@ (8005580 <__kernel_rem_pio2+0x688>)
 8005330:	2200      	movs	r2, #0
 8005332:	f7fb f925 	bl	8000580 <__aeabi_dmul>
 8005336:	460b      	mov	r3, r1
 8005338:	4602      	mov	r2, r0
 800533a:	4629      	mov	r1, r5
 800533c:	4620      	mov	r0, r4
 800533e:	f7fa ff67 	bl	8000210 <__aeabi_dsub>
 8005342:	f7fb fbb7 	bl	8000ab4 <__aeabi_d2iz>
 8005346:	ab0c      	add	r3, sp, #48	@ 0x30
 8005348:	f10b 0b18 	add.w	fp, fp, #24
 800534c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005350:	f108 0801 	add.w	r8, r8, #1
 8005354:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005358:	e722      	b.n	80051a0 <__kernel_rem_pio2+0x2a8>
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7fb fba9 	bl	8000ab4 <__aeabi_d2iz>
 8005362:	ab0c      	add	r3, sp, #48	@ 0x30
 8005364:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005368:	e71a      	b.n	80051a0 <__kernel_rem_pio2+0x2a8>
 800536a:	ab0c      	add	r3, sp, #48	@ 0x30
 800536c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005370:	f7fb f89c 	bl	80004ac <__aeabi_i2d>
 8005374:	4622      	mov	r2, r4
 8005376:	462b      	mov	r3, r5
 8005378:	f7fb f902 	bl	8000580 <__aeabi_dmul>
 800537c:	4652      	mov	r2, sl
 800537e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005382:	465b      	mov	r3, fp
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	f7fb f8fa 	bl	8000580 <__aeabi_dmul>
 800538c:	3e01      	subs	r6, #1
 800538e:	4604      	mov	r4, r0
 8005390:	460d      	mov	r5, r1
 8005392:	e718      	b.n	80051c6 <__kernel_rem_pio2+0x2ce>
 8005394:	9906      	ldr	r1, [sp, #24]
 8005396:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800539a:	9106      	str	r1, [sp, #24]
 800539c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80053a0:	f7fb f8ee 	bl	8000580 <__aeabi_dmul>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4650      	mov	r0, sl
 80053aa:	4659      	mov	r1, fp
 80053ac:	f7fa ff32 	bl	8000214 <__adddf3>
 80053b0:	3601      	adds	r6, #1
 80053b2:	4682      	mov	sl, r0
 80053b4:	468b      	mov	fp, r1
 80053b6:	9b00      	ldr	r3, [sp, #0]
 80053b8:	429e      	cmp	r6, r3
 80053ba:	dc01      	bgt.n	80053c0 <__kernel_rem_pio2+0x4c8>
 80053bc:	42b5      	cmp	r5, r6
 80053be:	dae9      	bge.n	8005394 <__kernel_rem_pio2+0x49c>
 80053c0:	ab48      	add	r3, sp, #288	@ 0x120
 80053c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80053c6:	e9c5 ab00 	strd	sl, fp, [r5]
 80053ca:	3c01      	subs	r4, #1
 80053cc:	e6ff      	b.n	80051ce <__kernel_rem_pio2+0x2d6>
 80053ce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	dc0b      	bgt.n	80053ec <__kernel_rem_pio2+0x4f4>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dc39      	bgt.n	800544c <__kernel_rem_pio2+0x554>
 80053d8:	d05d      	beq.n	8005496 <__kernel_rem_pio2+0x59e>
 80053da:	9b02      	ldr	r3, [sp, #8]
 80053dc:	f003 0007 	and.w	r0, r3, #7
 80053e0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80053e4:	ecbd 8b02 	vpop	{d8}
 80053e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d1f3      	bne.n	80053da <__kernel_rem_pio2+0x4e2>
 80053f2:	9b05      	ldr	r3, [sp, #20]
 80053f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80053f8:	eb0d 0403 	add.w	r4, sp, r3
 80053fc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005400:	4625      	mov	r5, r4
 8005402:	46c2      	mov	sl, r8
 8005404:	f1ba 0f00 	cmp.w	sl, #0
 8005408:	f1a5 0508 	sub.w	r5, r5, #8
 800540c:	dc6b      	bgt.n	80054e6 <__kernel_rem_pio2+0x5ee>
 800540e:	4645      	mov	r5, r8
 8005410:	2d01      	cmp	r5, #1
 8005412:	f1a4 0408 	sub.w	r4, r4, #8
 8005416:	f300 8087 	bgt.w	8005528 <__kernel_rem_pio2+0x630>
 800541a:	9c05      	ldr	r4, [sp, #20]
 800541c:	ab48      	add	r3, sp, #288	@ 0x120
 800541e:	441c      	add	r4, r3
 8005420:	2000      	movs	r0, #0
 8005422:	2100      	movs	r1, #0
 8005424:	f1b8 0f01 	cmp.w	r8, #1
 8005428:	f300 809c 	bgt.w	8005564 <__kernel_rem_pio2+0x66c>
 800542c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005430:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005434:	f1b9 0f00 	cmp.w	r9, #0
 8005438:	f040 80a6 	bne.w	8005588 <__kernel_rem_pio2+0x690>
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	e9c3 7800 	strd	r7, r8, [r3]
 8005442:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005446:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800544a:	e7c6      	b.n	80053da <__kernel_rem_pio2+0x4e2>
 800544c:	9d05      	ldr	r5, [sp, #20]
 800544e:	ab48      	add	r3, sp, #288	@ 0x120
 8005450:	441d      	add	r5, r3
 8005452:	4644      	mov	r4, r8
 8005454:	2000      	movs	r0, #0
 8005456:	2100      	movs	r1, #0
 8005458:	2c00      	cmp	r4, #0
 800545a:	da35      	bge.n	80054c8 <__kernel_rem_pio2+0x5d0>
 800545c:	f1b9 0f00 	cmp.w	r9, #0
 8005460:	d038      	beq.n	80054d4 <__kernel_rem_pio2+0x5dc>
 8005462:	4602      	mov	r2, r0
 8005464:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005468:	9c04      	ldr	r4, [sp, #16]
 800546a:	e9c4 2300 	strd	r2, r3, [r4]
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005476:	f7fa fecb 	bl	8000210 <__aeabi_dsub>
 800547a:	ad4a      	add	r5, sp, #296	@ 0x128
 800547c:	2401      	movs	r4, #1
 800547e:	45a0      	cmp	r8, r4
 8005480:	da2b      	bge.n	80054da <__kernel_rem_pio2+0x5e2>
 8005482:	f1b9 0f00 	cmp.w	r9, #0
 8005486:	d002      	beq.n	800548e <__kernel_rem_pio2+0x596>
 8005488:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800548c:	4619      	mov	r1, r3
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005494:	e7a1      	b.n	80053da <__kernel_rem_pio2+0x4e2>
 8005496:	9c05      	ldr	r4, [sp, #20]
 8005498:	ab48      	add	r3, sp, #288	@ 0x120
 800549a:	441c      	add	r4, r3
 800549c:	2000      	movs	r0, #0
 800549e:	2100      	movs	r1, #0
 80054a0:	f1b8 0f00 	cmp.w	r8, #0
 80054a4:	da09      	bge.n	80054ba <__kernel_rem_pio2+0x5c2>
 80054a6:	f1b9 0f00 	cmp.w	r9, #0
 80054aa:	d002      	beq.n	80054b2 <__kernel_rem_pio2+0x5ba>
 80054ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80054b0:	4619      	mov	r1, r3
 80054b2:	9b04      	ldr	r3, [sp, #16]
 80054b4:	e9c3 0100 	strd	r0, r1, [r3]
 80054b8:	e78f      	b.n	80053da <__kernel_rem_pio2+0x4e2>
 80054ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80054be:	f7fa fea9 	bl	8000214 <__adddf3>
 80054c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80054c6:	e7eb      	b.n	80054a0 <__kernel_rem_pio2+0x5a8>
 80054c8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80054cc:	f7fa fea2 	bl	8000214 <__adddf3>
 80054d0:	3c01      	subs	r4, #1
 80054d2:	e7c1      	b.n	8005458 <__kernel_rem_pio2+0x560>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e7c6      	b.n	8005468 <__kernel_rem_pio2+0x570>
 80054da:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80054de:	f7fa fe99 	bl	8000214 <__adddf3>
 80054e2:	3401      	adds	r4, #1
 80054e4:	e7cb      	b.n	800547e <__kernel_rem_pio2+0x586>
 80054e6:	ed95 7b00 	vldr	d7, [r5]
 80054ea:	ed8d 7b00 	vstr	d7, [sp]
 80054ee:	ed95 7b02 	vldr	d7, [r5, #8]
 80054f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054f6:	ec53 2b17 	vmov	r2, r3, d7
 80054fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80054fe:	f7fa fe89 	bl	8000214 <__adddf3>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4606      	mov	r6, r0
 8005508:	460f      	mov	r7, r1
 800550a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800550e:	f7fa fe7f 	bl	8000210 <__aeabi_dsub>
 8005512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005516:	f7fa fe7d 	bl	8000214 <__adddf3>
 800551a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800551e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005522:	e9c5 6700 	strd	r6, r7, [r5]
 8005526:	e76d      	b.n	8005404 <__kernel_rem_pio2+0x50c>
 8005528:	ed94 7b00 	vldr	d7, [r4]
 800552c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005530:	ec51 0b17 	vmov	r0, r1, d7
 8005534:	4652      	mov	r2, sl
 8005536:	465b      	mov	r3, fp
 8005538:	ed8d 7b00 	vstr	d7, [sp]
 800553c:	f7fa fe6a 	bl	8000214 <__adddf3>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4606      	mov	r6, r0
 8005546:	460f      	mov	r7, r1
 8005548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800554c:	f7fa fe60 	bl	8000210 <__aeabi_dsub>
 8005550:	4652      	mov	r2, sl
 8005552:	465b      	mov	r3, fp
 8005554:	f7fa fe5e 	bl	8000214 <__adddf3>
 8005558:	3d01      	subs	r5, #1
 800555a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800555e:	e9c4 6700 	strd	r6, r7, [r4]
 8005562:	e755      	b.n	8005410 <__kernel_rem_pio2+0x518>
 8005564:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005568:	f7fa fe54 	bl	8000214 <__adddf3>
 800556c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005570:	e758      	b.n	8005424 <__kernel_rem_pio2+0x52c>
 8005572:	bf00      	nop
 8005574:	f3af 8000 	nop.w
	...
 8005580:	41700000 	.word	0x41700000
 8005584:	3e700000 	.word	0x3e700000
 8005588:	9b04      	ldr	r3, [sp, #16]
 800558a:	9a04      	ldr	r2, [sp, #16]
 800558c:	601f      	str	r7, [r3, #0]
 800558e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005592:	605c      	str	r4, [r3, #4]
 8005594:	609d      	str	r5, [r3, #8]
 8005596:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800559a:	60d3      	str	r3, [r2, #12]
 800559c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055a0:	6110      	str	r0, [r2, #16]
 80055a2:	6153      	str	r3, [r2, #20]
 80055a4:	e719      	b.n	80053da <__kernel_rem_pio2+0x4e2>
 80055a6:	bf00      	nop

080055a8 <scalbn>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	ec55 4b10 	vmov	r4, r5, d0
 80055ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80055b2:	4606      	mov	r6, r0
 80055b4:	462b      	mov	r3, r5
 80055b6:	b991      	cbnz	r1, 80055de <scalbn+0x36>
 80055b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80055bc:	4323      	orrs	r3, r4
 80055be:	d03d      	beq.n	800563c <scalbn+0x94>
 80055c0:	4b35      	ldr	r3, [pc, #212]	@ (8005698 <scalbn+0xf0>)
 80055c2:	4620      	mov	r0, r4
 80055c4:	4629      	mov	r1, r5
 80055c6:	2200      	movs	r2, #0
 80055c8:	f7fa ffda 	bl	8000580 <__aeabi_dmul>
 80055cc:	4b33      	ldr	r3, [pc, #204]	@ (800569c <scalbn+0xf4>)
 80055ce:	429e      	cmp	r6, r3
 80055d0:	4604      	mov	r4, r0
 80055d2:	460d      	mov	r5, r1
 80055d4:	da0f      	bge.n	80055f6 <scalbn+0x4e>
 80055d6:	a328      	add	r3, pc, #160	@ (adr r3, 8005678 <scalbn+0xd0>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	e01e      	b.n	800561c <scalbn+0x74>
 80055de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80055e2:	4291      	cmp	r1, r2
 80055e4:	d10b      	bne.n	80055fe <scalbn+0x56>
 80055e6:	4622      	mov	r2, r4
 80055e8:	4620      	mov	r0, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	f7fa fe12 	bl	8000214 <__adddf3>
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	e022      	b.n	800563c <scalbn+0x94>
 80055f6:	460b      	mov	r3, r1
 80055f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80055fc:	3936      	subs	r1, #54	@ 0x36
 80055fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005602:	4296      	cmp	r6, r2
 8005604:	dd0d      	ble.n	8005622 <scalbn+0x7a>
 8005606:	2d00      	cmp	r5, #0
 8005608:	a11d      	add	r1, pc, #116	@ (adr r1, 8005680 <scalbn+0xd8>)
 800560a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800560e:	da02      	bge.n	8005616 <scalbn+0x6e>
 8005610:	a11d      	add	r1, pc, #116	@ (adr r1, 8005688 <scalbn+0xe0>)
 8005612:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005616:	a31a      	add	r3, pc, #104	@ (adr r3, 8005680 <scalbn+0xd8>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f7fa ffb0 	bl	8000580 <__aeabi_dmul>
 8005620:	e7e6      	b.n	80055f0 <scalbn+0x48>
 8005622:	1872      	adds	r2, r6, r1
 8005624:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005628:	428a      	cmp	r2, r1
 800562a:	dcec      	bgt.n	8005606 <scalbn+0x5e>
 800562c:	2a00      	cmp	r2, #0
 800562e:	dd08      	ble.n	8005642 <scalbn+0x9a>
 8005630:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005634:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005638:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800563c:	ec45 4b10 	vmov	d0, r4, r5
 8005640:	bd70      	pop	{r4, r5, r6, pc}
 8005642:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005646:	da08      	bge.n	800565a <scalbn+0xb2>
 8005648:	2d00      	cmp	r5, #0
 800564a:	a10b      	add	r1, pc, #44	@ (adr r1, 8005678 <scalbn+0xd0>)
 800564c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005650:	dac1      	bge.n	80055d6 <scalbn+0x2e>
 8005652:	a10f      	add	r1, pc, #60	@ (adr r1, 8005690 <scalbn+0xe8>)
 8005654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005658:	e7bd      	b.n	80055d6 <scalbn+0x2e>
 800565a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800565e:	3236      	adds	r2, #54	@ 0x36
 8005660:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005664:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005668:	4620      	mov	r0, r4
 800566a:	4b0d      	ldr	r3, [pc, #52]	@ (80056a0 <scalbn+0xf8>)
 800566c:	4629      	mov	r1, r5
 800566e:	2200      	movs	r2, #0
 8005670:	e7d4      	b.n	800561c <scalbn+0x74>
 8005672:	bf00      	nop
 8005674:	f3af 8000 	nop.w
 8005678:	c2f8f359 	.word	0xc2f8f359
 800567c:	01a56e1f 	.word	0x01a56e1f
 8005680:	8800759c 	.word	0x8800759c
 8005684:	7e37e43c 	.word	0x7e37e43c
 8005688:	8800759c 	.word	0x8800759c
 800568c:	fe37e43c 	.word	0xfe37e43c
 8005690:	c2f8f359 	.word	0xc2f8f359
 8005694:	81a56e1f 	.word	0x81a56e1f
 8005698:	43500000 	.word	0x43500000
 800569c:	ffff3cb0 	.word	0xffff3cb0
 80056a0:	3c900000 	.word	0x3c900000
 80056a4:	00000000 	.word	0x00000000

080056a8 <floor>:
 80056a8:	ec51 0b10 	vmov	r0, r1, d0
 80056ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80056b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80056b8:	2e13      	cmp	r6, #19
 80056ba:	460c      	mov	r4, r1
 80056bc:	4605      	mov	r5, r0
 80056be:	4680      	mov	r8, r0
 80056c0:	dc34      	bgt.n	800572c <floor+0x84>
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	da17      	bge.n	80056f6 <floor+0x4e>
 80056c6:	a332      	add	r3, pc, #200	@ (adr r3, 8005790 <floor+0xe8>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fa fda2 	bl	8000214 <__adddf3>
 80056d0:	2200      	movs	r2, #0
 80056d2:	2300      	movs	r3, #0
 80056d4:	f7fb f9e4 	bl	8000aa0 <__aeabi_dcmpgt>
 80056d8:	b150      	cbz	r0, 80056f0 <floor+0x48>
 80056da:	2c00      	cmp	r4, #0
 80056dc:	da55      	bge.n	800578a <floor+0xe2>
 80056de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80056e2:	432c      	orrs	r4, r5
 80056e4:	2500      	movs	r5, #0
 80056e6:	42ac      	cmp	r4, r5
 80056e8:	4c2b      	ldr	r4, [pc, #172]	@ (8005798 <floor+0xf0>)
 80056ea:	bf08      	it	eq
 80056ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80056f0:	4621      	mov	r1, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	e023      	b.n	800573e <floor+0x96>
 80056f6:	4f29      	ldr	r7, [pc, #164]	@ (800579c <floor+0xf4>)
 80056f8:	4137      	asrs	r7, r6
 80056fa:	ea01 0307 	and.w	r3, r1, r7
 80056fe:	4303      	orrs	r3, r0
 8005700:	d01d      	beq.n	800573e <floor+0x96>
 8005702:	a323      	add	r3, pc, #140	@ (adr r3, 8005790 <floor+0xe8>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f7fa fd84 	bl	8000214 <__adddf3>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	f7fb f9c6 	bl	8000aa0 <__aeabi_dcmpgt>
 8005714:	2800      	cmp	r0, #0
 8005716:	d0eb      	beq.n	80056f0 <floor+0x48>
 8005718:	2c00      	cmp	r4, #0
 800571a:	bfbe      	ittt	lt
 800571c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005720:	4133      	asrlt	r3, r6
 8005722:	18e4      	addlt	r4, r4, r3
 8005724:	ea24 0407 	bic.w	r4, r4, r7
 8005728:	2500      	movs	r5, #0
 800572a:	e7e1      	b.n	80056f0 <floor+0x48>
 800572c:	2e33      	cmp	r6, #51	@ 0x33
 800572e:	dd0a      	ble.n	8005746 <floor+0x9e>
 8005730:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005734:	d103      	bne.n	800573e <floor+0x96>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	f7fa fd6b 	bl	8000214 <__adddf3>
 800573e:	ec41 0b10 	vmov	d0, r0, r1
 8005742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005746:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800574a:	f04f 37ff 	mov.w	r7, #4294967295
 800574e:	40df      	lsrs	r7, r3
 8005750:	4207      	tst	r7, r0
 8005752:	d0f4      	beq.n	800573e <floor+0x96>
 8005754:	a30e      	add	r3, pc, #56	@ (adr r3, 8005790 <floor+0xe8>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa fd5b 	bl	8000214 <__adddf3>
 800575e:	2200      	movs	r2, #0
 8005760:	2300      	movs	r3, #0
 8005762:	f7fb f99d 	bl	8000aa0 <__aeabi_dcmpgt>
 8005766:	2800      	cmp	r0, #0
 8005768:	d0c2      	beq.n	80056f0 <floor+0x48>
 800576a:	2c00      	cmp	r4, #0
 800576c:	da0a      	bge.n	8005784 <floor+0xdc>
 800576e:	2e14      	cmp	r6, #20
 8005770:	d101      	bne.n	8005776 <floor+0xce>
 8005772:	3401      	adds	r4, #1
 8005774:	e006      	b.n	8005784 <floor+0xdc>
 8005776:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800577a:	2301      	movs	r3, #1
 800577c:	40b3      	lsls	r3, r6
 800577e:	441d      	add	r5, r3
 8005780:	4545      	cmp	r5, r8
 8005782:	d3f6      	bcc.n	8005772 <floor+0xca>
 8005784:	ea25 0507 	bic.w	r5, r5, r7
 8005788:	e7b2      	b.n	80056f0 <floor+0x48>
 800578a:	2500      	movs	r5, #0
 800578c:	462c      	mov	r4, r5
 800578e:	e7af      	b.n	80056f0 <floor+0x48>
 8005790:	8800759c 	.word	0x8800759c
 8005794:	7e37e43c 	.word	0x7e37e43c
 8005798:	bff00000 	.word	0xbff00000
 800579c:	000fffff 	.word	0x000fffff

080057a0 <_init>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	bf00      	nop
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr

080057ac <_fini>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr
