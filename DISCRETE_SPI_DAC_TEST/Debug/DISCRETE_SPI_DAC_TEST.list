
DISCRETE_SPI_DAC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08007078  08007078  00008078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007350  08007350  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007350  08007350  00008350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007358  08007358  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007358  08007358  00008358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800735c  0800735c  0000835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007360  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000006c  080073cc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080073cc  00009528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010150  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ce  00000000  00000000  000191ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c49  00000000  00000000  0001c778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234dc  00000000  00000000  0001d3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e39  00000000  00000000  0004089d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5164  00000000  00000000  000536d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012883a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  00128880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012d7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800705c 	.word	0x0800705c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800705c 	.word	0x0800705c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b96a 	b.w	8000ed8 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	460c      	mov	r4, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14e      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c28:	4694      	mov	ip, r2
 8000c2a:	458c      	cmp	ip, r1
 8000c2c:	4686      	mov	lr, r0
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	d962      	bls.n	8000cfa <__udivmoddi4+0xde>
 8000c34:	b14a      	cbz	r2, 8000c4a <__udivmoddi4+0x2e>
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	4319      	orrs	r1, r3
 8000c46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4e:	fa1f f68c 	uxth.w	r6, ip
 8000c52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb04 f106 	mul.w	r1, r4, r6
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c72:	f080 8112 	bcs.w	8000e9a <__udivmoddi4+0x27e>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 810f 	bls.w	8000e9a <__udivmoddi4+0x27e>
 8000c7c:	3c02      	subs	r4, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	fa1f f38e 	uxth.w	r3, lr
 8000c86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	fb00 f606 	mul.w	r6, r0, r6
 8000c96:	429e      	cmp	r6, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x94>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca2:	f080 80fc 	bcs.w	8000e9e <__udivmoddi4+0x282>
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	f240 80f9 	bls.w	8000e9e <__udivmoddi4+0x282>
 8000cac:	4463      	add	r3, ip
 8000cae:	3802      	subs	r0, #2
 8000cb0:	1b9b      	subs	r3, r3, r6
 8000cb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	b11d      	cbz	r5, 8000cc2 <__udivmoddi4+0xa6>
 8000cba:	40d3      	lsrs	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d905      	bls.n	8000cd6 <__udivmoddi4+0xba>
 8000cca:	b10d      	cbz	r5, 8000cd0 <__udivmoddi4+0xb4>
 8000ccc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e7f5      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d146      	bne.n	8000d6c <__udivmoddi4+0x150>
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xcc>
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	f0c0 80f0 	bcc.w	8000ec8 <__udivmoddi4+0x2ac>
 8000ce8:	1a86      	subs	r6, r0, r2
 8000cea:	eb64 0303 	sbc.w	r3, r4, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d0e6      	beq.n	8000cc2 <__udivmoddi4+0xa6>
 8000cf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf8:	e7e3      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x204>
 8000d00:	eba1 040c 	sub.w	r4, r1, ip
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa1f f78c 	uxth.w	r7, ip
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	fb07 f006 	mul.w	r0, r7, r6
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x11c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x11a>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	f200 80cd 	bhi.w	8000ed0 <__udivmoddi4+0x2b4>
 8000d36:	4626      	mov	r6, r4
 8000d38:	1a1c      	subs	r4, r3, r0
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d42:	fb08 4410 	mls	r4, r8, r0, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb00 f707 	mul.w	r7, r0, r7
 8000d4e:	429f      	cmp	r7, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x148>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x146>
 8000d5c:	429f      	cmp	r7, r3
 8000d5e:	f200 80b0 	bhi.w	8000ec2 <__udivmoddi4+0x2a6>
 8000d62:	4620      	mov	r0, r4
 8000d64:	1bdb      	subs	r3, r3, r7
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0x9c>
 8000d6c:	f1c1 0620 	rsb	r6, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 f706 	lsr.w	r7, r2, r6
 8000d76:	431f      	orrs	r7, r3
 8000d78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	40f4      	lsrs	r4, r6
 8000d86:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8a:	0c38      	lsrs	r0, r7, #16
 8000d8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d90:	fbb4 fef0 	udiv	lr, r4, r0
 8000d94:	fa1f fc87 	uxth.w	ip, r7
 8000d98:	fb00 441e 	mls	r4, r0, lr, r4
 8000d9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da0:	fb0e f90c 	mul.w	r9, lr, ip
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	d90a      	bls.n	8000dc2 <__udivmoddi4+0x1a6>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000db2:	f080 8084 	bcs.w	8000ebe <__udivmoddi4+0x2a2>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f240 8081 	bls.w	8000ebe <__udivmoddi4+0x2a2>
 8000dbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	eba4 0409 	sub.w	r4, r4, r9
 8000dc6:	fa1f f983 	uxth.w	r9, r3
 8000dca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dce:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1d2>
 8000dde:	193c      	adds	r4, r7, r4
 8000de0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de4:	d267      	bcs.n	8000eb6 <__udivmoddi4+0x29a>
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0x29a>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df2:	fba0 9302 	umull	r9, r3, r0, r2
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	46ce      	mov	lr, r9
 8000dfe:	469c      	mov	ip, r3
 8000e00:	d351      	bcc.n	8000ea6 <__udivmoddi4+0x28a>
 8000e02:	d04e      	beq.n	8000ea2 <__udivmoddi4+0x286>
 8000e04:	b155      	cbz	r5, 8000e1c <__udivmoddi4+0x200>
 8000e06:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e12:	40cb      	lsrs	r3, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e750      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f103 	lsr.w	r1, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e30:	4094      	lsls	r4, r2
 8000e32:	430c      	orrs	r4, r1
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e3c:	fa1f f78c 	uxth.w	r7, ip
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3110 	mls	r1, r8, r0, r3
 8000e48:	0c23      	lsrs	r3, r4, #16
 8000e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4e:	fb00 f107 	mul.w	r1, r0, r7
 8000e52:	4299      	cmp	r1, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x24c>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5e:	d22c      	bcs.n	8000eba <__udivmoddi4+0x29e>
 8000e60:	4299      	cmp	r1, r3
 8000e62:	d92a      	bls.n	8000eba <__udivmoddi4+0x29e>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e70:	fb08 3311 	mls	r3, r8, r1, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb01 f307 	mul.w	r3, r1, r7
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x276>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e88:	d213      	bcs.n	8000eb2 <__udivmoddi4+0x296>
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	d911      	bls.n	8000eb2 <__udivmoddi4+0x296>
 8000e8e:	3902      	subs	r1, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	1ae4      	subs	r4, r4, r3
 8000e94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e98:	e739      	b.n	8000d0e <__udivmoddi4+0xf2>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	e6f0      	b.n	8000c80 <__udivmoddi4+0x64>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e706      	b.n	8000cb0 <__udivmoddi4+0x94>
 8000ea2:	45c8      	cmp	r8, r9
 8000ea4:	d2ae      	bcs.n	8000e04 <__udivmoddi4+0x1e8>
 8000ea6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eaa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eae:	3801      	subs	r0, #1
 8000eb0:	e7a8      	b.n	8000e04 <__udivmoddi4+0x1e8>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	e7ed      	b.n	8000e92 <__udivmoddi4+0x276>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e799      	b.n	8000dee <__udivmoddi4+0x1d2>
 8000eba:	4630      	mov	r0, r6
 8000ebc:	e7d4      	b.n	8000e68 <__udivmoddi4+0x24c>
 8000ebe:	46d6      	mov	lr, sl
 8000ec0:	e77f      	b.n	8000dc2 <__udivmoddi4+0x1a6>
 8000ec2:	4463      	add	r3, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e74d      	b.n	8000d64 <__udivmoddi4+0x148>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	4623      	mov	r3, r4
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e70f      	b.n	8000cf0 <__udivmoddi4+0xd4>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	e730      	b.n	8000d38 <__udivmoddi4+0x11c>
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <__io_putchar+0x20>)
 8000eee:	f003 fceb 	bl	80048c8 <HAL_UART_Transmit>
  return ch;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000188 	.word	0x20000188

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 ff29 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f861 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 f9f5 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f12:	f000 f9d3 	bl	80012bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f16:	f000 f9a7 	bl	8001268 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f903 	bl	8001124 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000f1e:	f000 f8cb 	bl	80010b8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for (uint32_t i = 0; i< 256;i++){
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	e009      	b.n	8000f3c <main+0x3c>
    DAC_data[i] = i;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	b2d9      	uxtb	r1, r3
 8000f2c:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <main+0xb0>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	460a      	mov	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i< 256;i++){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2bff      	cmp	r3, #255	@ 0xff
 8000f40:	d9f2      	bls.n	8000f28 <main+0x28>

  }
  for (uint32_t i = 0; i<256;i++){
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	e00a      	b.n	8000f5e <main+0x5e>
    DAC_data[i+255] = (uint8_t)255-i;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	33ff      	adds	r3, #255	@ 0xff
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	b2d1      	uxtb	r1, r2
 8000f54:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <main+0xb0>)
 8000f56:	54d1      	strb	r1, [r2, r3]
  for (uint32_t i = 0; i<256;i++){
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2bff      	cmp	r3, #255	@ 0xff
 8000f62:	d9f1      	bls.n	8000f48 <main+0x48>
    }
*/


  /// SPI DMA
  __HAL_SPI_ENABLE(&hspi2);
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <main+0xb4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <main+0xb4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f72:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 8000f74:	490e      	ldr	r1, [pc, #56]	@ (8000fb0 <main+0xb0>)
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <main+0xb8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a10      	ldr	r2, [pc, #64]	@ (8000fbc <main+0xbc>)
 8000f7c:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <main+0xc0>)
 8000f7e:	f001 f943 	bl	8002208 <HAL_DMA_Start>
  TIM1->DIER |= TIM_DIER_UDE;
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <main+0xc4>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc4 <main+0xc4>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8c:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start(&htim1);
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <main+0xc8>)
 8000f90:	f002 fd4c 	bl	8003a2c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f94:	2100      	movs	r1, #0
 8000f96:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <main+0xc8>)
 8000f98:	f002 fe0a 	bl	8003bb0 <HAL_TIM_PWM_Start>
	  //for (uint32_t i = 0; i< 256;i++){
		//  HAL_SPI_Transmit(&hspi2,  &DAC_data[i], 1, HAL_MAX_DELAY);
		//  HAL_Delay(100);
	  //}
	 //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, );
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <main+0xcc>)
 8000fa0:	f001 fdf5 	bl	8002b8e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000fa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa8:	f000 ff4a 	bl	8001e40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fac:	bf00      	nop
 8000fae:	e7f5      	b.n	8000f9c <main+0x9c>
 8000fb0:	200001d0 	.word	0x200001d0
 8000fb4:	20000088 	.word	0x20000088
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	4000380c 	.word	0x4000380c
 8000fc0:	20000128 	.word	0x20000128
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	200000e0 	.word	0x200000e0
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	@ 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2234      	movs	r2, #52	@ 0x34
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 f9a1 	bl	8006326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <SystemClock_Config+0xe0>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80010b0 <SystemClock_Config+0xe0>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	@ 0x40
 8001004:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <SystemClock_Config+0xe0>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <SystemClock_Config+0xe4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a26      	ldr	r2, [pc, #152]	@ (80010b4 <SystemClock_Config+0xe4>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <SystemClock_Config+0xe4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001034:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800103e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001044:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001048:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4618      	mov	r0, r3
 800105c:	f002 f970 	bl	8003340 <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001066:	f000 f9b1 	bl	80013cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800106a:	f001 fdcf 	bl	8002c0c <HAL_PWREx_EnableOverDrive>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001074:	f000 f9aa 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001084:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	2105      	movs	r1, #5
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fe08 	bl	8002cac <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80010a2:	f000 f993 	bl	80013cc <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	@ 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_SPI2_Init+0x64>)
 80010be:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <MX_SPI2_Init+0x64>)
 80010c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_SPI2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_SPI2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_SPI2_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_SPI2_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_SPI2_Init+0x64>)
 80010e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_SPI2_Init+0x64>)
 80010ec:	2220      	movs	r2, #32
 80010ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_SPI2_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_SPI2_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <MX_SPI2_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_SPI2_Init+0x64>)
 8001104:	220a      	movs	r2, #10
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <MX_SPI2_Init+0x64>)
 800110a:	f002 fbb7 	bl	800387c <HAL_SPI_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001114:	f000 f95a 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000088 	.word	0x20000088
 8001120:	40003800 	.word	0x40003800

08001124 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b096      	sub	sp, #88	@ 0x58
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f005 f8e2 	bl	8006326 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001162:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001164:	4a3f      	ldr	r2, [pc, #252]	@ (8001264 <MX_TIM1_Init+0x140>)
 8001166:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001168:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <MX_TIM1_Init+0x13c>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = timer_period;
 8001174:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800117a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <MX_TIM1_Init+0x13c>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001182:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <MX_TIM1_Init+0x13c>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118e:	4834      	ldr	r0, [pc, #208]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001190:	f002 fbfd 	bl	800398e <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800119a:	f000 f917 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011a8:	4619      	mov	r1, r3
 80011aa:	482d      	ldr	r0, [pc, #180]	@ (8001260 <MX_TIM1_Init+0x13c>)
 80011ac:	f002 fe8a 	bl	8003ec4 <HAL_TIM_ConfigClockSource>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011b6:	f000 f909 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ba:	4829      	ldr	r0, [pc, #164]	@ (8001260 <MX_TIM1_Init+0x13c>)
 80011bc:	f002 fc9e 	bl	8003afc <HAL_TIM_PWM_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011c6:	f000 f901 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011d6:	4619      	mov	r1, r3
 80011d8:	4821      	ldr	r0, [pc, #132]	@ (8001260 <MX_TIM1_Init+0x13c>)
 80011da:	f003 fa57 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011e4:	f000 f8f2 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e8:	2360      	movs	r3, #96	@ 0x60
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1100;
 80011ec:	f240 434c 	movw	r3, #1100	@ 0x44c
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80011fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001202:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	4813      	ldr	r0, [pc, #76]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001212:	f002 fd95 	bl	8003d40 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800121c:	f000 f8d6 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001238:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001244:	f003 fa9e 	bl	8004784 <HAL_TIMEx_ConfigBreakDeadTime>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800124e:	f000 f8bd 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001252:	4803      	ldr	r0, [pc, #12]	@ (8001260 <MX_TIM1_Init+0x13c>)
 8001254:	f000 f992 	bl	800157c <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3758      	adds	r7, #88	@ 0x58
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000e0 	.word	0x200000e0
 8001264:	40010000 	.word	0x40010000

08001268 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <MX_USART2_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f003 fac2 	bl	8004828 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f000 f88f 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000188 	.word	0x20000188
 80012b8:	40004400 	.word	0x40004400

080012bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_DMA_Init+0x3c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <MX_DMA_Init+0x3c>)
 80012cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_DMA_Init+0x3c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2044      	movs	r0, #68	@ 0x44
 80012e4:	f000 feab 	bl	800203e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80012e8:	2044      	movs	r0, #68	@ 0x44
 80012ea:	f000 fec4 	bl	8002076 <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a22      	ldr	r2, [pc, #136]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a1b      	ldr	r2, [pc, #108]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_GPIO_Init+0xc4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2120      	movs	r1, #32
 800136a:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_GPIO_Init+0xc8>)
 800136c:	f001 fbf6 	bl	8002b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001376:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4810      	ldr	r0, [pc, #64]	@ (80013c8 <MX_GPIO_Init+0xcc>)
 8001388:	f001 fa54 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800138c:	2320      	movs	r3, #32
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <MX_GPIO_Init+0xc8>)
 80013a4:	f001 fa46 	bl	8002834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2028      	movs	r0, #40	@ 0x28
 80013ae:	f000 fe46 	bl	800203e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b2:	2028      	movs	r0, #40	@ 0x28
 80013b4:	f000 fe5f 	bl	8002076 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020800 	.word	0x40020800

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <Error_Handler+0x8>

080013d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <HAL_MspInit+0x4c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_MspInit+0x4c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_MspInit+0x4c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_MspInit+0x4c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001416:	2007      	movs	r0, #7
 8001418:	f000 fe06 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800

08001428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a21      	ldr	r2, [pc, #132]	@ (80014cc <HAL_SPI_MspInit+0xa4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d13b      	bne.n	80014c2 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <HAL_SPI_MspInit+0xa8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a1f      	ldr	r2, [pc, #124]	@ (80014d0 <HAL_SPI_MspInit+0xa8>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <HAL_SPI_MspInit+0xa8>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_SPI_MspInit+0xa8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <HAL_SPI_MspInit+0xa8>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_SPI_MspInit+0xa8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001482:	2302      	movs	r3, #2
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001492:	2307      	movs	r3, #7
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <HAL_SPI_MspInit+0xac>)
 800149e:	f001 f9c9 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b2:	2305      	movs	r3, #5
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <HAL_SPI_MspInit+0xac>)
 80014be:	f001 f9b9 	bl	8002834 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40003800 	.word	0x40003800
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020800 	.word	0x40020800

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a21      	ldr	r2, [pc, #132]	@ (800156c <HAL_TIM_Base_MspInit+0x94>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d13c      	bne.n	8001564 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <HAL_TIM_Base_MspInit+0x98>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001570 <HAL_TIM_Base_MspInit+0x98>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <HAL_TIM_Base_MspInit+0x98>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 8001508:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <HAL_TIM_Base_MspInit+0xa0>)
 800150a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 800150c:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 800150e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001512:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001514:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 8001516:	2240      	movs	r2, #64	@ 0x40
 8001518:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 8001522:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001526:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 8001536:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800153a:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 800153c:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001548:	480a      	ldr	r0, [pc, #40]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 800154a:	f000 fdaf 	bl	80020ac <HAL_DMA_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001554:	f7ff ff3a 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <HAL_TIM_Base_MspInit+0x9c>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010000 	.word	0x40010000
 8001570:	40023800 	.word	0x40023800
 8001574:	20000128 	.word	0x20000128
 8001578:	40026488 	.word	0x40026488

0800157c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <HAL_TIM_MspPostInit+0x68>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d11e      	bne.n	80015dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <HAL_TIM_MspPostInit+0x70>)
 80015d8:	f001 f92c 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <HAL_UART_MspInit+0x84>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12b      	bne.n	800166a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_UART_MspInit+0x88>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800164a:	230c      	movs	r3, #12
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165a:	2307      	movs	r3, #7
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	@ (800167c <HAL_UART_MspInit+0x8c>)
 8001666:	f001 f8e5 	bl	8002834 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 fb93 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09e      	sub	sp, #120	@ 0x78
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (waveform_type==0){ // Waveform type sine
 80016e6:	4baa      	ldr	r3, [pc, #680]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d16c      	bne.n	80017c8 <EXTI15_10_IRQHandler+0xe8>
		HAL_DMA_Abort(&hdma_tim1_up);
 80016ee:	48a9      	ldr	r0, [pc, #676]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 80016f0:	f000 fdc5 	bl	800227e <HAL_DMA_Abort>
		data_len = 512;
 80016f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80016f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016fa:	601a      	str	r2, [r3, #0]
		//--- sine create
		double sin_val,x,y;
		y = data_len;
 80016fc:	4ba6      	ldr	r3, [pc, #664]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff17 	bl	8000534 <__aeabi_ui2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		for (uint32_t i = 0; i<data_len;i++){
 800170e:	2300      	movs	r3, #0
 8001710:	677b      	str	r3, [r7, #116]	@ 0x74
 8001712:	e049      	b.n	80017a8 <EXTI15_10_IRQHandler+0xc8>
		  //data[index_count] = i;
		  x = i;
 8001714:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001716:	f7fe ff0d 	bl	8000534 <__aeabi_ui2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  sin_val = (125 * sin((x / y) * 2.0 * M_PI)) + 127.0;
 8001722:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800172a:	f7ff f8a7 	bl	800087c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	f7fe fdbf 	bl	80002bc <__adddf3>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	a38e      	add	r3, pc, #568	@ (adr r3, 8001980 <EXTI15_10_IRQHandler+0x2a0>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe ff6c 	bl	8000628 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	ec43 2b17 	vmov	d7, r2, r3
 8001758:	eeb0 0a47 	vmov.f32	s0, s14
 800175c:	eef0 0a67 	vmov.f32	s1, s15
 8001760:	f003 fc6e 	bl	8005040 <sin>
 8001764:	ec51 0b10 	vmov	r0, r1, d0
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b8b      	ldr	r3, [pc, #556]	@ (800199c <EXTI15_10_IRQHandler+0x2bc>)
 800176e:	f7fe ff5b 	bl	8000628 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	a383      	add	r3, pc, #524	@ (adr r3, 8001988 <EXTI15_10_IRQHandler+0x2a8>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe fd9c 	bl	80002bc <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9c7 2300 	strd	r2, r3, [r7]
		  DAC_data[i] = (uint8_t)sin_val;
 800178c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001790:	f7ff fa0c 	bl	8000bac <__aeabi_d2uiz>
 8001794:	4603      	mov	r3, r0
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	4a81      	ldr	r2, [pc, #516]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 800179a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800179c:	4413      	add	r3, r2
 800179e:	460a      	mov	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i<data_len;i++){
 80017a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017a4:	3301      	adds	r3, #1
 80017a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80017a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3b0      	bcc.n	8001714 <EXTI15_10_IRQHandler+0x34>
		}
		//----
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 80017b2:	497b      	ldr	r1, [pc, #492]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 80017b4:	4b78      	ldr	r3, [pc, #480]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a7a      	ldr	r2, [pc, #488]	@ (80019a4 <EXTI15_10_IRQHandler+0x2c4>)
 80017ba:	4876      	ldr	r0, [pc, #472]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 80017bc:	f000 fd24 	bl	8002208 <HAL_DMA_Start>
		waveform_type = 1;
 80017c0:	4b73      	ldr	r3, [pc, #460]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e1a9      	b.n	8001b1c <EXTI15_10_IRQHandler+0x43c>
	}
	else if (waveform_type==1){ //Waveform type fast sine
 80017c8:	4b71      	ldr	r3, [pc, #452]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d16b      	bne.n	80018a8 <EXTI15_10_IRQHandler+0x1c8>
		HAL_DMA_Abort(&hdma_tim1_up);
 80017d0:	4870      	ldr	r0, [pc, #448]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 80017d2:	f000 fd54 	bl	800227e <HAL_DMA_Abort>
		data_len = 50;
 80017d6:	4b70      	ldr	r3, [pc, #448]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80017d8:	2232      	movs	r2, #50	@ 0x32
 80017da:	601a      	str	r2, [r3, #0]
		//--- fast sine create
		double sin_val,x,y;
		y = data_len;
 80017dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fea7 	bl	8000534 <__aeabi_ui2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		for (uint32_t i = 0; i<data_len;i++){
 80017ee:	2300      	movs	r3, #0
 80017f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80017f2:	e049      	b.n	8001888 <EXTI15_10_IRQHandler+0x1a8>
		  //data[index_count] = i;
		  x = i;
 80017f4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80017f6:	f7fe fe9d 	bl	8000534 <__aeabi_ui2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  sin_val = (125 * sin((x / y) * 2.0 * M_PI)) + 127.0;
 8001802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001806:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800180a:	f7ff f837 	bl	800087c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f7fe fd4f 	bl	80002bc <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	a356      	add	r3, pc, #344	@ (adr r3, 8001980 <EXTI15_10_IRQHandler+0x2a0>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fefc 	bl	8000628 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	ec43 2b17 	vmov	d7, r2, r3
 8001838:	eeb0 0a47 	vmov.f32	s0, s14
 800183c:	eef0 0a67 	vmov.f32	s1, s15
 8001840:	f003 fbfe 	bl	8005040 <sin>
 8001844:	ec51 0b10 	vmov	r0, r1, d0
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b53      	ldr	r3, [pc, #332]	@ (800199c <EXTI15_10_IRQHandler+0x2bc>)
 800184e:	f7fe feeb 	bl	8000628 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a34b      	add	r3, pc, #300	@ (adr r3, 8001988 <EXTI15_10_IRQHandler+0x2a8>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fd2c 	bl	80002bc <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  DAC_data[i] = (uint8_t)sin_val;
 800186c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001870:	f7ff f99c 	bl	8000bac <__aeabi_d2uiz>
 8001874:	4603      	mov	r3, r0
 8001876:	b2d9      	uxtb	r1, r3
 8001878:	4a49      	ldr	r2, [pc, #292]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 800187a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800187c:	4413      	add	r3, r2
 800187e:	460a      	mov	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i<data_len;i++){
 8001882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001884:	3301      	adds	r3, #1
 8001886:	673b      	str	r3, [r7, #112]	@ 0x70
 8001888:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800188e:	429a      	cmp	r2, r3
 8001890:	d3b0      	bcc.n	80017f4 <EXTI15_10_IRQHandler+0x114>
		}
		//----
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 8001892:	4943      	ldr	r1, [pc, #268]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 8001894:	4b40      	ldr	r3, [pc, #256]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a42      	ldr	r2, [pc, #264]	@ (80019a4 <EXTI15_10_IRQHandler+0x2c4>)
 800189a:	483e      	ldr	r0, [pc, #248]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 800189c:	f000 fcb4 	bl	8002208 <HAL_DMA_Start>
		waveform_type = 2;
 80018a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e139      	b.n	8001b1c <EXTI15_10_IRQHandler+0x43c>
	}
	else if (waveform_type==2){// Waveform type ramp
 80018a8:	4b39      	ldr	r3, [pc, #228]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <EXTI15_10_IRQHandler+0x218>
		HAL_DMA_Abort(&hdma_tim1_up);
 80018b0:	4838      	ldr	r0, [pc, #224]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 80018b2:	f000 fce4 	bl	800227e <HAL_DMA_Abort>
		data_len = 256;
 80018b6:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80018b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018bc:	601a      	str	r2, [r3, #0]

		for (uint32_t i = 0; i< data_len;i++){
 80018be:	2300      	movs	r3, #0
 80018c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018c2:	e009      	b.n	80018d8 <EXTI15_10_IRQHandler+0x1f8>
			DAC_data[i] = i;
 80018c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018c6:	b2d9      	uxtb	r1, r3
 80018c8:	4a35      	ldr	r2, [pc, #212]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 80018ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018cc:	4413      	add	r3, r2
 80018ce:	460a      	mov	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i< data_len;i++){
 80018d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018d4:	3301      	adds	r3, #1
 80018d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80018de:	429a      	cmp	r2, r3
 80018e0:	d3f0      	bcc.n	80018c4 <EXTI15_10_IRQHandler+0x1e4>

		}
		//----
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 80018e2:	492f      	ldr	r1, [pc, #188]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 80018e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2e      	ldr	r2, [pc, #184]	@ (80019a4 <EXTI15_10_IRQHandler+0x2c4>)
 80018ea:	482a      	ldr	r0, [pc, #168]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 80018ec:	f000 fc8c 	bl	8002208 <HAL_DMA_Start>
		waveform_type = 3;
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 80018f2:	2203      	movs	r2, #3
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e111      	b.n	8001b1c <EXTI15_10_IRQHandler+0x43c>
	}
	else if (waveform_type==3){// Waveform type fast ramp
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d131      	bne.n	8001964 <EXTI15_10_IRQHandler+0x284>
		HAL_DMA_Abort(&hdma_tim1_up);
 8001900:	4824      	ldr	r0, [pc, #144]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 8001902:	f000 fcbc 	bl	800227e <HAL_DMA_Abort>
		data_len = 50;
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 8001908:	2232      	movs	r2, #50	@ 0x32
 800190a:	601a      	str	r2, [r3, #0]
		uint32_t step = 255 / data_len ;
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	22ff      	movs	r2, #255	@ 0xff
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
		//uint32_t top = index_lim *step;
		uint8_t val_count =0;
 8001918:	2300      	movs	r3, #0
 800191a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		for (uint32_t i = 0; i< data_len;i++){
 800191e:	2300      	movs	r3, #0
 8001920:	667b      	str	r3, [r7, #100]	@ 0x64
 8001922:	e00f      	b.n	8001944 <EXTI15_10_IRQHandler+0x264>
			DAC_data[i] = val_count;
 8001924:	4a1e      	ldr	r2, [pc, #120]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 8001926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001928:	4413      	add	r3, r2
 800192a:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800192e:	701a      	strb	r2, [r3, #0]
			val_count	= val_count + step;
 8001930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001932:	b2da      	uxtb	r2, r3
 8001934:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001938:	4413      	add	r3, r2
 800193a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		for (uint32_t i = 0; i< data_len;i++){
 800193e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001940:	3301      	adds	r3, #1
 8001942:	667b      	str	r3, [r7, #100]	@ 0x64
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800194a:	429a      	cmp	r2, r3
 800194c:	d3ea      	bcc.n	8001924 <EXTI15_10_IRQHandler+0x244>
		}
		//----
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 800194e:	4914      	ldr	r1, [pc, #80]	@ (80019a0 <EXTI15_10_IRQHandler+0x2c0>)
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a13      	ldr	r2, [pc, #76]	@ (80019a4 <EXTI15_10_IRQHandler+0x2c4>)
 8001956:	480f      	ldr	r0, [pc, #60]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 8001958:	f000 fc56 	bl	8002208 <HAL_DMA_Start>
		waveform_type = 4;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 800195e:	2204      	movs	r2, #4
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e0db      	b.n	8001b1c <EXTI15_10_IRQHandler+0x43c>
	}
	else if (waveform_type==4){// Waveform type triangle
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <EXTI15_10_IRQHandler+0x2b0>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b04      	cmp	r3, #4
 800196a:	d147      	bne.n	80019fc <EXTI15_10_IRQHandler+0x31c>
		HAL_DMA_Abort(&hdma_tim1_up);
 800196c:	4809      	ldr	r0, [pc, #36]	@ (8001994 <EXTI15_10_IRQHandler+0x2b4>)
 800196e:	f000 fc86 	bl	800227e <HAL_DMA_Abort>
		data_len = 512;
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <EXTI15_10_IRQHandler+0x2b8>)
 8001974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001978:	601a      	str	r2, [r3, #0]

		for (uint32_t i = 0; i< 256;i++){
 800197a:	2300      	movs	r3, #0
 800197c:	663b      	str	r3, [r7, #96]	@ 0x60
 800197e:	e01d      	b.n	80019bc <EXTI15_10_IRQHandler+0x2dc>
 8001980:	54442d18 	.word	0x54442d18
 8001984:	400921fb 	.word	0x400921fb
 8001988:	00000000 	.word	0x00000000
 800198c:	405fc000 	.word	0x405fc000
 8001990:	200003d0 	.word	0x200003d0
 8001994:	20000128 	.word	0x20000128
 8001998:	20000000 	.word	0x20000000
 800199c:	405f4000 	.word	0x405f4000
 80019a0:	200001d0 	.word	0x200001d0
 80019a4:	4000380c 	.word	0x4000380c
			DAC_data[i] = i;
 80019a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019aa:	b2d9      	uxtb	r1, r3
 80019ac:	4a5f      	ldr	r2, [pc, #380]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 80019ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019b0:	4413      	add	r3, r2
 80019b2:	460a      	mov	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i< 256;i++){
 80019b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019b8:	3301      	adds	r3, #1
 80019ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80019bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019be:	2bff      	cmp	r3, #255	@ 0xff
 80019c0:	d9f2      	bls.n	80019a8 <EXTI15_10_IRQHandler+0x2c8>

		}
		for (uint32_t i = 0; i<256;i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019c6:	e00b      	b.n	80019e0 <EXTI15_10_IRQHandler+0x300>
			DAC_data[i+256] = (uint8_t)255-i;
 80019c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019ce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80019d2:	43d2      	mvns	r2, r2
 80019d4:	b2d1      	uxtb	r1, r2
 80019d6:	4a55      	ldr	r2, [pc, #340]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 80019d8:	54d1      	strb	r1, [r2, r3]
		for (uint32_t i = 0; i<256;i++){
 80019da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019dc:	3301      	adds	r3, #1
 80019de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019e2:	2bff      	cmp	r3, #255	@ 0xff
 80019e4:	d9f0      	bls.n	80019c8 <EXTI15_10_IRQHandler+0x2e8>
		}
		//----
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 80019e6:	4951      	ldr	r1, [pc, #324]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 80019e8:	4b51      	ldr	r3, [pc, #324]	@ (8001b30 <EXTI15_10_IRQHandler+0x450>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a51      	ldr	r2, [pc, #324]	@ (8001b34 <EXTI15_10_IRQHandler+0x454>)
 80019ee:	4852      	ldr	r0, [pc, #328]	@ (8001b38 <EXTI15_10_IRQHandler+0x458>)
 80019f0:	f000 fc0a 	bl	8002208 <HAL_DMA_Start>
		waveform_type = 5;
 80019f4:	4b51      	ldr	r3, [pc, #324]	@ (8001b3c <EXTI15_10_IRQHandler+0x45c>)
 80019f6:	2205      	movs	r2, #5
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e08f      	b.n	8001b1c <EXTI15_10_IRQHandler+0x43c>
	}
	else if (waveform_type==5){// Waveform type fast triangle
 80019fc:	4b4f      	ldr	r3, [pc, #316]	@ (8001b3c <EXTI15_10_IRQHandler+0x45c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d14b      	bne.n	8001a9c <EXTI15_10_IRQHandler+0x3bc>
		HAL_DMA_Abort(&hdma_tim1_up);
 8001a04:	484c      	ldr	r0, [pc, #304]	@ (8001b38 <EXTI15_10_IRQHandler+0x458>)
 8001a06:	f000 fc3a 	bl	800227e <HAL_DMA_Abort>
		data_len = 50;
 8001a0a:	4b49      	ldr	r3, [pc, #292]	@ (8001b30 <EXTI15_10_IRQHandler+0x450>)
 8001a0c:	2232      	movs	r2, #50	@ 0x32
 8001a0e:	601a      	str	r2, [r3, #0]
		uint32_t index_lim = data_len/2;
 8001a10:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <EXTI15_10_IRQHandler+0x450>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint32_t step = 255 / index_lim ;
 8001a18:	22ff      	movs	r2, #255	@ 0xff
 8001a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	63bb      	str	r3, [r7, #56]	@ 0x38
		//uint32_t top = index_lim *step;
		uint8_t val_count =0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		for (uint32_t i = 0; i< index_lim;i++){
 8001a28:	2300      	movs	r3, #0
 8001a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a2c:	e00f      	b.n	8001a4e <EXTI15_10_IRQHandler+0x36e>
			DAC_data[i] = val_count;
 8001a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 8001a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a32:	4413      	add	r3, r2
 8001a34:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001a38:	701a      	strb	r2, [r3, #0]
			val_count	= val_count + step;
 8001a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a42:	4413      	add	r3, r2
 8001a44:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		for (uint32_t i = 0; i< index_lim;i++){
 8001a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3eb      	bcc.n	8001a2e <EXTI15_10_IRQHandler+0x34e>
		}
		for (uint32_t i = 0; i<index_lim;i++){
 8001a56:	2300      	movs	r3, #0
 8001a58:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a5a:	e010      	b.n	8001a7e <EXTI15_10_IRQHandler+0x39e>
			DAC_data[i+index_lim] = val_count;
 8001a5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a60:	4413      	add	r3, r2
 8001a62:	4932      	ldr	r1, [pc, #200]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 8001a64:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001a68:	54ca      	strb	r2, [r1, r3]
			val_count	= val_count - step;
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		for (uint32_t i = 0; i<index_lim;i++){
 8001a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3ea      	bcc.n	8001a5c <EXTI15_10_IRQHandler+0x37c>
		}
		//----
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 8001a86:	4929      	ldr	r1, [pc, #164]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 8001a88:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <EXTI15_10_IRQHandler+0x450>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a29      	ldr	r2, [pc, #164]	@ (8001b34 <EXTI15_10_IRQHandler+0x454>)
 8001a8e:	482a      	ldr	r0, [pc, #168]	@ (8001b38 <EXTI15_10_IRQHandler+0x458>)
 8001a90:	f000 fbba 	bl	8002208 <HAL_DMA_Start>
		waveform_type = 6;
 8001a94:	4b29      	ldr	r3, [pc, #164]	@ (8001b3c <EXTI15_10_IRQHandler+0x45c>)
 8001a96:	2206      	movs	r2, #6
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	e03f      	b.n	8001b1c <EXTI15_10_IRQHandler+0x43c>
	}
	else if (waveform_type==6){// Waveform type rand
 8001a9c:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <EXTI15_10_IRQHandler+0x45c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d13b      	bne.n	8001b1c <EXTI15_10_IRQHandler+0x43c>
		HAL_DMA_Abort(&hdma_tim1_up);
 8001aa4:	4824      	ldr	r0, [pc, #144]	@ (8001b38 <EXTI15_10_IRQHandler+0x458>)
 8001aa6:	f000 fbea 	bl	800227e <HAL_DMA_Abort>
		data_len = 512;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <EXTI15_10_IRQHandler+0x450>)
 8001aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab0:	601a      	str	r2, [r3, #0]
		double rand_val ;
		//--- random
		for (uint32_t i = 0; i<data_len;i++){
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ab6:	e022      	b.n	8001afe <EXTI15_10_IRQHandler+0x41e>
		  //data[index_count] = i;
			double rand_val = (rand() % 255) ;
 8001ab8:	f004 faf2 	bl	80060a0 <rand>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <EXTI15_10_IRQHandler+0x460>)
 8001ac0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	11d9      	asrs	r1, r3, #7
 8001ac8:	17d3      	asrs	r3, r2, #31
 8001aca:	1ac9      	subs	r1, r1, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	1a5b      	subs	r3, r3, r1
 8001ad2:	1ad1      	subs	r1, r2, r3
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	f7fe fd3d 	bl	8000554 <__aeabi_i2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			DAC_data[i] = (uint8_t)rand_val;
 8001ae2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ae6:	f7ff f861 	bl	8000bac <__aeabi_d2uiz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b2d9      	uxtb	r1, r3
 8001aee:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 8001af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001af2:	4413      	add	r3, r2
 8001af4:	460a      	mov	r2, r1
 8001af6:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i<data_len;i++){
 8001af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001afa:	3301      	adds	r3, #1
 8001afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <EXTI15_10_IRQHandler+0x450>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3d7      	bcc.n	8001ab8 <EXTI15_10_IRQHandler+0x3d8>
		}
		//----
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&DAC_data[0],  (uint32_t)&(SPI2->DR), data_len);
 8001b08:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <EXTI15_10_IRQHandler+0x44c>)
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <EXTI15_10_IRQHandler+0x450>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <EXTI15_10_IRQHandler+0x454>)
 8001b10:	4809      	ldr	r0, [pc, #36]	@ (8001b38 <EXTI15_10_IRQHandler+0x458>)
 8001b12:	f000 fb79 	bl	8002208 <HAL_DMA_Start>
		waveform_type = 0;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <EXTI15_10_IRQHandler+0x45c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b20:	f001 f850 	bl	8002bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	3778      	adds	r7, #120	@ 0x78
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200001d0 	.word	0x200001d0
 8001b30:	20000000 	.word	0x20000000
 8001b34:	4000380c 	.word	0x4000380c
 8001b38:	20000128 	.word	0x20000128
 8001b3c:	200003d0 	.word	0x200003d0
 8001b40:	80808081 	.word	0x80808081

08001b44 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <DMA2_Stream5_IRQHandler+0x10>)
 8001b4a:	f000 fc09 	bl	8002360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000128 	.word	0x20000128

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b72:	f004 fc27 	bl	80063c4 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9a:	bf00      	nop
 8001b9c:	e7fd      	b.n	8001b9a <_exit+0x12>

08001b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e00a      	b.n	8001bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb0:	f3af 8000 	nop.w
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf0      	blt.n	8001bb0 <_read+0x12>
  }

  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e009      	b.n	8001bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f972 	bl	8000edc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf1      	blt.n	8001bea <_write+0x12>
  }
  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_close>:

int _close(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c38:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f004 fb8c 	bl	80063c4 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20020000 	.word	0x20020000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	200003d4 	.word	0x200003d4
 8001ce0:	20000528 	.word	0x20000528

08001ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d0c:	f7ff ffea 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d12:	490d      	ldr	r1, [pc, #52]	@ (8001d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d28:	4c0a      	ldr	r4, [pc, #40]	@ (8001d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f004 fb4b 	bl	80063d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7ff f8e1 	bl	8000f00 <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d4c:	08007360 	.word	0x08007360
  ldr r2, =_sbss
 8001d50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d54:	20000528 	.word	0x20000528

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <HAL_Init+0x40>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <HAL_Init+0x40>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_Init+0x40>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 f94f 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f808 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fb22 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x54>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_InitTick+0x58>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f967 	bl	8002092 <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 f92f 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <HAL_InitTick+0x5c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000004 	.word	0x20000004
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000008 	.word	0x20000008

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	200003d8 	.word	0x200003d8

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200003d8 	.word	0x200003d8

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4907      	ldr	r1, [pc, #28]	@ (8001f24 <__NVIC_EnableIRQ+0x38>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	@ (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff29 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff3e 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff8e 	bl	8001f7c <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff31 	bl	8001eec <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff feb6 	bl	8001e28 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e099      	b.n	80021fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e8:	e00f      	b.n	800210a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ea:	f7ff fe9d 	bl	8001e28 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d908      	bls.n	800210a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e078      	b.n	80021fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e8      	bne.n	80020ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4b38      	ldr	r3, [pc, #224]	@ (8002204 <HAL_DMA_Init+0x158>)
 8002124:	4013      	ands	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	2b04      	cmp	r3, #4
 8002162:	d107      	bne.n	8002174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	4313      	orrs	r3, r2
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f023 0307 	bic.w	r3, r3, #7
 800218a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	2b04      	cmp	r3, #4
 800219c:	d117      	bne.n	80021ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fac3 	bl	800273c <DMA_CheckFifoParam>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2240      	movs	r2, #64	@ 0x40
 80021c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ca:	2301      	movs	r3, #1
 80021cc:	e016      	b.n	80021fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fa7a 	bl	80026d0 <DMA_CalcBaseAndBitshift>
 80021dc:	4603      	mov	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	223f      	movs	r2, #63	@ 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	f010803f 	.word	0xf010803f

08002208 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_DMA_Start+0x20>
 8002224:	2302      	movs	r3, #2
 8002226:	e026      	b.n	8002276 <HAL_DMA_Start+0x6e>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d115      	bne.n	8002268 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa0f 	bl	8002674 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e005      	b.n	8002274 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002274:	7dfb      	ldrb	r3, [r7, #23]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff fdcc 	bl	8001e28 <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d008      	beq.n	80022b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e052      	b.n	8002356 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0216 	bic.w	r2, r2, #22
 80022be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <HAL_DMA_Abort+0x62>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0208 	bic.w	r2, r2, #8
 80022ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002300:	e013      	b.n	800232a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002302:	f7ff fd91 	bl	8001e28 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b05      	cmp	r3, #5
 800230e:	d90c      	bls.n	800232a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2203      	movs	r2, #3
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e015      	b.n	8002356 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e4      	bne.n	8002302 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233c:	223f      	movs	r2, #63	@ 0x3f
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800236c:	4b8e      	ldr	r3, [pc, #568]	@ (80025a8 <HAL_DMA_IRQHandler+0x248>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a8e      	ldr	r2, [pc, #568]	@ (80025ac <HAL_DMA_IRQHandler+0x24c>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	2208      	movs	r2, #8
 800238c:	409a      	lsls	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01a      	beq.n	80023cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	2208      	movs	r2, #8
 80023ba:	409a      	lsls	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	2201      	movs	r2, #1
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2201      	movs	r2, #1
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fa:	f043 0202 	orr.w	r2, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	2204      	movs	r2, #4
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d012      	beq.n	8002438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	2204      	movs	r2, #4
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	f043 0204 	orr.w	r2, r3, #4
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243c:	2210      	movs	r2, #16
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d043      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03c      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245a:	2210      	movs	r2, #16
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d024      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
 800248e:	e01f      	b.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e016      	b.n	80024d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0208 	bic.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	2220      	movs	r2, #32
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 808f 	beq.w	8002600 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8087 	beq.w	8002600 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	2220      	movs	r2, #32
 80024f8:	409a      	lsls	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d136      	bne.n	8002578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0216 	bic.w	r2, r2, #22
 8002518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_DMA_IRQHandler+0x1da>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0208 	bic.w	r2, r2, #8
 8002548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	223f      	movs	r2, #63	@ 0x3f
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256a:	2b00      	cmp	r3, #0
 800256c:	d07e      	beq.n	800266c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
        }
        return;
 8002576:	e079      	b.n	800266c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01d      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002598:	2b00      	cmp	r3, #0
 800259a:	d031      	beq.n	8002600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e02c      	b.n	8002600 <HAL_DMA_IRQHandler+0x2a0>
 80025a6:	bf00      	nop
 80025a8:	20000004 	.word	0x20000004
 80025ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d023      	beq.n	8002600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
 80025c0:	e01e      	b.n	8002600 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0210 	bic.w	r2, r2, #16
 80025de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	2b00      	cmp	r3, #0
 8002606:	d032      	beq.n	800266e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d022      	beq.n	800265a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2205      	movs	r2, #5
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d307      	bcc.n	8002648 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f2      	bne.n	800262c <HAL_DMA_IRQHandler+0x2cc>
 8002646:	e000      	b.n	800264a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002648:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
 800266a:	e000      	b.n	800266e <HAL_DMA_IRQHandler+0x30e>
        return;
 800266c:	bf00      	nop
    }
  }
}
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b40      	cmp	r3, #64	@ 0x40
 80026a0:	d108      	bne.n	80026b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026b2:	e007      	b.n	80026c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3b10      	subs	r3, #16
 80026e0:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <DMA_CalcBaseAndBitshift+0x64>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ea:	4a13      	ldr	r2, [pc, #76]	@ (8002738 <DMA_CalcBaseAndBitshift+0x68>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d909      	bls.n	8002712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002710:	e007      	b.n	8002722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	aaaaaaab 	.word	0xaaaaaaab
 8002738:	08007090 	.word	0x08007090

0800273c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11f      	bne.n	8002796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d856      	bhi.n	800280a <DMA_CheckFifoParam+0xce>
 800275c:	a201      	add	r2, pc, #4	@ (adr r2, 8002764 <DMA_CheckFifoParam+0x28>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002775 	.word	0x08002775
 8002768:	08002787 	.word	0x08002787
 800276c:	08002775 	.word	0x08002775
 8002770:	0800280b 	.word	0x0800280b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d046      	beq.n	800280e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e043      	b.n	800280e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800278e:	d140      	bne.n	8002812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e03d      	b.n	8002812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279e:	d121      	bne.n	80027e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d837      	bhi.n	8002816 <DMA_CheckFifoParam+0xda>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <DMA_CheckFifoParam+0x70>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027c3 	.word	0x080027c3
 80027b4:	080027bd 	.word	0x080027bd
 80027b8:	080027d5 	.word	0x080027d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e030      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d025      	beq.n	800281a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e022      	b.n	800281a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027dc:	d11f      	bne.n	800281e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e2:	e01c      	b.n	800281e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d903      	bls.n	80027f2 <DMA_CheckFifoParam+0xb6>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d003      	beq.n	80027f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027f0:	e018      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      break;
 80027f6:	e015      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e00b      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 800280a:	bf00      	nop
 800280c:	e00a      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e008      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e006      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e004      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;   
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
    }
  } 
  
  return status; 
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	@ 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e165      	b.n	8002b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	f040 8154 	bne.w	8002b16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d005      	beq.n	8002886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	2b02      	cmp	r3, #2
 8002884:	d130      	bne.n	80028e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0201 	and.w	r2, r3, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d017      	beq.n	8002924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d123      	bne.n	8002978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80ae 	beq.w	8002b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b5d      	ldr	r3, [pc, #372]	@ (8002b34 <HAL_GPIO_Init+0x300>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b34 <HAL_GPIO_Init+0x300>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002b34 <HAL_GPIO_Init+0x300>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d6:	4a58      	ldr	r2, [pc, #352]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4f      	ldr	r2, [pc, #316]	@ (8002b3c <HAL_GPIO_Init+0x308>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d025      	beq.n	8002a4e <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	@ (8002b40 <HAL_GPIO_Init+0x30c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b44 <HAL_GPIO_Init+0x310>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	@ (8002b48 <HAL_GPIO_Init+0x314>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b4c <HAL_GPIO_Init+0x318>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x20a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4a      	ldr	r2, [pc, #296]	@ (8002b50 <HAL_GPIO_Init+0x31c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x206>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a49      	ldr	r2, [pc, #292]	@ (8002b54 <HAL_GPIO_Init+0x320>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x202>
 8002a32:	2306      	movs	r3, #6
 8002a34:	e00c      	b.n	8002a50 <HAL_GPIO_Init+0x21c>
 8002a36:	2307      	movs	r3, #7
 8002a38:	e00a      	b.n	8002a50 <HAL_GPIO_Init+0x21c>
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	e008      	b.n	8002a50 <HAL_GPIO_Init+0x21c>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x21c>
 8002a42:	2303      	movs	r3, #3
 8002a44:	e004      	b.n	8002a50 <HAL_GPIO_Init+0x21c>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e002      	b.n	8002a50 <HAL_GPIO_Init+0x21c>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_GPIO_Init+0x21c>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f002 0203 	and.w	r2, r2, #3
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a60:	4935      	ldr	r1, [pc, #212]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a92:	4a31      	ldr	r2, [pc, #196]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a98:	4b2f      	ldr	r3, [pc, #188]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002abc:	4a26      	ldr	r2, [pc, #152]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac2:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aec:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	f67f ae96 	bls.w	8002850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3724      	adds	r7, #36	@ 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40020800 	.word	0x40020800
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40021400 	.word	0x40021400
 8002b54:	40021800 	.word	0x40021800
 8002b58:	40013c00 	.word	0x40013c00

08002b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b6c:	787b      	ldrb	r3, [r7, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b78:	e003      	b.n	8002b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	041a      	lsls	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	619a      	str	r2, [r3, #24]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ba0:	887a      	ldrh	r2, [r7, #2]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	041a      	lsls	r2, r3, #16
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	43d9      	mvns	r1, r3
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	400b      	ands	r3, r1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	619a      	str	r2, [r3, #24]
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bda:	4a05      	ldr	r2, [pc, #20]	@ (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f806 	bl	8002bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4b20      	ldr	r3, [pc, #128]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x90>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x90>)
 8002c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c26:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x90>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c38:	f7ff f8f6 	bl	8001e28 <HAL_GetTick>
 8002c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c3e:	e009      	b.n	8002c54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c40:	f7ff f8f2 	bl	8001e28 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c4e:	d901      	bls.n	8002c54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e01f      	b.n	8002c94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c60:	d1ee      	bne.n	8002c40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7ff f8de 	bl	8001e28 <HAL_GetTick>
 8002c6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c6e:	e009      	b.n	8002c84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c70:	f7ff f8da 	bl	8001e28 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c7e:	d901      	bls.n	8002c84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e007      	b.n	8002c94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c90:	d1ee      	bne.n	8002c70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	420e0040 	.word	0x420e0040
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	420e0044 	.word	0x420e0044

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cc      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d90c      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b65      	ldr	r3, [pc, #404]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e067      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8a:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4934      	ldr	r1, [pc, #208]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9c:	f7ff f844 	bl	8001e28 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7ff f840 	bl	8001e28 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 020c 	and.w	r2, r3, #12
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1eb      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d20c      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f855 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe ffa4 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08007078 	.word	0x08007078
 8002e70:	20000004 	.word	0x20000004
 8002e74:	20000008 	.word	0x20000008

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000004 	.word	0x20000004

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08007088 	.word	0x08007088

08002eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ebc:	f7ff ffdc 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	@ (8002edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08007088 	.word	0x08007088

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b0ae      	sub	sp, #184	@ 0xb8
 8002ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f06:	4bcb      	ldr	r3, [pc, #812]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	f200 8206 	bhi.w	8003320 <HAL_RCC_GetSysClockFreq+0x440>
 8002f14:	a201      	add	r2, pc, #4	@ (adr r2, 8002f1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08003321 	.word	0x08003321
 8002f24:	08003321 	.word	0x08003321
 8002f28:	08003321 	.word	0x08003321
 8002f2c:	08002f59 	.word	0x08002f59
 8002f30:	08003321 	.word	0x08003321
 8002f34:	08003321 	.word	0x08003321
 8002f38:	08003321 	.word	0x08003321
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08003321 	.word	0x08003321
 8002f44:	08003321 	.word	0x08003321
 8002f48:	08003321 	.word	0x08003321
 8002f4c:	08003151 	.word	0x08003151
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4bb9      	ldr	r3, [pc, #740]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f56:	e1e7      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f58:	4bb8      	ldr	r3, [pc, #736]	@ (800323c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f5e:	e1e3      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f60:	4bb4      	ldr	r3, [pc, #720]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6c:	4bb1      	ldr	r3, [pc, #708]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d071      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f78:	4bae      	ldr	r3, [pc, #696]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	462b      	mov	r3, r5
 8002fa2:	f04f 0000 	mov.w	r0, #0
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	0159      	lsls	r1, r3, #5
 8002fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb0:	0150      	lsls	r0, r2, #5
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	1a51      	subs	r1, r2, r1
 8002fba:	6439      	str	r1, [r7, #64]	@ 0x40
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	018b      	lsls	r3, r1, #6
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fda:	4641      	mov	r1, r8
 8002fdc:	018a      	lsls	r2, r1, #6
 8002fde:	4641      	mov	r1, r8
 8002fe0:	1a51      	subs	r1, r2, r1
 8002fe2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	00cb      	lsls	r3, r1, #3
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003002:	4641      	mov	r1, r8
 8003004:	00ca      	lsls	r2, r1, #3
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	4603      	mov	r3, r0
 800300c:	4622      	mov	r2, r4
 800300e:	189b      	adds	r3, r3, r2
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
 8003012:	462b      	mov	r3, r5
 8003014:	460a      	mov	r2, r1
 8003016:	eb42 0303 	adc.w	r3, r2, r3
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003028:	4629      	mov	r1, r5
 800302a:	024b      	lsls	r3, r1, #9
 800302c:	4621      	mov	r1, r4
 800302e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003032:	4621      	mov	r1, r4
 8003034:	024a      	lsls	r2, r1, #9
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003044:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003048:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800304c:	f7fd fdce 	bl	8000bec <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4613      	mov	r3, r2
 8003056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800305a:	e067      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305c:	4b75      	ldr	r3, [pc, #468]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003068:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800306c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003076:	2300      	movs	r3, #0
 8003078:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800307a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	f04f 0000 	mov.w	r0, #0
 8003086:	f04f 0100 	mov.w	r1, #0
 800308a:	0159      	lsls	r1, r3, #5
 800308c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003090:	0150      	lsls	r0, r2, #5
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4621      	mov	r1, r4
 8003098:	1a51      	subs	r1, r2, r1
 800309a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800309c:	4629      	mov	r1, r5
 800309e:	eb63 0301 	sbc.w	r3, r3, r1
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80030b0:	4649      	mov	r1, r9
 80030b2:	018b      	lsls	r3, r1, #6
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ba:	4641      	mov	r1, r8
 80030bc:	018a      	lsls	r2, r1, #6
 80030be:	4641      	mov	r1, r8
 80030c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80030c4:	4649      	mov	r1, r9
 80030c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030de:	4692      	mov	sl, r2
 80030e0:	469b      	mov	fp, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	eb1a 0303 	adds.w	r3, sl, r3
 80030e8:	623b      	str	r3, [r7, #32]
 80030ea:	462b      	mov	r3, r5
 80030ec:	eb4b 0303 	adc.w	r3, fp, r3
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030fe:	4629      	mov	r1, r5
 8003100:	028b      	lsls	r3, r1, #10
 8003102:	4621      	mov	r1, r4
 8003104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003108:	4621      	mov	r1, r4
 800310a:	028a      	lsls	r2, r1, #10
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003114:	2200      	movs	r2, #0
 8003116:	673b      	str	r3, [r7, #112]	@ 0x70
 8003118:	677a      	str	r2, [r7, #116]	@ 0x74
 800311a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800311e:	f7fd fd65 	bl	8000bec <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4613      	mov	r3, r2
 8003128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800312c:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800313e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800314e:	e0eb      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003150:	4b38      	ldr	r3, [pc, #224]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315c:	4b35      	ldr	r3, [pc, #212]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d06b      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4b32      	ldr	r3, [pc, #200]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	2200      	movs	r2, #0
 8003170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003172:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317a:	663b      	str	r3, [r7, #96]	@ 0x60
 800317c:	2300      	movs	r3, #0
 800317e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003180:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003184:	4622      	mov	r2, r4
 8003186:	462b      	mov	r3, r5
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	0159      	lsls	r1, r3, #5
 8003192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003196:	0150      	lsls	r0, r2, #5
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4621      	mov	r1, r4
 800319e:	1a51      	subs	r1, r2, r1
 80031a0:	61b9      	str	r1, [r7, #24]
 80031a2:	4629      	mov	r1, r5
 80031a4:	eb63 0301 	sbc.w	r3, r3, r1
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031b6:	4659      	mov	r1, fp
 80031b8:	018b      	lsls	r3, r1, #6
 80031ba:	4651      	mov	r1, sl
 80031bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031c0:	4651      	mov	r1, sl
 80031c2:	018a      	lsls	r2, r1, #6
 80031c4:	4651      	mov	r1, sl
 80031c6:	ebb2 0801 	subs.w	r8, r2, r1
 80031ca:	4659      	mov	r1, fp
 80031cc:	eb63 0901 	sbc.w	r9, r3, r1
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031e4:	4690      	mov	r8, r2
 80031e6:	4699      	mov	r9, r3
 80031e8:	4623      	mov	r3, r4
 80031ea:	eb18 0303 	adds.w	r3, r8, r3
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	462b      	mov	r3, r5
 80031f2:	eb49 0303 	adc.w	r3, r9, r3
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003204:	4629      	mov	r1, r5
 8003206:	024b      	lsls	r3, r1, #9
 8003208:	4621      	mov	r1, r4
 800320a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800320e:	4621      	mov	r1, r4
 8003210:	024a      	lsls	r2, r1, #9
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800321a:	2200      	movs	r2, #0
 800321c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800321e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003220:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003224:	f7fd fce2 	bl	8000bec <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003232:	e065      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x420>
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003240:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x458>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	2200      	movs	r2, #0
 8003248:	4618      	mov	r0, r3
 800324a:	4611      	mov	r1, r2
 800324c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003250:	653b      	str	r3, [r7, #80]	@ 0x50
 8003252:	2300      	movs	r3, #0
 8003254:	657b      	str	r3, [r7, #84]	@ 0x54
 8003256:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800325a:	4642      	mov	r2, r8
 800325c:	464b      	mov	r3, r9
 800325e:	f04f 0000 	mov.w	r0, #0
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	0159      	lsls	r1, r3, #5
 8003268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800326c:	0150      	lsls	r0, r2, #5
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4641      	mov	r1, r8
 8003274:	1a51      	subs	r1, r2, r1
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	4649      	mov	r1, r9
 800327a:	eb63 0301 	sbc.w	r3, r3, r1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800328c:	4659      	mov	r1, fp
 800328e:	018b      	lsls	r3, r1, #6
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003296:	4651      	mov	r1, sl
 8003298:	018a      	lsls	r2, r1, #6
 800329a:	4651      	mov	r1, sl
 800329c:	1a54      	subs	r4, r2, r1
 800329e:	4659      	mov	r1, fp
 80032a0:	eb63 0501 	sbc.w	r5, r3, r1
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	00eb      	lsls	r3, r5, #3
 80032ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032b2:	00e2      	lsls	r2, r4, #3
 80032b4:	4614      	mov	r4, r2
 80032b6:	461d      	mov	r5, r3
 80032b8:	4643      	mov	r3, r8
 80032ba:	18e3      	adds	r3, r4, r3
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	464b      	mov	r3, r9
 80032c0:	eb45 0303 	adc.w	r3, r5, r3
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032d2:	4629      	mov	r1, r5
 80032d4:	028b      	lsls	r3, r1, #10
 80032d6:	4621      	mov	r1, r4
 80032d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032dc:	4621      	mov	r1, r4
 80032de:	028a      	lsls	r2, r1, #10
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032e8:	2200      	movs	r2, #0
 80032ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032f2:	f7fd fc7b 	bl	8000bec <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4613      	mov	r3, r2
 80032fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003300:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x458>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	0f1b      	lsrs	r3, r3, #28
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800330e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800331e:	e003      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003326:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800332c:	4618      	mov	r0, r3
 800332e:	37b8      	adds	r7, #184	@ 0xb8
 8003330:	46bd      	mov	sp, r7
 8003332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	00f42400 	.word	0x00f42400

08003340 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e28d      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8083 	beq.w	8003466 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003360:	4b94      	ldr	r3, [pc, #592]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b04      	cmp	r3, #4
 800336a:	d019      	beq.n	80033a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800336c:	4b91      	ldr	r3, [pc, #580]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
        || \
 8003374:	2b08      	cmp	r3, #8
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003378:	4b8e      	ldr	r3, [pc, #568]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003380:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003384:	d00c      	beq.n	80033a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b8b      	ldr	r3, [pc, #556]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d112      	bne.n	80033b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003392:	4b88      	ldr	r3, [pc, #544]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800339e:	d10b      	bne.n	80033b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	4b84      	ldr	r3, [pc, #528]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d05b      	beq.n	8003464 <HAL_RCC_OscConfig+0x124>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d157      	bne.n	8003464 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e25a      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c0:	d106      	bne.n	80033d0 <HAL_RCC_OscConfig+0x90>
 80033c2:	4b7c      	ldr	r3, [pc, #496]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7b      	ldr	r2, [pc, #492]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e01d      	b.n	800340c <HAL_RCC_OscConfig+0xcc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0xb4>
 80033da:	4b76      	ldr	r3, [pc, #472]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b73      	ldr	r3, [pc, #460]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a72      	ldr	r2, [pc, #456]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e00b      	b.n	800340c <HAL_RCC_OscConfig+0xcc>
 80033f4:	4b6f      	ldr	r3, [pc, #444]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6e      	ldr	r2, [pc, #440]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b6c      	ldr	r3, [pc, #432]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6b      	ldr	r2, [pc, #428]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800340a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe fd08 	bl	8001e28 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fe fd04 	bl	8001e28 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	@ 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e21f      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b61      	ldr	r3, [pc, #388]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0xdc>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe fcf4 	bl	8001e28 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fe fcf0 	bl	8001e28 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	@ 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e20b      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	4b57      	ldr	r3, [pc, #348]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x104>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d06f      	beq.n	8003552 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003472:	4b50      	ldr	r3, [pc, #320]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b00      	cmp	r3, #0
 800347c:	d017      	beq.n	80034ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800347e:	4b4d      	ldr	r3, [pc, #308]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
        || \
 8003486:	2b08      	cmp	r3, #8
 8003488:	d105      	bne.n	8003496 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b44      	ldr	r3, [pc, #272]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b41      	ldr	r3, [pc, #260]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x186>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1d3      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3b      	ldr	r3, [pc, #236]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4937      	ldr	r1, [pc, #220]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b34      	ldr	r3, [pc, #208]	@ (80035b8 <HAL_RCC_OscConfig+0x278>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fc9d 	bl	8001e28 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe fc99 	bl	8001e28 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1b4      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2b      	ldr	r3, [pc, #172]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4925      	ldr	r1, [pc, #148]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <HAL_RCC_OscConfig+0x278>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fc7c 	bl	8001e28 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe fc78 	bl	8001e28 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e193      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe fc5c 	bl	8001e28 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe fc58 	bl	8001e28 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e173      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x234>
 8003592:	e01b      	b.n	80035cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fe fc45 	bl	8001e28 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e00e      	b.n	80035c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe fc41 	bl	8001e28 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d907      	bls.n	80035c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e15c      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	42470000 	.word	0x42470000
 80035bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b8a      	ldr	r3, [pc, #552]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80035c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ea      	bne.n	80035a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8097 	beq.w	8003708 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b83      	ldr	r3, [pc, #524]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b7f      	ldr	r3, [pc, #508]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	4a7e      	ldr	r2, [pc, #504]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fa:	4b7c      	ldr	r3, [pc, #496]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b79      	ldr	r3, [pc, #484]	@ (80037f0 <HAL_RCC_OscConfig+0x4b0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b76      	ldr	r3, [pc, #472]	@ (80037f0 <HAL_RCC_OscConfig+0x4b0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a75      	ldr	r2, [pc, #468]	@ (80037f0 <HAL_RCC_OscConfig+0x4b0>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fe fc01 	bl	8001e28 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe fbfd 	bl	8001e28 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e118      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b6c      	ldr	r3, [pc, #432]	@ (80037f0 <HAL_RCC_OscConfig+0x4b0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x31e>
 8003650:	4b66      	ldr	r3, [pc, #408]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a65      	ldr	r2, [pc, #404]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	e01c      	b.n	8003698 <HAL_RCC_OscConfig+0x358>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b05      	cmp	r3, #5
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x340>
 8003666:	4b61      	ldr	r3, [pc, #388]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	4a60      	ldr	r2, [pc, #384]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
 8003672:	4b5e      	ldr	r3, [pc, #376]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	4a5d      	ldr	r2, [pc, #372]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	@ 0x70
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0x358>
 8003680:	4b5a      	ldr	r3, [pc, #360]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	4a59      	ldr	r2, [pc, #356]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	@ 0x70
 800368c:	4b57      	ldr	r3, [pc, #348]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	4a56      	ldr	r2, [pc, #344]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003692:	f023 0304 	bic.w	r3, r3, #4
 8003696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe fbc2 	bl	8001e28 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe fbbe 	bl	8001e28 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0d7      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	4b4b      	ldr	r3, [pc, #300]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ee      	beq.n	80036a8 <HAL_RCC_OscConfig+0x368>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe fbac 	bl	8001e28 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe fba8 	bl	8001e28 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0c1      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	4b40      	ldr	r3, [pc, #256]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ee      	bne.n	80036d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	4a3a      	ldr	r2, [pc, #232]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003706:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80ad 	beq.w	800386c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003712:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b08      	cmp	r3, #8
 800371c:	d060      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d145      	bne.n	80037b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b33      	ldr	r3, [pc, #204]	@ (80037f4 <HAL_RCC_OscConfig+0x4b4>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe fb7c 	bl	8001e28 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fb78 	bl	8001e28 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e093      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	071b      	lsls	r3, r3, #28
 800377e:	491b      	ldr	r1, [pc, #108]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_RCC_OscConfig+0x4b4>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fe fb4d 	bl	8001e28 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fb49 	bl	8001e28 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e064      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a4:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x452>
 80037b0:	e05c      	b.n	800386c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b10      	ldr	r3, [pc, #64]	@ (80037f4 <HAL_RCC_OscConfig+0x4b4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fb36 	bl	8001e28 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fb32 	bl	8001e28 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e04d      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x480>
 80037de:	e045      	b.n	800386c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e040      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40007000 	.word	0x40007000
 80037f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <HAL_RCC_OscConfig+0x538>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d030      	beq.n	8003868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d129      	bne.n	8003868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d122      	bne.n	8003868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800382e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	4293      	cmp	r3, r2
 8003832:	d119      	bne.n	8003868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	3b01      	subs	r3, #1
 8003842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d10f      	bne.n	8003868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07b      	b.n	8003986 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800389e:	d009      	beq.n	80038b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
 80038a6:	e005      	b.n	80038b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fdaa 	bl	8001428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003938:	ea42 0103 	orr.w	r1, r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0104 	and.w	r1, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	f003 0210 	and.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e041      	b.n	8003a24 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fd fd8f 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f000 fb41 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d001      	beq.n	8003a44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e046      	b.n	8003ad2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <HAL_TIM_Base_Start+0xb4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5e:	d01d      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <HAL_TIM_Base_Start+0xb8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_TIM_Base_Start+0xbc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	@ (8003aec <HAL_TIM_Base_Start+0xc0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1b      	ldr	r2, [pc, #108]	@ (8003af0 <HAL_TIM_Base_Start+0xc4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	@ (8003af4 <HAL_TIM_Base_Start+0xc8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <HAL_TIM_Base_Start+0xcc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d010      	beq.n	8003ad0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e041      	b.n	8003b92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f839 	bl	8003b9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f000 fa8a 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_TIM_PWM_Start+0x24>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e022      	b.n	8003c1a <HAL_TIM_PWM_Start+0x6a>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d109      	bne.n	8003bee <HAL_TIM_PWM_Start+0x3e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	e015      	b.n	8003c1a <HAL_TIM_PWM_Start+0x6a>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d109      	bne.n	8003c08 <HAL_TIM_PWM_Start+0x58>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e008      	b.n	8003c1a <HAL_TIM_PWM_Start+0x6a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07c      	b.n	8003d1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_PWM_Start+0x82>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c30:	e013      	b.n	8003c5a <HAL_TIM_PWM_Start+0xaa>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_PWM_Start+0x92>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c40:	e00b      	b.n	8003c5a <HAL_TIM_PWM_Start+0xaa>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start+0xa2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c50:	e003      	b.n	8003c5a <HAL_TIM_PWM_Start+0xaa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fcec 	bl	8004640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d24 <HAL_TIM_PWM_Start+0x174>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIM_PWM_Start+0xcc>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2c      	ldr	r2, [pc, #176]	@ (8003d28 <HAL_TIM_PWM_Start+0x178>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_PWM_Start+0xd0>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_TIM_PWM_Start+0xd2>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	@ (8003d24 <HAL_TIM_PWM_Start+0x174>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x136>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x136>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1f      	ldr	r2, [pc, #124]	@ (8003d2c <HAL_TIM_PWM_Start+0x17c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x136>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <HAL_TIM_PWM_Start+0x180>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x136>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <HAL_TIM_PWM_Start+0x184>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x136>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	@ (8003d28 <HAL_TIM_PWM_Start+0x178>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x136>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a18      	ldr	r2, [pc, #96]	@ (8003d38 <HAL_TIM_PWM_Start+0x188>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x136>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <HAL_TIM_PWM_Start+0x18c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b06      	cmp	r3, #6
 8003cf6:	d010      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	e007      	b.n	8003d1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40001800 	.word	0x40001800

08003d40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0ae      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	f200 809f 	bhi.w	8003eac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003ead 	.word	0x08003ead
 8003d7c:	08003ead 	.word	0x08003ead
 8003d80:	08003ead 	.word	0x08003ead
 8003d84:	08003de9 	.word	0x08003de9
 8003d88:	08003ead 	.word	0x08003ead
 8003d8c:	08003ead 	.word	0x08003ead
 8003d90:	08003ead 	.word	0x08003ead
 8003d94:	08003e2b 	.word	0x08003e2b
 8003d98:	08003ead 	.word	0x08003ead
 8003d9c:	08003ead 	.word	0x08003ead
 8003da0:	08003ead 	.word	0x08003ead
 8003da4:	08003e6b 	.word	0x08003e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f9fc 	bl	80041ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0208 	orr.w	r2, r2, #8
 8003dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0204 	bic.w	r2, r2, #4
 8003dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6999      	ldr	r1, [r3, #24]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	619a      	str	r2, [r3, #24]
      break;
 8003de6:	e064      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fa4c 	bl	800428c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6999      	ldr	r1, [r3, #24]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	619a      	str	r2, [r3, #24]
      break;
 8003e28:	e043      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 faa1 	bl	8004378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0208 	orr.w	r2, r2, #8
 8003e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0204 	bic.w	r2, r2, #4
 8003e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	61da      	str	r2, [r3, #28]
      break;
 8003e68:	e023      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 faf5 	bl	8004460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69d9      	ldr	r1, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	021a      	lsls	r2, r3, #8
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	61da      	str	r2, [r3, #28]
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0b4      	b.n	800404a <HAL_TIM_ConfigClockSource+0x186>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f18:	d03e      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0xd4>
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1e:	f200 8087 	bhi.w	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f26:	f000 8086 	beq.w	8004036 <HAL_TIM_ConfigClockSource+0x172>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2e:	d87f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b70      	cmp	r3, #112	@ 0x70
 8003f32:	d01a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0xa6>
 8003f34:	2b70      	cmp	r3, #112	@ 0x70
 8003f36:	d87b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b60      	cmp	r3, #96	@ 0x60
 8003f3a:	d050      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x11a>
 8003f3c:	2b60      	cmp	r3, #96	@ 0x60
 8003f3e:	d877      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b50      	cmp	r3, #80	@ 0x50
 8003f42:	d03c      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0xfa>
 8003f44:	2b50      	cmp	r3, #80	@ 0x50
 8003f46:	d873      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d058      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x13a>
 8003f4c:	2b40      	cmp	r3, #64	@ 0x40
 8003f4e:	d86f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b30      	cmp	r3, #48	@ 0x30
 8003f52:	d064      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b30      	cmp	r3, #48	@ 0x30
 8003f56:	d86b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d060      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d867      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05c      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d05a      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f68:	e062      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f7a:	f000 fb41 	bl	8004600 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	609a      	str	r2, [r3, #8]
      break;
 8003f96:	e04f      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fa8:	f000 fb2a 	bl	8004600 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fba:	609a      	str	r2, [r3, #8]
      break;
 8003fbc:	e03c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 fa9e 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2150      	movs	r1, #80	@ 0x50
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 faf7 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e02c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fabd 	bl	800456a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2160      	movs	r1, #96	@ 0x60
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fae7 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e01c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800400a:	461a      	mov	r2, r3
 800400c:	f000 fa7e 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2140      	movs	r1, #64	@ 0x40
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fad7 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 800401c:	e00c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f000 face 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 800402e:	e003      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      break;
 8004034:	e000      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a46      	ldr	r2, [pc, #280]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a43      	ldr	r2, [pc, #268]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a42      	ldr	r2, [pc, #264]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a41      	ldr	r2, [pc, #260]	@ (800418c <TIM_Base_SetConfig+0x138>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a40      	ldr	r2, [pc, #256]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a35      	ldr	r2, [pc, #212]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d027      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d023      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a31      	ldr	r2, [pc, #196]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a30      	ldr	r2, [pc, #192]	@ (800418c <TIM_Base_SetConfig+0x138>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d017      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004194 <TIM_Base_SetConfig+0x140>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <TIM_Base_SetConfig+0x144>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2c      	ldr	r2, [pc, #176]	@ (800419c <TIM_Base_SetConfig+0x148>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2b      	ldr	r2, [pc, #172]	@ (80041a0 <TIM_Base_SetConfig+0x14c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <TIM_Base_SetConfig+0x150>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a29      	ldr	r2, [pc, #164]	@ (80041a8 <TIM_Base_SetConfig+0x154>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a10      	ldr	r2, [pc, #64]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]
  }
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40010400 	.word	0x40010400
 8004194:	40014000 	.word	0x40014000
 8004198:	40014400 	.word	0x40014400
 800419c:	40014800 	.word	0x40014800
 80041a0:	40001800 	.word	0x40001800
 80041a4:	40001c00 	.word	0x40001c00
 80041a8:	40002000 	.word	0x40002000

080041ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f023 0201 	bic.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 0302 	bic.w	r3, r3, #2
 80041f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a20      	ldr	r2, [pc, #128]	@ (8004284 <TIM_OC1_SetConfig+0xd8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC1_SetConfig+0x64>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <TIM_OC1_SetConfig+0xdc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0308 	bic.w	r3, r3, #8
 8004216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <TIM_OC1_SetConfig+0xd8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC1_SetConfig+0x8e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <TIM_OC1_SetConfig+0xdc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d111      	bne.n	800425e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40010000 	.word	0x40010000
 8004288:	40010400 	.word	0x40010400

0800428c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f023 0210 	bic.w	r2, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0320 	bic.w	r3, r3, #32
 80042d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <TIM_OC2_SetConfig+0xe4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <TIM_OC2_SetConfig+0x68>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a21      	ldr	r2, [pc, #132]	@ (8004374 <TIM_OC2_SetConfig+0xe8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10d      	bne.n	8004310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <TIM_OC2_SetConfig+0xe4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC2_SetConfig+0x94>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a16      	ldr	r2, [pc, #88]	@ (8004374 <TIM_OC2_SetConfig+0xe8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d113      	bne.n	8004348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40010400 	.word	0x40010400

08004378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a21      	ldr	r2, [pc, #132]	@ (8004458 <TIM_OC3_SetConfig+0xe0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_OC3_SetConfig+0x66>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a20      	ldr	r2, [pc, #128]	@ (800445c <TIM_OC3_SetConfig+0xe4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10d      	bne.n	80043fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <TIM_OC3_SetConfig+0xe0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC3_SetConfig+0x92>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a15      	ldr	r2, [pc, #84]	@ (800445c <TIM_OC3_SetConfig+0xe4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d113      	bne.n	8004432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a12      	ldr	r2, [pc, #72]	@ (8004504 <TIM_OC4_SetConfig+0xa4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_OC4_SetConfig+0x68>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a11      	ldr	r2, [pc, #68]	@ (8004508 <TIM_OC4_SetConfig+0xa8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d109      	bne.n	80044dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40010400 	.word	0x40010400

0800450c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 030a 	bic.w	r3, r3, #10
 8004548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456a:	b480      	push	{r7}
 800456c:	b087      	sub	sp, #28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f023 0210 	bic.w	r2, r3, #16
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	031b      	lsls	r3, r3, #12
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f043 0307 	orr.w	r3, r3, #7
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800461a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	021a      	lsls	r2, r3, #8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	431a      	orrs	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	609a      	str	r2, [r3, #8]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2201      	movs	r2, #1
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e05a      	b.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a21      	ldr	r2, [pc, #132]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d022      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f0:	d01d      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d018      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00e      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a17      	ldr	r2, [pc, #92]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a15      	ldr	r2, [pc, #84]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10c      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40010400 	.word	0x40010400
 800477c:	40014000 	.word	0x40014000
 8004780:	40001800 	.word	0x40001800

08004784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800479c:	2302      	movs	r3, #2
 800479e:	e03d      	b.n	800481c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e042      	b.n	80048c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fc fece 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	@ 0x24
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800486a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f973 	bl	8004b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	@ 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d175      	bne.n	80049d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Transmit+0x2c>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e06e      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2221      	movs	r2, #33	@ 0x21
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004906:	f7fd fa8f 	bl	8001e28 <HAL_GetTick>
 800490a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004920:	d108      	bne.n	8004934 <HAL_UART_Transmit+0x6c>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e003      	b.n	800493c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800493c:	e02e      	b.n	800499c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2180      	movs	r1, #128	@ 0x80
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f848 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e03a      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	3302      	adds	r3, #2
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e007      	b.n	800498e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1cb      	bne.n	800493e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2140      	movs	r1, #64	@ 0x40
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f814 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	e03b      	b.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d037      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f8:	f7fd fa16 	bl	8001e28 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	6a3a      	ldr	r2, [r7, #32]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e03a      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d023      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d020      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d01d      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d116      	bne.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f81d 	bl	8004a90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e00f      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d0b4      	beq.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b095      	sub	sp, #84	@ 0x54
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ab8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004abe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3314      	adds	r3, #20
 8004ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3314      	adds	r3, #20
 8004aea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d119      	bne.n	8004b3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0310 	bic.w	r3, r3, #16
 8004b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b28:	61ba      	str	r2, [r7, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6979      	ldr	r1, [r7, #20]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	613b      	str	r3, [r7, #16]
   return(result);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e5      	bne.n	8004b08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b4a:	bf00      	nop
 8004b4c:	3754      	adds	r7, #84	@ 0x54
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b0c0      	sub	sp, #256	@ 0x100
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	ea40 0301 	orr.w	r3, r0, r1
 8004b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bb0:	f021 010c 	bic.w	r1, r1, #12
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd2:	6999      	ldr	r1, [r3, #24]
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	ea40 0301 	orr.w	r3, r0, r1
 8004bde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b8f      	ldr	r3, [pc, #572]	@ (8004e24 <UART_SetConfig+0x2cc>)
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d005      	beq.n	8004bf8 <UART_SetConfig+0xa0>
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8004e28 <UART_SetConfig+0x2d0>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d104      	bne.n	8004c02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe f95e 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c00:	e003      	b.n	8004c0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c02:	f7fe f945 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004c06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c14:	f040 810c 	bne.w	8004e30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c32:	415b      	adcs	r3, r3
 8004c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	eb12 0801 	adds.w	r8, r2, r1
 8004c40:	4629      	mov	r1, r5
 8004c42:	eb43 0901 	adc.w	r9, r3, r1
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c5a:	4690      	mov	r8, r2
 8004c5c:	4699      	mov	r9, r3
 8004c5e:	4623      	mov	r3, r4
 8004c60:	eb18 0303 	adds.w	r3, r8, r3
 8004c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c68:	462b      	mov	r3, r5
 8004c6a:	eb49 0303 	adc.w	r3, r9, r3
 8004c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c86:	460b      	mov	r3, r1
 8004c88:	18db      	adds	r3, r3, r3
 8004c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	eb42 0303 	adc.w	r3, r2, r3
 8004c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c9c:	f7fb ffa6 	bl	8000bec <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4b61      	ldr	r3, [pc, #388]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	011c      	lsls	r4, r3, #4
 8004cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	1891      	adds	r1, r2, r2
 8004cc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	eb12 0a01 	adds.w	sl, r2, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf0:	4692      	mov	sl, r2
 8004cf2:	469b      	mov	fp, r3
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb4b 0303 	adc.w	r3, fp, r3
 8004d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	18db      	adds	r3, r3, r3
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d22:	4613      	mov	r3, r2
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d32:	f7fb ff5b 	bl	8000bec <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2264      	movs	r2, #100	@ 0x64
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	1acb      	subs	r3, r1, r3
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d52:	4b36      	ldr	r3, [pc, #216]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004d54:	fba3 2302 	umull	r2, r3, r3, r2
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d60:	441c      	add	r4, r3
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dd8:	460b      	mov	r3, r1
 8004dda:	18db      	adds	r3, r3, r3
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dde:	4613      	mov	r3, r2
 8004de0:	eb42 0303 	adc.w	r3, r2, r3
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dee:	f7fb fefd 	bl	8000bec <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	@ 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	3332      	adds	r3, #50	@ 0x32
 8004e0a:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 0207 	and.w	r2, r3, #7
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4422      	add	r2, r4
 8004e1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e20:	e106      	b.n	8005030 <UART_SetConfig+0x4d8>
 8004e22:	bf00      	nop
 8004e24:	40011000 	.word	0x40011000
 8004e28:	40011400 	.word	0x40011400
 8004e2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e42:	4642      	mov	r2, r8
 8004e44:	464b      	mov	r3, r9
 8004e46:	1891      	adds	r1, r2, r2
 8004e48:	6239      	str	r1, [r7, #32]
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e52:	4641      	mov	r1, r8
 8004e54:	1854      	adds	r4, r2, r1
 8004e56:	4649      	mov	r1, r9
 8004e58:	eb43 0501 	adc.w	r5, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	00eb      	lsls	r3, r5, #3
 8004e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6a:	00e2      	lsls	r2, r4, #3
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	4643      	mov	r3, r8
 8004e72:	18e3      	adds	r3, r4, r3
 8004e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e78:	464b      	mov	r3, r9
 8004e7a:	eb45 0303 	adc.w	r3, r5, r3
 8004e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	008b      	lsls	r3, r1, #2
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	008a      	lsls	r2, r1, #2
 8004eac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eb0:	f7fb fe9c 	bl	8000bec <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4b60      	ldr	r3, [pc, #384]	@ (800503c <UART_SetConfig+0x4e4>)
 8004eba:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	011c      	lsls	r4, r3, #4
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ecc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ed0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	61b9      	str	r1, [r7, #24]
 8004edc:	415b      	adcs	r3, r3
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	1851      	adds	r1, r2, r1
 8004ee8:	6139      	str	r1, [r7, #16]
 8004eea:	4649      	mov	r1, r9
 8004eec:	414b      	adcs	r3, r1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004efc:	4659      	mov	r1, fp
 8004efe:	00cb      	lsls	r3, r1, #3
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f06:	4651      	mov	r1, sl
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4642      	mov	r2, r8
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f18:	464b      	mov	r3, r9
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	008b      	lsls	r3, r1, #2
 8004f40:	4641      	mov	r1, r8
 8004f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f46:	4641      	mov	r1, r8
 8004f48:	008a      	lsls	r2, r1, #2
 8004f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f4e:	f7fb fe4d 	bl	8000bec <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	4b38      	ldr	r3, [pc, #224]	@ (800503c <UART_SetConfig+0x4e4>)
 8004f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2264      	movs	r2, #100	@ 0x64
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	1acb      	subs	r3, r1, r3
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	3332      	adds	r3, #50	@ 0x32
 8004f6c:	4a33      	ldr	r2, [pc, #204]	@ (800503c <UART_SetConfig+0x4e4>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f78:	441c      	add	r4, r3
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f82:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	415b      	adcs	r3, r3
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f98:	4641      	mov	r1, r8
 8004f9a:	1851      	adds	r1, r2, r1
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	414b      	adcs	r3, r1
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	00cb      	lsls	r3, r1, #3
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fba:	4651      	mov	r1, sl
 8004fbc:	00ca      	lsls	r2, r1, #3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fca:	464b      	mov	r3, r9
 8004fcc:	460a      	mov	r2, r1
 8004fce:	eb42 0303 	adc.w	r3, r2, r3
 8004fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fde:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fec:	4649      	mov	r1, r9
 8004fee:	008b      	lsls	r3, r1, #2
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	008a      	lsls	r2, r1, #2
 8004ffa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ffe:	f7fb fdf5 	bl	8000bec <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <UART_SetConfig+0x4e4>)
 8005008:	fba3 1302 	umull	r1, r3, r3, r2
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	2164      	movs	r1, #100	@ 0x64
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	3332      	adds	r3, #50	@ 0x32
 800501a:	4a08      	ldr	r2, [pc, #32]	@ (800503c <UART_SetConfig+0x4e4>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 020f 	and.w	r2, r3, #15
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4422      	add	r2, r4
 800502e:	609a      	str	r2, [r3, #8]
}
 8005030:	bf00      	nop
 8005032:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005036:	46bd      	mov	sp, r7
 8005038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503c:	51eb851f 	.word	0x51eb851f

08005040 <sin>:
 8005040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005042:	ec53 2b10 	vmov	r2, r3, d0
 8005046:	4826      	ldr	r0, [pc, #152]	@ (80050e0 <sin+0xa0>)
 8005048:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800504c:	4281      	cmp	r1, r0
 800504e:	d807      	bhi.n	8005060 <sin+0x20>
 8005050:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80050d8 <sin+0x98>
 8005054:	2000      	movs	r0, #0
 8005056:	b005      	add	sp, #20
 8005058:	f85d eb04 	ldr.w	lr, [sp], #4
 800505c:	f000 b90c 	b.w	8005278 <__kernel_sin>
 8005060:	4820      	ldr	r0, [pc, #128]	@ (80050e4 <sin+0xa4>)
 8005062:	4281      	cmp	r1, r0
 8005064:	d908      	bls.n	8005078 <sin+0x38>
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	f7fb f925 	bl	80002b8 <__aeabi_dsub>
 800506e:	ec41 0b10 	vmov	d0, r0, r1
 8005072:	b005      	add	sp, #20
 8005074:	f85d fb04 	ldr.w	pc, [sp], #4
 8005078:	4668      	mov	r0, sp
 800507a:	f000 f9b9 	bl	80053f0 <__ieee754_rem_pio2>
 800507e:	f000 0003 	and.w	r0, r0, #3
 8005082:	2801      	cmp	r0, #1
 8005084:	d00c      	beq.n	80050a0 <sin+0x60>
 8005086:	2802      	cmp	r0, #2
 8005088:	d011      	beq.n	80050ae <sin+0x6e>
 800508a:	b9e8      	cbnz	r0, 80050c8 <sin+0x88>
 800508c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005090:	ed9d 0b00 	vldr	d0, [sp]
 8005094:	2001      	movs	r0, #1
 8005096:	f000 f8ef 	bl	8005278 <__kernel_sin>
 800509a:	ec51 0b10 	vmov	r0, r1, d0
 800509e:	e7e6      	b.n	800506e <sin+0x2e>
 80050a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80050a4:	ed9d 0b00 	vldr	d0, [sp]
 80050a8:	f000 f81e 	bl	80050e8 <__kernel_cos>
 80050ac:	e7f5      	b.n	800509a <sin+0x5a>
 80050ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80050b2:	ed9d 0b00 	vldr	d0, [sp]
 80050b6:	2001      	movs	r0, #1
 80050b8:	f000 f8de 	bl	8005278 <__kernel_sin>
 80050bc:	ec53 2b10 	vmov	r2, r3, d0
 80050c0:	4610      	mov	r0, r2
 80050c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80050c6:	e7d2      	b.n	800506e <sin+0x2e>
 80050c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80050cc:	ed9d 0b00 	vldr	d0, [sp]
 80050d0:	f000 f80a 	bl	80050e8 <__kernel_cos>
 80050d4:	e7f2      	b.n	80050bc <sin+0x7c>
 80050d6:	bf00      	nop
	...
 80050e0:	3fe921fb 	.word	0x3fe921fb
 80050e4:	7fefffff 	.word	0x7fefffff

080050e8 <__kernel_cos>:
 80050e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	ec57 6b10 	vmov	r6, r7, d0
 80050f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80050f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80050f8:	ed8d 1b00 	vstr	d1, [sp]
 80050fc:	d206      	bcs.n	800510c <__kernel_cos+0x24>
 80050fe:	4630      	mov	r0, r6
 8005100:	4639      	mov	r1, r7
 8005102:	f7fb fd2b 	bl	8000b5c <__aeabi_d2iz>
 8005106:	2800      	cmp	r0, #0
 8005108:	f000 8088 	beq.w	800521c <__kernel_cos+0x134>
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb fa88 	bl	8000628 <__aeabi_dmul>
 8005118:	4b51      	ldr	r3, [pc, #324]	@ (8005260 <__kernel_cos+0x178>)
 800511a:	2200      	movs	r2, #0
 800511c:	4604      	mov	r4, r0
 800511e:	460d      	mov	r5, r1
 8005120:	f7fb fa82 	bl	8000628 <__aeabi_dmul>
 8005124:	a340      	add	r3, pc, #256	@ (adr r3, 8005228 <__kernel_cos+0x140>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	4682      	mov	sl, r0
 800512c:	468b      	mov	fp, r1
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fa79 	bl	8000628 <__aeabi_dmul>
 8005136:	a33e      	add	r3, pc, #248	@ (adr r3, 8005230 <__kernel_cos+0x148>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb f8be 	bl	80002bc <__adddf3>
 8005140:	4622      	mov	r2, r4
 8005142:	462b      	mov	r3, r5
 8005144:	f7fb fa70 	bl	8000628 <__aeabi_dmul>
 8005148:	a33b      	add	r3, pc, #236	@ (adr r3, 8005238 <__kernel_cos+0x150>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb f8b3 	bl	80002b8 <__aeabi_dsub>
 8005152:	4622      	mov	r2, r4
 8005154:	462b      	mov	r3, r5
 8005156:	f7fb fa67 	bl	8000628 <__aeabi_dmul>
 800515a:	a339      	add	r3, pc, #228	@ (adr r3, 8005240 <__kernel_cos+0x158>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f7fb f8ac 	bl	80002bc <__adddf3>
 8005164:	4622      	mov	r2, r4
 8005166:	462b      	mov	r3, r5
 8005168:	f7fb fa5e 	bl	8000628 <__aeabi_dmul>
 800516c:	a336      	add	r3, pc, #216	@ (adr r3, 8005248 <__kernel_cos+0x160>)
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f7fb f8a1 	bl	80002b8 <__aeabi_dsub>
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	f7fb fa55 	bl	8000628 <__aeabi_dmul>
 800517e:	a334      	add	r3, pc, #208	@ (adr r3, 8005250 <__kernel_cos+0x168>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f7fb f89a 	bl	80002bc <__adddf3>
 8005188:	4622      	mov	r2, r4
 800518a:	462b      	mov	r3, r5
 800518c:	f7fb fa4c 	bl	8000628 <__aeabi_dmul>
 8005190:	4622      	mov	r2, r4
 8005192:	462b      	mov	r3, r5
 8005194:	f7fb fa48 	bl	8000628 <__aeabi_dmul>
 8005198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800519c:	4604      	mov	r4, r0
 800519e:	460d      	mov	r5, r1
 80051a0:	4630      	mov	r0, r6
 80051a2:	4639      	mov	r1, r7
 80051a4:	f7fb fa40 	bl	8000628 <__aeabi_dmul>
 80051a8:	460b      	mov	r3, r1
 80051aa:	4602      	mov	r2, r0
 80051ac:	4629      	mov	r1, r5
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7fb f882 	bl	80002b8 <__aeabi_dsub>
 80051b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <__kernel_cos+0x17c>)
 80051b6:	4598      	cmp	r8, r3
 80051b8:	4606      	mov	r6, r0
 80051ba:	460f      	mov	r7, r1
 80051bc:	d810      	bhi.n	80051e0 <__kernel_cos+0xf8>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4650      	mov	r0, sl
 80051c4:	4659      	mov	r1, fp
 80051c6:	f7fb f877 	bl	80002b8 <__aeabi_dsub>
 80051ca:	460b      	mov	r3, r1
 80051cc:	4926      	ldr	r1, [pc, #152]	@ (8005268 <__kernel_cos+0x180>)
 80051ce:	4602      	mov	r2, r0
 80051d0:	2000      	movs	r0, #0
 80051d2:	f7fb f871 	bl	80002b8 <__aeabi_dsub>
 80051d6:	ec41 0b10 	vmov	d0, r0, r1
 80051da:	b003      	add	sp, #12
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	4b22      	ldr	r3, [pc, #136]	@ (800526c <__kernel_cos+0x184>)
 80051e2:	4921      	ldr	r1, [pc, #132]	@ (8005268 <__kernel_cos+0x180>)
 80051e4:	4598      	cmp	r8, r3
 80051e6:	bf8c      	ite	hi
 80051e8:	4d21      	ldrhi	r5, [pc, #132]	@ (8005270 <__kernel_cos+0x188>)
 80051ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80051ee:	2400      	movs	r4, #0
 80051f0:	4622      	mov	r2, r4
 80051f2:	462b      	mov	r3, r5
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7fb f85f 	bl	80002b8 <__aeabi_dsub>
 80051fa:	4622      	mov	r2, r4
 80051fc:	4680      	mov	r8, r0
 80051fe:	4689      	mov	r9, r1
 8005200:	462b      	mov	r3, r5
 8005202:	4650      	mov	r0, sl
 8005204:	4659      	mov	r1, fp
 8005206:	f7fb f857 	bl	80002b8 <__aeabi_dsub>
 800520a:	4632      	mov	r2, r6
 800520c:	463b      	mov	r3, r7
 800520e:	f7fb f853 	bl	80002b8 <__aeabi_dsub>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	e7da      	b.n	80051d2 <__kernel_cos+0xea>
 800521c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005258 <__kernel_cos+0x170>
 8005220:	e7db      	b.n	80051da <__kernel_cos+0xf2>
 8005222:	bf00      	nop
 8005224:	f3af 8000 	nop.w
 8005228:	be8838d4 	.word	0xbe8838d4
 800522c:	bda8fae9 	.word	0xbda8fae9
 8005230:	bdb4b1c4 	.word	0xbdb4b1c4
 8005234:	3e21ee9e 	.word	0x3e21ee9e
 8005238:	809c52ad 	.word	0x809c52ad
 800523c:	3e927e4f 	.word	0x3e927e4f
 8005240:	19cb1590 	.word	0x19cb1590
 8005244:	3efa01a0 	.word	0x3efa01a0
 8005248:	16c15177 	.word	0x16c15177
 800524c:	3f56c16c 	.word	0x3f56c16c
 8005250:	5555554c 	.word	0x5555554c
 8005254:	3fa55555 	.word	0x3fa55555
 8005258:	00000000 	.word	0x00000000
 800525c:	3ff00000 	.word	0x3ff00000
 8005260:	3fe00000 	.word	0x3fe00000
 8005264:	3fd33332 	.word	0x3fd33332
 8005268:	3ff00000 	.word	0x3ff00000
 800526c:	3fe90000 	.word	0x3fe90000
 8005270:	3fd20000 	.word	0x3fd20000
 8005274:	00000000 	.word	0x00000000

08005278 <__kernel_sin>:
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	ec55 4b10 	vmov	r4, r5, d0
 8005280:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005284:	b085      	sub	sp, #20
 8005286:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800528a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800528e:	4680      	mov	r8, r0
 8005290:	d205      	bcs.n	800529e <__kernel_sin+0x26>
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f7fb fc61 	bl	8000b5c <__aeabi_d2iz>
 800529a:	2800      	cmp	r0, #0
 800529c:	d052      	beq.n	8005344 <__kernel_sin+0xcc>
 800529e:	4622      	mov	r2, r4
 80052a0:	462b      	mov	r3, r5
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fb f9bf 	bl	8000628 <__aeabi_dmul>
 80052aa:	4682      	mov	sl, r0
 80052ac:	468b      	mov	fp, r1
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4620      	mov	r0, r4
 80052b4:	4629      	mov	r1, r5
 80052b6:	f7fb f9b7 	bl	8000628 <__aeabi_dmul>
 80052ba:	a342      	add	r3, pc, #264	@ (adr r3, 80053c4 <__kernel_sin+0x14c>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	e9cd 0100 	strd	r0, r1, [sp]
 80052c4:	4650      	mov	r0, sl
 80052c6:	4659      	mov	r1, fp
 80052c8:	f7fb f9ae 	bl	8000628 <__aeabi_dmul>
 80052cc:	a33f      	add	r3, pc, #252	@ (adr r3, 80053cc <__kernel_sin+0x154>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fa fff1 	bl	80002b8 <__aeabi_dsub>
 80052d6:	4652      	mov	r2, sl
 80052d8:	465b      	mov	r3, fp
 80052da:	f7fb f9a5 	bl	8000628 <__aeabi_dmul>
 80052de:	a33d      	add	r3, pc, #244	@ (adr r3, 80053d4 <__kernel_sin+0x15c>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fa ffea 	bl	80002bc <__adddf3>
 80052e8:	4652      	mov	r2, sl
 80052ea:	465b      	mov	r3, fp
 80052ec:	f7fb f99c 	bl	8000628 <__aeabi_dmul>
 80052f0:	a33a      	add	r3, pc, #232	@ (adr r3, 80053dc <__kernel_sin+0x164>)
 80052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f6:	f7fa ffdf 	bl	80002b8 <__aeabi_dsub>
 80052fa:	4652      	mov	r2, sl
 80052fc:	465b      	mov	r3, fp
 80052fe:	f7fb f993 	bl	8000628 <__aeabi_dmul>
 8005302:	a338      	add	r3, pc, #224	@ (adr r3, 80053e4 <__kernel_sin+0x16c>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ffd8 	bl	80002bc <__adddf3>
 800530c:	4606      	mov	r6, r0
 800530e:	460f      	mov	r7, r1
 8005310:	f1b8 0f00 	cmp.w	r8, #0
 8005314:	d11b      	bne.n	800534e <__kernel_sin+0xd6>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4650      	mov	r0, sl
 800531c:	4659      	mov	r1, fp
 800531e:	f7fb f983 	bl	8000628 <__aeabi_dmul>
 8005322:	a325      	add	r3, pc, #148	@ (adr r3, 80053b8 <__kernel_sin+0x140>)
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f7fa ffc6 	bl	80002b8 <__aeabi_dsub>
 800532c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005330:	f7fb f97a 	bl	8000628 <__aeabi_dmul>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4620      	mov	r0, r4
 800533a:	4629      	mov	r1, r5
 800533c:	f7fa ffbe 	bl	80002bc <__adddf3>
 8005340:	4604      	mov	r4, r0
 8005342:	460d      	mov	r5, r1
 8005344:	ec45 4b10 	vmov	d0, r4, r5
 8005348:	b005      	add	sp, #20
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005352:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <__kernel_sin+0x148>)
 8005354:	2200      	movs	r2, #0
 8005356:	f7fb f967 	bl	8000628 <__aeabi_dmul>
 800535a:	4632      	mov	r2, r6
 800535c:	4680      	mov	r8, r0
 800535e:	4689      	mov	r9, r1
 8005360:	463b      	mov	r3, r7
 8005362:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005366:	f7fb f95f 	bl	8000628 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fa ffa1 	bl	80002b8 <__aeabi_dsub>
 8005376:	4652      	mov	r2, sl
 8005378:	465b      	mov	r3, fp
 800537a:	f7fb f955 	bl	8000628 <__aeabi_dmul>
 800537e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005382:	f7fa ff99 	bl	80002b8 <__aeabi_dsub>
 8005386:	a30c      	add	r3, pc, #48	@ (adr r3, 80053b8 <__kernel_sin+0x140>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005394:	f7fb f948 	bl	8000628 <__aeabi_dmul>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	f7fa ff8c 	bl	80002bc <__adddf3>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4620      	mov	r0, r4
 80053aa:	4629      	mov	r1, r5
 80053ac:	f7fa ff84 	bl	80002b8 <__aeabi_dsub>
 80053b0:	e7c6      	b.n	8005340 <__kernel_sin+0xc8>
 80053b2:	bf00      	nop
 80053b4:	f3af 8000 	nop.w
 80053b8:	55555549 	.word	0x55555549
 80053bc:	3fc55555 	.word	0x3fc55555
 80053c0:	3fe00000 	.word	0x3fe00000
 80053c4:	5acfd57c 	.word	0x5acfd57c
 80053c8:	3de5d93a 	.word	0x3de5d93a
 80053cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80053d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80053d4:	57b1fe7d 	.word	0x57b1fe7d
 80053d8:	3ec71de3 	.word	0x3ec71de3
 80053dc:	19c161d5 	.word	0x19c161d5
 80053e0:	3f2a01a0 	.word	0x3f2a01a0
 80053e4:	1110f8a6 	.word	0x1110f8a6
 80053e8:	3f811111 	.word	0x3f811111
 80053ec:	00000000 	.word	0x00000000

080053f0 <__ieee754_rem_pio2>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	ec57 6b10 	vmov	r6, r7, d0
 80053f8:	4bc5      	ldr	r3, [pc, #788]	@ (8005710 <__ieee754_rem_pio2+0x320>)
 80053fa:	b08d      	sub	sp, #52	@ 0x34
 80053fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005400:	4598      	cmp	r8, r3
 8005402:	4604      	mov	r4, r0
 8005404:	9704      	str	r7, [sp, #16]
 8005406:	d807      	bhi.n	8005418 <__ieee754_rem_pio2+0x28>
 8005408:	2200      	movs	r2, #0
 800540a:	2300      	movs	r3, #0
 800540c:	ed80 0b00 	vstr	d0, [r0]
 8005410:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005414:	2500      	movs	r5, #0
 8005416:	e028      	b.n	800546a <__ieee754_rem_pio2+0x7a>
 8005418:	4bbe      	ldr	r3, [pc, #760]	@ (8005714 <__ieee754_rem_pio2+0x324>)
 800541a:	4598      	cmp	r8, r3
 800541c:	d878      	bhi.n	8005510 <__ieee754_rem_pio2+0x120>
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	4dbd      	ldr	r5, [pc, #756]	@ (8005718 <__ieee754_rem_pio2+0x328>)
 8005422:	2b00      	cmp	r3, #0
 8005424:	4630      	mov	r0, r6
 8005426:	a3ac      	add	r3, pc, #688	@ (adr r3, 80056d8 <__ieee754_rem_pio2+0x2e8>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	4639      	mov	r1, r7
 800542e:	dd38      	ble.n	80054a2 <__ieee754_rem_pio2+0xb2>
 8005430:	f7fa ff42 	bl	80002b8 <__aeabi_dsub>
 8005434:	45a8      	cmp	r8, r5
 8005436:	4606      	mov	r6, r0
 8005438:	460f      	mov	r7, r1
 800543a:	d01a      	beq.n	8005472 <__ieee754_rem_pio2+0x82>
 800543c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x2f0>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fa ff39 	bl	80002b8 <__aeabi_dsub>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4680      	mov	r8, r0
 800544c:	4689      	mov	r9, r1
 800544e:	4630      	mov	r0, r6
 8005450:	4639      	mov	r1, r7
 8005452:	f7fa ff31 	bl	80002b8 <__aeabi_dsub>
 8005456:	a3a2      	add	r3, pc, #648	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x2f0>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fa ff2c 	bl	80002b8 <__aeabi_dsub>
 8005460:	e9c4 8900 	strd	r8, r9, [r4]
 8005464:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005468:	2501      	movs	r5, #1
 800546a:	4628      	mov	r0, r5
 800546c:	b00d      	add	sp, #52	@ 0x34
 800546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005472:	a39d      	add	r3, pc, #628	@ (adr r3, 80056e8 <__ieee754_rem_pio2+0x2f8>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fa ff1e 	bl	80002b8 <__aeabi_dsub>
 800547c:	a39c      	add	r3, pc, #624	@ (adr r3, 80056f0 <__ieee754_rem_pio2+0x300>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	4606      	mov	r6, r0
 8005484:	460f      	mov	r7, r1
 8005486:	f7fa ff17 	bl	80002b8 <__aeabi_dsub>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4680      	mov	r8, r0
 8005490:	4689      	mov	r9, r1
 8005492:	4630      	mov	r0, r6
 8005494:	4639      	mov	r1, r7
 8005496:	f7fa ff0f 	bl	80002b8 <__aeabi_dsub>
 800549a:	a395      	add	r3, pc, #596	@ (adr r3, 80056f0 <__ieee754_rem_pio2+0x300>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	e7dc      	b.n	800545c <__ieee754_rem_pio2+0x6c>
 80054a2:	f7fa ff0b 	bl	80002bc <__adddf3>
 80054a6:	45a8      	cmp	r8, r5
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	d018      	beq.n	80054e0 <__ieee754_rem_pio2+0xf0>
 80054ae:	a38c      	add	r3, pc, #560	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x2f0>)
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f7fa ff02 	bl	80002bc <__adddf3>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4680      	mov	r8, r0
 80054be:	4689      	mov	r9, r1
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fa fef8 	bl	80002b8 <__aeabi_dsub>
 80054c8:	a385      	add	r3, pc, #532	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x2f0>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fa fef5 	bl	80002bc <__adddf3>
 80054d2:	f04f 35ff 	mov.w	r5, #4294967295
 80054d6:	e9c4 8900 	strd	r8, r9, [r4]
 80054da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054de:	e7c4      	b.n	800546a <__ieee754_rem_pio2+0x7a>
 80054e0:	a381      	add	r3, pc, #516	@ (adr r3, 80056e8 <__ieee754_rem_pio2+0x2f8>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fa fee9 	bl	80002bc <__adddf3>
 80054ea:	a381      	add	r3, pc, #516	@ (adr r3, 80056f0 <__ieee754_rem_pio2+0x300>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	4606      	mov	r6, r0
 80054f2:	460f      	mov	r7, r1
 80054f4:	f7fa fee2 	bl	80002bc <__adddf3>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4680      	mov	r8, r0
 80054fe:	4689      	mov	r9, r1
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fa fed8 	bl	80002b8 <__aeabi_dsub>
 8005508:	a379      	add	r3, pc, #484	@ (adr r3, 80056f0 <__ieee754_rem_pio2+0x300>)
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	e7de      	b.n	80054ce <__ieee754_rem_pio2+0xde>
 8005510:	4b82      	ldr	r3, [pc, #520]	@ (800571c <__ieee754_rem_pio2+0x32c>)
 8005512:	4598      	cmp	r8, r3
 8005514:	f200 80d1 	bhi.w	80056ba <__ieee754_rem_pio2+0x2ca>
 8005518:	f000 f966 	bl	80057e8 <fabs>
 800551c:	ec57 6b10 	vmov	r6, r7, d0
 8005520:	a375      	add	r3, pc, #468	@ (adr r3, 80056f8 <__ieee754_rem_pio2+0x308>)
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fb f87d 	bl	8000628 <__aeabi_dmul>
 800552e:	4b7c      	ldr	r3, [pc, #496]	@ (8005720 <__ieee754_rem_pio2+0x330>)
 8005530:	2200      	movs	r2, #0
 8005532:	f7fa fec3 	bl	80002bc <__adddf3>
 8005536:	f7fb fb11 	bl	8000b5c <__aeabi_d2iz>
 800553a:	4605      	mov	r5, r0
 800553c:	f7fb f80a 	bl	8000554 <__aeabi_i2d>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005548:	a363      	add	r3, pc, #396	@ (adr r3, 80056d8 <__ieee754_rem_pio2+0x2e8>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f86b 	bl	8000628 <__aeabi_dmul>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4630      	mov	r0, r6
 8005558:	4639      	mov	r1, r7
 800555a:	f7fa fead 	bl	80002b8 <__aeabi_dsub>
 800555e:	a360      	add	r3, pc, #384	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x2f0>)
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	4682      	mov	sl, r0
 8005566:	468b      	mov	fp, r1
 8005568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800556c:	f7fb f85c 	bl	8000628 <__aeabi_dmul>
 8005570:	2d1f      	cmp	r5, #31
 8005572:	4606      	mov	r6, r0
 8005574:	460f      	mov	r7, r1
 8005576:	dc0c      	bgt.n	8005592 <__ieee754_rem_pio2+0x1a2>
 8005578:	4b6a      	ldr	r3, [pc, #424]	@ (8005724 <__ieee754_rem_pio2+0x334>)
 800557a:	1e6a      	subs	r2, r5, #1
 800557c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005580:	4543      	cmp	r3, r8
 8005582:	d006      	beq.n	8005592 <__ieee754_rem_pio2+0x1a2>
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	4650      	mov	r0, sl
 800558a:	4659      	mov	r1, fp
 800558c:	f7fa fe94 	bl	80002b8 <__aeabi_dsub>
 8005590:	e00e      	b.n	80055b0 <__ieee754_rem_pio2+0x1c0>
 8005592:	463b      	mov	r3, r7
 8005594:	4632      	mov	r2, r6
 8005596:	4650      	mov	r0, sl
 8005598:	4659      	mov	r1, fp
 800559a:	f7fa fe8d 	bl	80002b8 <__aeabi_dsub>
 800559e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80055a2:	9305      	str	r3, [sp, #20]
 80055a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	dc02      	bgt.n	80055b6 <__ieee754_rem_pio2+0x1c6>
 80055b0:	e9c4 0100 	strd	r0, r1, [r4]
 80055b4:	e039      	b.n	800562a <__ieee754_rem_pio2+0x23a>
 80055b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80056e8 <__ieee754_rem_pio2+0x2f8>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c0:	f7fb f832 	bl	8000628 <__aeabi_dmul>
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4650      	mov	r0, sl
 80055ce:	4659      	mov	r1, fp
 80055d0:	f7fa fe72 	bl	80002b8 <__aeabi_dsub>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4680      	mov	r8, r0
 80055da:	4689      	mov	r9, r1
 80055dc:	4650      	mov	r0, sl
 80055de:	4659      	mov	r1, fp
 80055e0:	f7fa fe6a 	bl	80002b8 <__aeabi_dsub>
 80055e4:	4632      	mov	r2, r6
 80055e6:	463b      	mov	r3, r7
 80055e8:	f7fa fe66 	bl	80002b8 <__aeabi_dsub>
 80055ec:	a340      	add	r3, pc, #256	@ (adr r3, 80056f0 <__ieee754_rem_pio2+0x300>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	4606      	mov	r6, r0
 80055f4:	460f      	mov	r7, r1
 80055f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fa:	f7fb f815 	bl	8000628 <__aeabi_dmul>
 80055fe:	4632      	mov	r2, r6
 8005600:	463b      	mov	r3, r7
 8005602:	f7fa fe59 	bl	80002b8 <__aeabi_dsub>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4606      	mov	r6, r0
 800560c:	460f      	mov	r7, r1
 800560e:	4640      	mov	r0, r8
 8005610:	4649      	mov	r1, r9
 8005612:	f7fa fe51 	bl	80002b8 <__aeabi_dsub>
 8005616:	9a05      	ldr	r2, [sp, #20]
 8005618:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b31      	cmp	r3, #49	@ 0x31
 8005620:	dc20      	bgt.n	8005664 <__ieee754_rem_pio2+0x274>
 8005622:	e9c4 0100 	strd	r0, r1, [r4]
 8005626:	46c2      	mov	sl, r8
 8005628:	46cb      	mov	fp, r9
 800562a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800562e:	4650      	mov	r0, sl
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	4659      	mov	r1, fp
 8005636:	f7fa fe3f 	bl	80002b8 <__aeabi_dsub>
 800563a:	463b      	mov	r3, r7
 800563c:	4632      	mov	r2, r6
 800563e:	f7fa fe3b 	bl	80002b8 <__aeabi_dsub>
 8005642:	9b04      	ldr	r3, [sp, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800564a:	f6bf af0e 	bge.w	800546a <__ieee754_rem_pio2+0x7a>
 800564e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005658:	f8c4 8000 	str.w	r8, [r4]
 800565c:	60a0      	str	r0, [r4, #8]
 800565e:	60e3      	str	r3, [r4, #12]
 8005660:	426d      	negs	r5, r5
 8005662:	e702      	b.n	800546a <__ieee754_rem_pio2+0x7a>
 8005664:	a326      	add	r3, pc, #152	@ (adr r3, 8005700 <__ieee754_rem_pio2+0x310>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800566e:	f7fa ffdb 	bl	8000628 <__aeabi_dmul>
 8005672:	4606      	mov	r6, r0
 8005674:	460f      	mov	r7, r1
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4640      	mov	r0, r8
 800567c:	4649      	mov	r1, r9
 800567e:	f7fa fe1b 	bl	80002b8 <__aeabi_dsub>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4682      	mov	sl, r0
 8005688:	468b      	mov	fp, r1
 800568a:	4640      	mov	r0, r8
 800568c:	4649      	mov	r1, r9
 800568e:	f7fa fe13 	bl	80002b8 <__aeabi_dsub>
 8005692:	4632      	mov	r2, r6
 8005694:	463b      	mov	r3, r7
 8005696:	f7fa fe0f 	bl	80002b8 <__aeabi_dsub>
 800569a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005708 <__ieee754_rem_pio2+0x318>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	4606      	mov	r6, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056a8:	f7fa ffbe 	bl	8000628 <__aeabi_dmul>
 80056ac:	4632      	mov	r2, r6
 80056ae:	463b      	mov	r3, r7
 80056b0:	f7fa fe02 	bl	80002b8 <__aeabi_dsub>
 80056b4:	4606      	mov	r6, r0
 80056b6:	460f      	mov	r7, r1
 80056b8:	e764      	b.n	8005584 <__ieee754_rem_pio2+0x194>
 80056ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <__ieee754_rem_pio2+0x338>)
 80056bc:	4598      	cmp	r8, r3
 80056be:	d935      	bls.n	800572c <__ieee754_rem_pio2+0x33c>
 80056c0:	4632      	mov	r2, r6
 80056c2:	463b      	mov	r3, r7
 80056c4:	4630      	mov	r0, r6
 80056c6:	4639      	mov	r1, r7
 80056c8:	f7fa fdf6 	bl	80002b8 <__aeabi_dsub>
 80056cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056d0:	e9c4 0100 	strd	r0, r1, [r4]
 80056d4:	e69e      	b.n	8005414 <__ieee754_rem_pio2+0x24>
 80056d6:	bf00      	nop
 80056d8:	54400000 	.word	0x54400000
 80056dc:	3ff921fb 	.word	0x3ff921fb
 80056e0:	1a626331 	.word	0x1a626331
 80056e4:	3dd0b461 	.word	0x3dd0b461
 80056e8:	1a600000 	.word	0x1a600000
 80056ec:	3dd0b461 	.word	0x3dd0b461
 80056f0:	2e037073 	.word	0x2e037073
 80056f4:	3ba3198a 	.word	0x3ba3198a
 80056f8:	6dc9c883 	.word	0x6dc9c883
 80056fc:	3fe45f30 	.word	0x3fe45f30
 8005700:	2e000000 	.word	0x2e000000
 8005704:	3ba3198a 	.word	0x3ba3198a
 8005708:	252049c1 	.word	0x252049c1
 800570c:	397b839a 	.word	0x397b839a
 8005710:	3fe921fb 	.word	0x3fe921fb
 8005714:	4002d97b 	.word	0x4002d97b
 8005718:	3ff921fb 	.word	0x3ff921fb
 800571c:	413921fb 	.word	0x413921fb
 8005720:	3fe00000 	.word	0x3fe00000
 8005724:	08007098 	.word	0x08007098
 8005728:	7fefffff 	.word	0x7fefffff
 800572c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005730:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005734:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005738:	4630      	mov	r0, r6
 800573a:	460f      	mov	r7, r1
 800573c:	f7fb fa0e 	bl	8000b5c <__aeabi_d2iz>
 8005740:	f7fa ff08 	bl	8000554 <__aeabi_i2d>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4630      	mov	r0, r6
 800574a:	4639      	mov	r1, r7
 800574c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005750:	f7fa fdb2 	bl	80002b8 <__aeabi_dsub>
 8005754:	4b22      	ldr	r3, [pc, #136]	@ (80057e0 <__ieee754_rem_pio2+0x3f0>)
 8005756:	2200      	movs	r2, #0
 8005758:	f7fa ff66 	bl	8000628 <__aeabi_dmul>
 800575c:	460f      	mov	r7, r1
 800575e:	4606      	mov	r6, r0
 8005760:	f7fb f9fc 	bl	8000b5c <__aeabi_d2iz>
 8005764:	f7fa fef6 	bl	8000554 <__aeabi_i2d>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005774:	f7fa fda0 	bl	80002b8 <__aeabi_dsub>
 8005778:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <__ieee754_rem_pio2+0x3f0>)
 800577a:	2200      	movs	r2, #0
 800577c:	f7fa ff54 	bl	8000628 <__aeabi_dmul>
 8005780:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005784:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005788:	f04f 0803 	mov.w	r8, #3
 800578c:	2600      	movs	r6, #0
 800578e:	2700      	movs	r7, #0
 8005790:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005794:	4632      	mov	r2, r6
 8005796:	463b      	mov	r3, r7
 8005798:	46c2      	mov	sl, r8
 800579a:	f108 38ff 	add.w	r8, r8, #4294967295
 800579e:	f7fb f9ab 	bl	8000af8 <__aeabi_dcmpeq>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d1f4      	bne.n	8005790 <__ieee754_rem_pio2+0x3a0>
 80057a6:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <__ieee754_rem_pio2+0x3f4>)
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	2302      	movs	r3, #2
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	462a      	mov	r2, r5
 80057b0:	4653      	mov	r3, sl
 80057b2:	4621      	mov	r1, r4
 80057b4:	a806      	add	r0, sp, #24
 80057b6:	f000 f81f 	bl	80057f8 <__kernel_rem_pio2>
 80057ba:	9b04      	ldr	r3, [sp, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	4605      	mov	r5, r0
 80057c0:	f6bf ae53 	bge.w	800546a <__ieee754_rem_pio2+0x7a>
 80057c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80057c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057cc:	e9c4 2300 	strd	r2, r3, [r4]
 80057d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80057d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80057dc:	e740      	b.n	8005660 <__ieee754_rem_pio2+0x270>
 80057de:	bf00      	nop
 80057e0:	41700000 	.word	0x41700000
 80057e4:	08007118 	.word	0x08007118

080057e8 <fabs>:
 80057e8:	ec51 0b10 	vmov	r0, r1, d0
 80057ec:	4602      	mov	r2, r0
 80057ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80057f2:	ec43 2b10 	vmov	d0, r2, r3
 80057f6:	4770      	bx	lr

080057f8 <__kernel_rem_pio2>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	ed2d 8b02 	vpush	{d8}
 8005800:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005804:	f112 0f14 	cmn.w	r2, #20
 8005808:	9306      	str	r3, [sp, #24]
 800580a:	9104      	str	r1, [sp, #16]
 800580c:	4bbe      	ldr	r3, [pc, #760]	@ (8005b08 <__kernel_rem_pio2+0x310>)
 800580e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005810:	9008      	str	r0, [sp, #32]
 8005812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	9b06      	ldr	r3, [sp, #24]
 800581a:	f103 33ff 	add.w	r3, r3, #4294967295
 800581e:	bfa8      	it	ge
 8005820:	1ed4      	subge	r4, r2, #3
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	bfb2      	itee	lt
 8005826:	2400      	movlt	r4, #0
 8005828:	2318      	movge	r3, #24
 800582a:	fb94 f4f3 	sdivge	r4, r4, r3
 800582e:	f06f 0317 	mvn.w	r3, #23
 8005832:	fb04 3303 	mla	r3, r4, r3, r3
 8005836:	eb03 0b02 	add.w	fp, r3, r2
 800583a:	9b00      	ldr	r3, [sp, #0]
 800583c:	9a05      	ldr	r2, [sp, #20]
 800583e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005af8 <__kernel_rem_pio2+0x300>
 8005842:	eb03 0802 	add.w	r8, r3, r2
 8005846:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005848:	1aa7      	subs	r7, r4, r2
 800584a:	ae20      	add	r6, sp, #128	@ 0x80
 800584c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005850:	2500      	movs	r5, #0
 8005852:	4545      	cmp	r5, r8
 8005854:	dd13      	ble.n	800587e <__kernel_rem_pio2+0x86>
 8005856:	9b06      	ldr	r3, [sp, #24]
 8005858:	aa20      	add	r2, sp, #128	@ 0x80
 800585a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800585e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	4598      	cmp	r8, r3
 800586a:	dc31      	bgt.n	80058d0 <__kernel_rem_pio2+0xd8>
 800586c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005af8 <__kernel_rem_pio2+0x300>
 8005870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005874:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005878:	462f      	mov	r7, r5
 800587a:	2600      	movs	r6, #0
 800587c:	e01b      	b.n	80058b6 <__kernel_rem_pio2+0xbe>
 800587e:	42ef      	cmn	r7, r5
 8005880:	d407      	bmi.n	8005892 <__kernel_rem_pio2+0x9a>
 8005882:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005886:	f7fa fe65 	bl	8000554 <__aeabi_i2d>
 800588a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800588e:	3501      	adds	r5, #1
 8005890:	e7df      	b.n	8005852 <__kernel_rem_pio2+0x5a>
 8005892:	ec51 0b18 	vmov	r0, r1, d8
 8005896:	e7f8      	b.n	800588a <__kernel_rem_pio2+0x92>
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80058a0:	f7fa fec2 	bl	8000628 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ac:	f7fa fd06 	bl	80002bc <__adddf3>
 80058b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b4:	3601      	adds	r6, #1
 80058b6:	9b05      	ldr	r3, [sp, #20]
 80058b8:	429e      	cmp	r6, r3
 80058ba:	f1a7 0708 	sub.w	r7, r7, #8
 80058be:	ddeb      	ble.n	8005898 <__kernel_rem_pio2+0xa0>
 80058c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058c4:	f108 0801 	add.w	r8, r8, #1
 80058c8:	ecaa 7b02 	vstmia	sl!, {d7}
 80058cc:	3508      	adds	r5, #8
 80058ce:	e7ca      	b.n	8005866 <__kernel_rem_pio2+0x6e>
 80058d0:	9b00      	ldr	r3, [sp, #0]
 80058d2:	f8dd 8000 	ldr.w	r8, [sp]
 80058d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80058d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80058de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80058e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80058e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80058ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ec:	ab98      	add	r3, sp, #608	@ 0x260
 80058ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80058f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80058f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80058fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80058fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005902:	46a1      	mov	r9, r4
 8005904:	46c2      	mov	sl, r8
 8005906:	f1ba 0f00 	cmp.w	sl, #0
 800590a:	f1a5 0508 	sub.w	r5, r5, #8
 800590e:	dc77      	bgt.n	8005a00 <__kernel_rem_pio2+0x208>
 8005910:	4658      	mov	r0, fp
 8005912:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005916:	f000 fac7 	bl	8005ea8 <scalbn>
 800591a:	ec57 6b10 	vmov	r6, r7, d0
 800591e:	2200      	movs	r2, #0
 8005920:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005924:	4630      	mov	r0, r6
 8005926:	4639      	mov	r1, r7
 8005928:	f7fa fe7e 	bl	8000628 <__aeabi_dmul>
 800592c:	ec41 0b10 	vmov	d0, r0, r1
 8005930:	f000 fb3a 	bl	8005fa8 <floor>
 8005934:	4b75      	ldr	r3, [pc, #468]	@ (8005b0c <__kernel_rem_pio2+0x314>)
 8005936:	ec51 0b10 	vmov	r0, r1, d0
 800593a:	2200      	movs	r2, #0
 800593c:	f7fa fe74 	bl	8000628 <__aeabi_dmul>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fa fcb6 	bl	80002b8 <__aeabi_dsub>
 800594c:	460f      	mov	r7, r1
 800594e:	4606      	mov	r6, r0
 8005950:	f7fb f904 	bl	8000b5c <__aeabi_d2iz>
 8005954:	9002      	str	r0, [sp, #8]
 8005956:	f7fa fdfd 	bl	8000554 <__aeabi_i2d>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4630      	mov	r0, r6
 8005960:	4639      	mov	r1, r7
 8005962:	f7fa fca9 	bl	80002b8 <__aeabi_dsub>
 8005966:	f1bb 0f00 	cmp.w	fp, #0
 800596a:	4606      	mov	r6, r0
 800596c:	460f      	mov	r7, r1
 800596e:	dd6c      	ble.n	8005a4a <__kernel_rem_pio2+0x252>
 8005970:	f108 31ff 	add.w	r1, r8, #4294967295
 8005974:	ab0c      	add	r3, sp, #48	@ 0x30
 8005976:	9d02      	ldr	r5, [sp, #8]
 8005978:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800597c:	f1cb 0018 	rsb	r0, fp, #24
 8005980:	fa43 f200 	asr.w	r2, r3, r0
 8005984:	4415      	add	r5, r2
 8005986:	4082      	lsls	r2, r0
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	aa0c      	add	r2, sp, #48	@ 0x30
 800598c:	9502      	str	r5, [sp, #8]
 800598e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005992:	f1cb 0217 	rsb	r2, fp, #23
 8005996:	fa43 f902 	asr.w	r9, r3, r2
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	dd64      	ble.n	8005a6a <__kernel_rem_pio2+0x272>
 80059a0:	9b02      	ldr	r3, [sp, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	3301      	adds	r3, #1
 80059a6:	9302      	str	r3, [sp, #8]
 80059a8:	4615      	mov	r5, r2
 80059aa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80059ae:	4590      	cmp	r8, r2
 80059b0:	f300 80b8 	bgt.w	8005b24 <__kernel_rem_pio2+0x32c>
 80059b4:	f1bb 0f00 	cmp.w	fp, #0
 80059b8:	dd07      	ble.n	80059ca <__kernel_rem_pio2+0x1d2>
 80059ba:	f1bb 0f01 	cmp.w	fp, #1
 80059be:	f000 80bf 	beq.w	8005b40 <__kernel_rem_pio2+0x348>
 80059c2:	f1bb 0f02 	cmp.w	fp, #2
 80059c6:	f000 80c6 	beq.w	8005b56 <__kernel_rem_pio2+0x35e>
 80059ca:	f1b9 0f02 	cmp.w	r9, #2
 80059ce:	d14c      	bne.n	8005a6a <__kernel_rem_pio2+0x272>
 80059d0:	4632      	mov	r2, r6
 80059d2:	463b      	mov	r3, r7
 80059d4:	494e      	ldr	r1, [pc, #312]	@ (8005b10 <__kernel_rem_pio2+0x318>)
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7fa fc6e 	bl	80002b8 <__aeabi_dsub>
 80059dc:	4606      	mov	r6, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	d042      	beq.n	8005a6a <__kernel_rem_pio2+0x272>
 80059e4:	4658      	mov	r0, fp
 80059e6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005b00 <__kernel_rem_pio2+0x308>
 80059ea:	f000 fa5d 	bl	8005ea8 <scalbn>
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	ec53 2b10 	vmov	r2, r3, d0
 80059f6:	f7fa fc5f 	bl	80002b8 <__aeabi_dsub>
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	e034      	b.n	8005a6a <__kernel_rem_pio2+0x272>
 8005a00:	4b44      	ldr	r3, [pc, #272]	@ (8005b14 <__kernel_rem_pio2+0x31c>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a08:	f7fa fe0e 	bl	8000628 <__aeabi_dmul>
 8005a0c:	f7fb f8a6 	bl	8000b5c <__aeabi_d2iz>
 8005a10:	f7fa fda0 	bl	8000554 <__aeabi_i2d>
 8005a14:	4b40      	ldr	r3, [pc, #256]	@ (8005b18 <__kernel_rem_pio2+0x320>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	4606      	mov	r6, r0
 8005a1a:	460f      	mov	r7, r1
 8005a1c:	f7fa fe04 	bl	8000628 <__aeabi_dmul>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a28:	f7fa fc46 	bl	80002b8 <__aeabi_dsub>
 8005a2c:	f7fb f896 	bl	8000b5c <__aeabi_d2iz>
 8005a30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a34:	f849 0b04 	str.w	r0, [r9], #4
 8005a38:	4639      	mov	r1, r7
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7fa fc3e 	bl	80002bc <__adddf3>
 8005a40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a48:	e75d      	b.n	8005906 <__kernel_rem_pio2+0x10e>
 8005a4a:	d107      	bne.n	8005a5c <__kernel_rem_pio2+0x264>
 8005a4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005a50:	aa0c      	add	r2, sp, #48	@ 0x30
 8005a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a56:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005a5a:	e79e      	b.n	800599a <__kernel_rem_pio2+0x1a2>
 8005a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b1c <__kernel_rem_pio2+0x324>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f7fb f868 	bl	8000b34 <__aeabi_dcmpge>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d143      	bne.n	8005af0 <__kernel_rem_pio2+0x2f8>
 8005a68:	4681      	mov	r9, r0
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4630      	mov	r0, r6
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fb f841 	bl	8000af8 <__aeabi_dcmpeq>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f000 80bf 	beq.w	8005bfa <__kernel_rem_pio2+0x402>
 8005a7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005a80:	2200      	movs	r2, #0
 8005a82:	9900      	ldr	r1, [sp, #0]
 8005a84:	428b      	cmp	r3, r1
 8005a86:	da6e      	bge.n	8005b66 <__kernel_rem_pio2+0x36e>
 8005a88:	2a00      	cmp	r2, #0
 8005a8a:	f000 8089 	beq.w	8005ba0 <__kernel_rem_pio2+0x3a8>
 8005a8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a92:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a94:	f1ab 0b18 	sub.w	fp, fp, #24
 8005a98:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f6      	beq.n	8005a8e <__kernel_rem_pio2+0x296>
 8005aa0:	4658      	mov	r0, fp
 8005aa2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005b00 <__kernel_rem_pio2+0x308>
 8005aa6:	f000 f9ff 	bl	8005ea8 <scalbn>
 8005aaa:	f108 0301 	add.w	r3, r8, #1
 8005aae:	00da      	lsls	r2, r3, #3
 8005ab0:	9205      	str	r2, [sp, #20]
 8005ab2:	ec55 4b10 	vmov	r4, r5, d0
 8005ab6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005ab8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005b14 <__kernel_rem_pio2+0x31c>
 8005abc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005ac0:	4646      	mov	r6, r8
 8005ac2:	f04f 0a00 	mov.w	sl, #0
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	f280 80cf 	bge.w	8005c6a <__kernel_rem_pio2+0x472>
 8005acc:	4644      	mov	r4, r8
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	f2c0 80fd 	blt.w	8005cce <__kernel_rem_pio2+0x4d6>
 8005ad4:	4b12      	ldr	r3, [pc, #72]	@ (8005b20 <__kernel_rem_pio2+0x328>)
 8005ad6:	461f      	mov	r7, r3
 8005ad8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005ada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ade:	9306      	str	r3, [sp, #24]
 8005ae0:	f04f 0a00 	mov.w	sl, #0
 8005ae4:	f04f 0b00 	mov.w	fp, #0
 8005ae8:	2600      	movs	r6, #0
 8005aea:	eba8 0504 	sub.w	r5, r8, r4
 8005aee:	e0e2      	b.n	8005cb6 <__kernel_rem_pio2+0x4be>
 8005af0:	f04f 0902 	mov.w	r9, #2
 8005af4:	e754      	b.n	80059a0 <__kernel_rem_pio2+0x1a8>
 8005af6:	bf00      	nop
	...
 8005b04:	3ff00000 	.word	0x3ff00000
 8005b08:	08007260 	.word	0x08007260
 8005b0c:	40200000 	.word	0x40200000
 8005b10:	3ff00000 	.word	0x3ff00000
 8005b14:	3e700000 	.word	0x3e700000
 8005b18:	41700000 	.word	0x41700000
 8005b1c:	3fe00000 	.word	0x3fe00000
 8005b20:	08007220 	.word	0x08007220
 8005b24:	f854 3b04 	ldr.w	r3, [r4], #4
 8005b28:	b945      	cbnz	r5, 8005b3c <__kernel_rem_pio2+0x344>
 8005b2a:	b123      	cbz	r3, 8005b36 <__kernel_rem_pio2+0x33e>
 8005b2c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005b30:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b34:	2301      	movs	r3, #1
 8005b36:	3201      	adds	r2, #1
 8005b38:	461d      	mov	r5, r3
 8005b3a:	e738      	b.n	80059ae <__kernel_rem_pio2+0x1b6>
 8005b3c:	1acb      	subs	r3, r1, r3
 8005b3e:	e7f7      	b.n	8005b30 <__kernel_rem_pio2+0x338>
 8005b40:	f108 32ff 	add.w	r2, r8, #4294967295
 8005b44:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005b4e:	a90c      	add	r1, sp, #48	@ 0x30
 8005b50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b54:	e739      	b.n	80059ca <__kernel_rem_pio2+0x1d2>
 8005b56:	f108 32ff 	add.w	r2, r8, #4294967295
 8005b5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b64:	e7f3      	b.n	8005b4e <__kernel_rem_pio2+0x356>
 8005b66:	a90c      	add	r1, sp, #48	@ 0x30
 8005b68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	e787      	b.n	8005a82 <__kernel_rem_pio2+0x28a>
 8005b72:	3401      	adds	r4, #1
 8005b74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	d0fa      	beq.n	8005b72 <__kernel_rem_pio2+0x37a>
 8005b7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005b82:	eb0d 0503 	add.w	r5, sp, r3
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	aa20      	add	r2, sp, #128	@ 0x80
 8005b8a:	4443      	add	r3, r8
 8005b8c:	f108 0701 	add.w	r7, r8, #1
 8005b90:	3d98      	subs	r5, #152	@ 0x98
 8005b92:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005b96:	4444      	add	r4, r8
 8005b98:	42bc      	cmp	r4, r7
 8005b9a:	da04      	bge.n	8005ba6 <__kernel_rem_pio2+0x3ae>
 8005b9c:	46a0      	mov	r8, r4
 8005b9e:	e6a2      	b.n	80058e6 <__kernel_rem_pio2+0xee>
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba2:	2401      	movs	r4, #1
 8005ba4:	e7e6      	b.n	8005b74 <__kernel_rem_pio2+0x37c>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005bac:	f7fa fcd2 	bl	8000554 <__aeabi_i2d>
 8005bb0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005e78 <__kernel_rem_pio2+0x680>
 8005bb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005bbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bc0:	46b2      	mov	sl, r6
 8005bc2:	f04f 0800 	mov.w	r8, #0
 8005bc6:	9b05      	ldr	r3, [sp, #20]
 8005bc8:	4598      	cmp	r8, r3
 8005bca:	dd05      	ble.n	8005bd8 <__kernel_rem_pio2+0x3e0>
 8005bcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bd0:	3701      	adds	r7, #1
 8005bd2:	eca5 7b02 	vstmia	r5!, {d7}
 8005bd6:	e7df      	b.n	8005b98 <__kernel_rem_pio2+0x3a0>
 8005bd8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005bdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005be0:	f7fa fd22 	bl	8000628 <__aeabi_dmul>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bec:	f7fa fb66 	bl	80002bc <__adddf3>
 8005bf0:	f108 0801 	add.w	r8, r8, #1
 8005bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bf8:	e7e5      	b.n	8005bc6 <__kernel_rem_pio2+0x3ce>
 8005bfa:	f1cb 0000 	rsb	r0, fp, #0
 8005bfe:	ec47 6b10 	vmov	d0, r6, r7
 8005c02:	f000 f951 	bl	8005ea8 <scalbn>
 8005c06:	ec55 4b10 	vmov	r4, r5, d0
 8005c0a:	4b9d      	ldr	r3, [pc, #628]	@ (8005e80 <__kernel_rem_pio2+0x688>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7fa ff8f 	bl	8000b34 <__aeabi_dcmpge>
 8005c16:	b300      	cbz	r0, 8005c5a <__kernel_rem_pio2+0x462>
 8005c18:	4b9a      	ldr	r3, [pc, #616]	@ (8005e84 <__kernel_rem_pio2+0x68c>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7fa fd02 	bl	8000628 <__aeabi_dmul>
 8005c24:	f7fa ff9a 	bl	8000b5c <__aeabi_d2iz>
 8005c28:	4606      	mov	r6, r0
 8005c2a:	f7fa fc93 	bl	8000554 <__aeabi_i2d>
 8005c2e:	4b94      	ldr	r3, [pc, #592]	@ (8005e80 <__kernel_rem_pio2+0x688>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	f7fa fcf9 	bl	8000628 <__aeabi_dmul>
 8005c36:	460b      	mov	r3, r1
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7fa fb3b 	bl	80002b8 <__aeabi_dsub>
 8005c42:	f7fa ff8b 	bl	8000b5c <__aeabi_d2iz>
 8005c46:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c48:	f10b 0b18 	add.w	fp, fp, #24
 8005c4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005c50:	f108 0801 	add.w	r8, r8, #1
 8005c54:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005c58:	e722      	b.n	8005aa0 <__kernel_rem_pio2+0x2a8>
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fa ff7d 	bl	8000b5c <__aeabi_d2iz>
 8005c62:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005c68:	e71a      	b.n	8005aa0 <__kernel_rem_pio2+0x2a8>
 8005c6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005c70:	f7fa fc70 	bl	8000554 <__aeabi_i2d>
 8005c74:	4622      	mov	r2, r4
 8005c76:	462b      	mov	r3, r5
 8005c78:	f7fa fcd6 	bl	8000628 <__aeabi_dmul>
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005c82:	465b      	mov	r3, fp
 8005c84:	4620      	mov	r0, r4
 8005c86:	4629      	mov	r1, r5
 8005c88:	f7fa fcce 	bl	8000628 <__aeabi_dmul>
 8005c8c:	3e01      	subs	r6, #1
 8005c8e:	4604      	mov	r4, r0
 8005c90:	460d      	mov	r5, r1
 8005c92:	e718      	b.n	8005ac6 <__kernel_rem_pio2+0x2ce>
 8005c94:	9906      	ldr	r1, [sp, #24]
 8005c96:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005c9a:	9106      	str	r1, [sp, #24]
 8005c9c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005ca0:	f7fa fcc2 	bl	8000628 <__aeabi_dmul>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4650      	mov	r0, sl
 8005caa:	4659      	mov	r1, fp
 8005cac:	f7fa fb06 	bl	80002bc <__adddf3>
 8005cb0:	3601      	adds	r6, #1
 8005cb2:	4682      	mov	sl, r0
 8005cb4:	468b      	mov	fp, r1
 8005cb6:	9b00      	ldr	r3, [sp, #0]
 8005cb8:	429e      	cmp	r6, r3
 8005cba:	dc01      	bgt.n	8005cc0 <__kernel_rem_pio2+0x4c8>
 8005cbc:	42b5      	cmp	r5, r6
 8005cbe:	dae9      	bge.n	8005c94 <__kernel_rem_pio2+0x49c>
 8005cc0:	ab48      	add	r3, sp, #288	@ 0x120
 8005cc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005cc6:	e9c5 ab00 	strd	sl, fp, [r5]
 8005cca:	3c01      	subs	r4, #1
 8005ccc:	e6ff      	b.n	8005ace <__kernel_rem_pio2+0x2d6>
 8005cce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	dc0b      	bgt.n	8005cec <__kernel_rem_pio2+0x4f4>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dc39      	bgt.n	8005d4c <__kernel_rem_pio2+0x554>
 8005cd8:	d05d      	beq.n	8005d96 <__kernel_rem_pio2+0x59e>
 8005cda:	9b02      	ldr	r3, [sp, #8]
 8005cdc:	f003 0007 	and.w	r0, r3, #7
 8005ce0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005ce4:	ecbd 8b02 	vpop	{d8}
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d1f3      	bne.n	8005cda <__kernel_rem_pio2+0x4e2>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005cf8:	eb0d 0403 	add.w	r4, sp, r3
 8005cfc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005d00:	4625      	mov	r5, r4
 8005d02:	46c2      	mov	sl, r8
 8005d04:	f1ba 0f00 	cmp.w	sl, #0
 8005d08:	f1a5 0508 	sub.w	r5, r5, #8
 8005d0c:	dc6b      	bgt.n	8005de6 <__kernel_rem_pio2+0x5ee>
 8005d0e:	4645      	mov	r5, r8
 8005d10:	2d01      	cmp	r5, #1
 8005d12:	f1a4 0408 	sub.w	r4, r4, #8
 8005d16:	f300 8087 	bgt.w	8005e28 <__kernel_rem_pio2+0x630>
 8005d1a:	9c05      	ldr	r4, [sp, #20]
 8005d1c:	ab48      	add	r3, sp, #288	@ 0x120
 8005d1e:	441c      	add	r4, r3
 8005d20:	2000      	movs	r0, #0
 8005d22:	2100      	movs	r1, #0
 8005d24:	f1b8 0f01 	cmp.w	r8, #1
 8005d28:	f300 809c 	bgt.w	8005e64 <__kernel_rem_pio2+0x66c>
 8005d2c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005d30:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005d34:	f1b9 0f00 	cmp.w	r9, #0
 8005d38:	f040 80a6 	bne.w	8005e88 <__kernel_rem_pio2+0x690>
 8005d3c:	9b04      	ldr	r3, [sp, #16]
 8005d3e:	e9c3 7800 	strd	r7, r8, [r3]
 8005d42:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005d46:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005d4a:	e7c6      	b.n	8005cda <__kernel_rem_pio2+0x4e2>
 8005d4c:	9d05      	ldr	r5, [sp, #20]
 8005d4e:	ab48      	add	r3, sp, #288	@ 0x120
 8005d50:	441d      	add	r5, r3
 8005d52:	4644      	mov	r4, r8
 8005d54:	2000      	movs	r0, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	2c00      	cmp	r4, #0
 8005d5a:	da35      	bge.n	8005dc8 <__kernel_rem_pio2+0x5d0>
 8005d5c:	f1b9 0f00 	cmp.w	r9, #0
 8005d60:	d038      	beq.n	8005dd4 <__kernel_rem_pio2+0x5dc>
 8005d62:	4602      	mov	r2, r0
 8005d64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d68:	9c04      	ldr	r4, [sp, #16]
 8005d6a:	e9c4 2300 	strd	r2, r3, [r4]
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005d76:	f7fa fa9f 	bl	80002b8 <__aeabi_dsub>
 8005d7a:	ad4a      	add	r5, sp, #296	@ 0x128
 8005d7c:	2401      	movs	r4, #1
 8005d7e:	45a0      	cmp	r8, r4
 8005d80:	da2b      	bge.n	8005dda <__kernel_rem_pio2+0x5e2>
 8005d82:	f1b9 0f00 	cmp.w	r9, #0
 8005d86:	d002      	beq.n	8005d8e <__kernel_rem_pio2+0x596>
 8005d88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005d94:	e7a1      	b.n	8005cda <__kernel_rem_pio2+0x4e2>
 8005d96:	9c05      	ldr	r4, [sp, #20]
 8005d98:	ab48      	add	r3, sp, #288	@ 0x120
 8005d9a:	441c      	add	r4, r3
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f1b8 0f00 	cmp.w	r8, #0
 8005da4:	da09      	bge.n	8005dba <__kernel_rem_pio2+0x5c2>
 8005da6:	f1b9 0f00 	cmp.w	r9, #0
 8005daa:	d002      	beq.n	8005db2 <__kernel_rem_pio2+0x5ba>
 8005dac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005db0:	4619      	mov	r1, r3
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	e9c3 0100 	strd	r0, r1, [r3]
 8005db8:	e78f      	b.n	8005cda <__kernel_rem_pio2+0x4e2>
 8005dba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005dbe:	f7fa fa7d 	bl	80002bc <__adddf3>
 8005dc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005dc6:	e7eb      	b.n	8005da0 <__kernel_rem_pio2+0x5a8>
 8005dc8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005dcc:	f7fa fa76 	bl	80002bc <__adddf3>
 8005dd0:	3c01      	subs	r4, #1
 8005dd2:	e7c1      	b.n	8005d58 <__kernel_rem_pio2+0x560>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	e7c6      	b.n	8005d68 <__kernel_rem_pio2+0x570>
 8005dda:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005dde:	f7fa fa6d 	bl	80002bc <__adddf3>
 8005de2:	3401      	adds	r4, #1
 8005de4:	e7cb      	b.n	8005d7e <__kernel_rem_pio2+0x586>
 8005de6:	ed95 7b00 	vldr	d7, [r5]
 8005dea:	ed8d 7b00 	vstr	d7, [sp]
 8005dee:	ed95 7b02 	vldr	d7, [r5, #8]
 8005df2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005df6:	ec53 2b17 	vmov	r2, r3, d7
 8005dfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005dfe:	f7fa fa5d 	bl	80002bc <__adddf3>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e0e:	f7fa fa53 	bl	80002b8 <__aeabi_dsub>
 8005e12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e16:	f7fa fa51 	bl	80002bc <__adddf3>
 8005e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e1e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005e22:	e9c5 6700 	strd	r6, r7, [r5]
 8005e26:	e76d      	b.n	8005d04 <__kernel_rem_pio2+0x50c>
 8005e28:	ed94 7b00 	vldr	d7, [r4]
 8005e2c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005e30:	ec51 0b17 	vmov	r0, r1, d7
 8005e34:	4652      	mov	r2, sl
 8005e36:	465b      	mov	r3, fp
 8005e38:	ed8d 7b00 	vstr	d7, [sp]
 8005e3c:	f7fa fa3e 	bl	80002bc <__adddf3>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4606      	mov	r6, r0
 8005e46:	460f      	mov	r7, r1
 8005e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e4c:	f7fa fa34 	bl	80002b8 <__aeabi_dsub>
 8005e50:	4652      	mov	r2, sl
 8005e52:	465b      	mov	r3, fp
 8005e54:	f7fa fa32 	bl	80002bc <__adddf3>
 8005e58:	3d01      	subs	r5, #1
 8005e5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e5e:	e9c4 6700 	strd	r6, r7, [r4]
 8005e62:	e755      	b.n	8005d10 <__kernel_rem_pio2+0x518>
 8005e64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e68:	f7fa fa28 	bl	80002bc <__adddf3>
 8005e6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e70:	e758      	b.n	8005d24 <__kernel_rem_pio2+0x52c>
 8005e72:	bf00      	nop
 8005e74:	f3af 8000 	nop.w
	...
 8005e80:	41700000 	.word	0x41700000
 8005e84:	3e700000 	.word	0x3e700000
 8005e88:	9b04      	ldr	r3, [sp, #16]
 8005e8a:	9a04      	ldr	r2, [sp, #16]
 8005e8c:	601f      	str	r7, [r3, #0]
 8005e8e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005e92:	605c      	str	r4, [r3, #4]
 8005e94:	609d      	str	r5, [r3, #8]
 8005e96:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e9a:	60d3      	str	r3, [r2, #12]
 8005e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ea0:	6110      	str	r0, [r2, #16]
 8005ea2:	6153      	str	r3, [r2, #20]
 8005ea4:	e719      	b.n	8005cda <__kernel_rem_pio2+0x4e2>
 8005ea6:	bf00      	nop

08005ea8 <scalbn>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	ec55 4b10 	vmov	r4, r5, d0
 8005eae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	b991      	cbnz	r1, 8005ede <scalbn+0x36>
 8005eb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005ebc:	4323      	orrs	r3, r4
 8005ebe:	d03d      	beq.n	8005f3c <scalbn+0x94>
 8005ec0:	4b35      	ldr	r3, [pc, #212]	@ (8005f98 <scalbn+0xf0>)
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f7fa fbae 	bl	8000628 <__aeabi_dmul>
 8005ecc:	4b33      	ldr	r3, [pc, #204]	@ (8005f9c <scalbn+0xf4>)
 8005ece:	429e      	cmp	r6, r3
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	da0f      	bge.n	8005ef6 <scalbn+0x4e>
 8005ed6:	a328      	add	r3, pc, #160	@ (adr r3, 8005f78 <scalbn+0xd0>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	e01e      	b.n	8005f1c <scalbn+0x74>
 8005ede:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005ee2:	4291      	cmp	r1, r2
 8005ee4:	d10b      	bne.n	8005efe <scalbn+0x56>
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa f9e6 	bl	80002bc <__adddf3>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	e022      	b.n	8005f3c <scalbn+0x94>
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005efc:	3936      	subs	r1, #54	@ 0x36
 8005efe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005f02:	4296      	cmp	r6, r2
 8005f04:	dd0d      	ble.n	8005f22 <scalbn+0x7a>
 8005f06:	2d00      	cmp	r5, #0
 8005f08:	a11d      	add	r1, pc, #116	@ (adr r1, 8005f80 <scalbn+0xd8>)
 8005f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f0e:	da02      	bge.n	8005f16 <scalbn+0x6e>
 8005f10:	a11d      	add	r1, pc, #116	@ (adr r1, 8005f88 <scalbn+0xe0>)
 8005f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f16:	a31a      	add	r3, pc, #104	@ (adr r3, 8005f80 <scalbn+0xd8>)
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	f7fa fb84 	bl	8000628 <__aeabi_dmul>
 8005f20:	e7e6      	b.n	8005ef0 <scalbn+0x48>
 8005f22:	1872      	adds	r2, r6, r1
 8005f24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005f28:	428a      	cmp	r2, r1
 8005f2a:	dcec      	bgt.n	8005f06 <scalbn+0x5e>
 8005f2c:	2a00      	cmp	r2, #0
 8005f2e:	dd08      	ble.n	8005f42 <scalbn+0x9a>
 8005f30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005f34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005f38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f3c:	ec45 4b10 	vmov	d0, r4, r5
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
 8005f42:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005f46:	da08      	bge.n	8005f5a <scalbn+0xb2>
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	a10b      	add	r1, pc, #44	@ (adr r1, 8005f78 <scalbn+0xd0>)
 8005f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f50:	dac1      	bge.n	8005ed6 <scalbn+0x2e>
 8005f52:	a10f      	add	r1, pc, #60	@ (adr r1, 8005f90 <scalbn+0xe8>)
 8005f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f58:	e7bd      	b.n	8005ed6 <scalbn+0x2e>
 8005f5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005f5e:	3236      	adds	r2, #54	@ 0x36
 8005f60:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005f64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <scalbn+0xf8>)
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	2200      	movs	r2, #0
 8005f70:	e7d4      	b.n	8005f1c <scalbn+0x74>
 8005f72:	bf00      	nop
 8005f74:	f3af 8000 	nop.w
 8005f78:	c2f8f359 	.word	0xc2f8f359
 8005f7c:	01a56e1f 	.word	0x01a56e1f
 8005f80:	8800759c 	.word	0x8800759c
 8005f84:	7e37e43c 	.word	0x7e37e43c
 8005f88:	8800759c 	.word	0x8800759c
 8005f8c:	fe37e43c 	.word	0xfe37e43c
 8005f90:	c2f8f359 	.word	0xc2f8f359
 8005f94:	81a56e1f 	.word	0x81a56e1f
 8005f98:	43500000 	.word	0x43500000
 8005f9c:	ffff3cb0 	.word	0xffff3cb0
 8005fa0:	3c900000 	.word	0x3c900000
 8005fa4:	00000000 	.word	0x00000000

08005fa8 <floor>:
 8005fa8:	ec51 0b10 	vmov	r0, r1, d0
 8005fac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005fb8:	2e13      	cmp	r6, #19
 8005fba:	460c      	mov	r4, r1
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	dc34      	bgt.n	800602c <floor+0x84>
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	da17      	bge.n	8005ff6 <floor+0x4e>
 8005fc6:	a332      	add	r3, pc, #200	@ (adr r3, 8006090 <floor+0xe8>)
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f7fa f976 	bl	80002bc <__adddf3>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f7fa fdb8 	bl	8000b48 <__aeabi_dcmpgt>
 8005fd8:	b150      	cbz	r0, 8005ff0 <floor+0x48>
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	da55      	bge.n	800608a <floor+0xe2>
 8005fde:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005fe2:	432c      	orrs	r4, r5
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	42ac      	cmp	r4, r5
 8005fe8:	4c2b      	ldr	r4, [pc, #172]	@ (8006098 <floor+0xf0>)
 8005fea:	bf08      	it	eq
 8005fec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	e023      	b.n	800603e <floor+0x96>
 8005ff6:	4f29      	ldr	r7, [pc, #164]	@ (800609c <floor+0xf4>)
 8005ff8:	4137      	asrs	r7, r6
 8005ffa:	ea01 0307 	and.w	r3, r1, r7
 8005ffe:	4303      	orrs	r3, r0
 8006000:	d01d      	beq.n	800603e <floor+0x96>
 8006002:	a323      	add	r3, pc, #140	@ (adr r3, 8006090 <floor+0xe8>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa f958 	bl	80002bc <__adddf3>
 800600c:	2200      	movs	r2, #0
 800600e:	2300      	movs	r3, #0
 8006010:	f7fa fd9a 	bl	8000b48 <__aeabi_dcmpgt>
 8006014:	2800      	cmp	r0, #0
 8006016:	d0eb      	beq.n	8005ff0 <floor+0x48>
 8006018:	2c00      	cmp	r4, #0
 800601a:	bfbe      	ittt	lt
 800601c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006020:	4133      	asrlt	r3, r6
 8006022:	18e4      	addlt	r4, r4, r3
 8006024:	ea24 0407 	bic.w	r4, r4, r7
 8006028:	2500      	movs	r5, #0
 800602a:	e7e1      	b.n	8005ff0 <floor+0x48>
 800602c:	2e33      	cmp	r6, #51	@ 0x33
 800602e:	dd0a      	ble.n	8006046 <floor+0x9e>
 8006030:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006034:	d103      	bne.n	800603e <floor+0x96>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	f7fa f93f 	bl	80002bc <__adddf3>
 800603e:	ec41 0b10 	vmov	d0, r0, r1
 8006042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006046:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800604a:	f04f 37ff 	mov.w	r7, #4294967295
 800604e:	40df      	lsrs	r7, r3
 8006050:	4207      	tst	r7, r0
 8006052:	d0f4      	beq.n	800603e <floor+0x96>
 8006054:	a30e      	add	r3, pc, #56	@ (adr r3, 8006090 <floor+0xe8>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa f92f 	bl	80002bc <__adddf3>
 800605e:	2200      	movs	r2, #0
 8006060:	2300      	movs	r3, #0
 8006062:	f7fa fd71 	bl	8000b48 <__aeabi_dcmpgt>
 8006066:	2800      	cmp	r0, #0
 8006068:	d0c2      	beq.n	8005ff0 <floor+0x48>
 800606a:	2c00      	cmp	r4, #0
 800606c:	da0a      	bge.n	8006084 <floor+0xdc>
 800606e:	2e14      	cmp	r6, #20
 8006070:	d101      	bne.n	8006076 <floor+0xce>
 8006072:	3401      	adds	r4, #1
 8006074:	e006      	b.n	8006084 <floor+0xdc>
 8006076:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800607a:	2301      	movs	r3, #1
 800607c:	40b3      	lsls	r3, r6
 800607e:	441d      	add	r5, r3
 8006080:	4545      	cmp	r5, r8
 8006082:	d3f6      	bcc.n	8006072 <floor+0xca>
 8006084:	ea25 0507 	bic.w	r5, r5, r7
 8006088:	e7b2      	b.n	8005ff0 <floor+0x48>
 800608a:	2500      	movs	r5, #0
 800608c:	462c      	mov	r4, r5
 800608e:	e7af      	b.n	8005ff0 <floor+0x48>
 8006090:	8800759c 	.word	0x8800759c
 8006094:	7e37e43c 	.word	0x7e37e43c
 8006098:	bff00000 	.word	0xbff00000
 800609c:	000fffff 	.word	0x000fffff

080060a0 <rand>:
 80060a0:	4b16      	ldr	r3, [pc, #88]	@ (80060fc <rand+0x5c>)
 80060a2:	b510      	push	{r4, lr}
 80060a4:	681c      	ldr	r4, [r3, #0]
 80060a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80060a8:	b9b3      	cbnz	r3, 80060d8 <rand+0x38>
 80060aa:	2018      	movs	r0, #24
 80060ac:	f000 fa20 	bl	80064f0 <malloc>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6320      	str	r0, [r4, #48]	@ 0x30
 80060b4:	b920      	cbnz	r0, 80060c0 <rand+0x20>
 80060b6:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <rand+0x60>)
 80060b8:	4812      	ldr	r0, [pc, #72]	@ (8006104 <rand+0x64>)
 80060ba:	2152      	movs	r1, #82	@ 0x52
 80060bc:	f000 f9b0 	bl	8006420 <__assert_func>
 80060c0:	4911      	ldr	r1, [pc, #68]	@ (8006108 <rand+0x68>)
 80060c2:	4b12      	ldr	r3, [pc, #72]	@ (800610c <rand+0x6c>)
 80060c4:	e9c0 1300 	strd	r1, r3, [r0]
 80060c8:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <rand+0x70>)
 80060ca:	6083      	str	r3, [r0, #8]
 80060cc:	230b      	movs	r3, #11
 80060ce:	8183      	strh	r3, [r0, #12]
 80060d0:	2100      	movs	r1, #0
 80060d2:	2001      	movs	r0, #1
 80060d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80060d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060da:	480e      	ldr	r0, [pc, #56]	@ (8006114 <rand+0x74>)
 80060dc:	690b      	ldr	r3, [r1, #16]
 80060de:	694c      	ldr	r4, [r1, #20]
 80060e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006118 <rand+0x78>)
 80060e2:	4358      	muls	r0, r3
 80060e4:	fb02 0004 	mla	r0, r2, r4, r0
 80060e8:	fba3 3202 	umull	r3, r2, r3, r2
 80060ec:	3301      	adds	r3, #1
 80060ee:	eb40 0002 	adc.w	r0, r0, r2
 80060f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80060f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80060fa:	bd10      	pop	{r4, pc}
 80060fc:	2000001c 	.word	0x2000001c
 8006100:	08007270 	.word	0x08007270
 8006104:	08007287 	.word	0x08007287
 8006108:	abcd330e 	.word	0xabcd330e
 800610c:	e66d1234 	.word	0xe66d1234
 8006110:	0005deec 	.word	0x0005deec
 8006114:	5851f42d 	.word	0x5851f42d
 8006118:	4c957f2d 	.word	0x4c957f2d

0800611c <std>:
 800611c:	2300      	movs	r3, #0
 800611e:	b510      	push	{r4, lr}
 8006120:	4604      	mov	r4, r0
 8006122:	e9c0 3300 	strd	r3, r3, [r0]
 8006126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612a:	6083      	str	r3, [r0, #8]
 800612c:	8181      	strh	r1, [r0, #12]
 800612e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006130:	81c2      	strh	r2, [r0, #14]
 8006132:	6183      	str	r3, [r0, #24]
 8006134:	4619      	mov	r1, r3
 8006136:	2208      	movs	r2, #8
 8006138:	305c      	adds	r0, #92	@ 0x5c
 800613a:	f000 f8f4 	bl	8006326 <memset>
 800613e:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <std+0x58>)
 8006140:	6263      	str	r3, [r4, #36]	@ 0x24
 8006142:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <std+0x5c>)
 8006144:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006146:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <std+0x60>)
 8006148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <std+0x64>)
 800614c:	6323      	str	r3, [r4, #48]	@ 0x30
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <std+0x68>)
 8006150:	6224      	str	r4, [r4, #32]
 8006152:	429c      	cmp	r4, r3
 8006154:	d006      	beq.n	8006164 <std+0x48>
 8006156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800615a:	4294      	cmp	r4, r2
 800615c:	d002      	beq.n	8006164 <std+0x48>
 800615e:	33d0      	adds	r3, #208	@ 0xd0
 8006160:	429c      	cmp	r4, r3
 8006162:	d105      	bne.n	8006170 <std+0x54>
 8006164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800616c:	f000 b954 	b.w	8006418 <__retarget_lock_init_recursive>
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	080062a1 	.word	0x080062a1
 8006178:	080062c3 	.word	0x080062c3
 800617c:	080062fb 	.word	0x080062fb
 8006180:	0800631f 	.word	0x0800631f
 8006184:	200003dc 	.word	0x200003dc

08006188 <stdio_exit_handler>:
 8006188:	4a02      	ldr	r2, [pc, #8]	@ (8006194 <stdio_exit_handler+0xc>)
 800618a:	4903      	ldr	r1, [pc, #12]	@ (8006198 <stdio_exit_handler+0x10>)
 800618c:	4803      	ldr	r0, [pc, #12]	@ (800619c <stdio_exit_handler+0x14>)
 800618e:	f000 b869 	b.w	8006264 <_fwalk_sglue>
 8006192:	bf00      	nop
 8006194:	20000010 	.word	0x20000010
 8006198:	08006765 	.word	0x08006765
 800619c:	20000020 	.word	0x20000020

080061a0 <cleanup_stdio>:
 80061a0:	6841      	ldr	r1, [r0, #4]
 80061a2:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <cleanup_stdio+0x34>)
 80061a4:	4299      	cmp	r1, r3
 80061a6:	b510      	push	{r4, lr}
 80061a8:	4604      	mov	r4, r0
 80061aa:	d001      	beq.n	80061b0 <cleanup_stdio+0x10>
 80061ac:	f000 fada 	bl	8006764 <_fflush_r>
 80061b0:	68a1      	ldr	r1, [r4, #8]
 80061b2:	4b09      	ldr	r3, [pc, #36]	@ (80061d8 <cleanup_stdio+0x38>)
 80061b4:	4299      	cmp	r1, r3
 80061b6:	d002      	beq.n	80061be <cleanup_stdio+0x1e>
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 fad3 	bl	8006764 <_fflush_r>
 80061be:	68e1      	ldr	r1, [r4, #12]
 80061c0:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <cleanup_stdio+0x3c>)
 80061c2:	4299      	cmp	r1, r3
 80061c4:	d004      	beq.n	80061d0 <cleanup_stdio+0x30>
 80061c6:	4620      	mov	r0, r4
 80061c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061cc:	f000 baca 	b.w	8006764 <_fflush_r>
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	bf00      	nop
 80061d4:	200003dc 	.word	0x200003dc
 80061d8:	20000444 	.word	0x20000444
 80061dc:	200004ac 	.word	0x200004ac

080061e0 <global_stdio_init.part.0>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006210 <global_stdio_init.part.0+0x30>)
 80061e4:	4c0b      	ldr	r4, [pc, #44]	@ (8006214 <global_stdio_init.part.0+0x34>)
 80061e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006218 <global_stdio_init.part.0+0x38>)
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	4620      	mov	r0, r4
 80061ec:	2200      	movs	r2, #0
 80061ee:	2104      	movs	r1, #4
 80061f0:	f7ff ff94 	bl	800611c <std>
 80061f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061f8:	2201      	movs	r2, #1
 80061fa:	2109      	movs	r1, #9
 80061fc:	f7ff ff8e 	bl	800611c <std>
 8006200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006204:	2202      	movs	r2, #2
 8006206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620a:	2112      	movs	r1, #18
 800620c:	f7ff bf86 	b.w	800611c <std>
 8006210:	20000514 	.word	0x20000514
 8006214:	200003dc 	.word	0x200003dc
 8006218:	08006189 	.word	0x08006189

0800621c <__sfp_lock_acquire>:
 800621c:	4801      	ldr	r0, [pc, #4]	@ (8006224 <__sfp_lock_acquire+0x8>)
 800621e:	f000 b8fc 	b.w	800641a <__retarget_lock_acquire_recursive>
 8006222:	bf00      	nop
 8006224:	2000051d 	.word	0x2000051d

08006228 <__sfp_lock_release>:
 8006228:	4801      	ldr	r0, [pc, #4]	@ (8006230 <__sfp_lock_release+0x8>)
 800622a:	f000 b8f7 	b.w	800641c <__retarget_lock_release_recursive>
 800622e:	bf00      	nop
 8006230:	2000051d 	.word	0x2000051d

08006234 <__sinit>:
 8006234:	b510      	push	{r4, lr}
 8006236:	4604      	mov	r4, r0
 8006238:	f7ff fff0 	bl	800621c <__sfp_lock_acquire>
 800623c:	6a23      	ldr	r3, [r4, #32]
 800623e:	b11b      	cbz	r3, 8006248 <__sinit+0x14>
 8006240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006244:	f7ff bff0 	b.w	8006228 <__sfp_lock_release>
 8006248:	4b04      	ldr	r3, [pc, #16]	@ (800625c <__sinit+0x28>)
 800624a:	6223      	str	r3, [r4, #32]
 800624c:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <__sinit+0x2c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f5      	bne.n	8006240 <__sinit+0xc>
 8006254:	f7ff ffc4 	bl	80061e0 <global_stdio_init.part.0>
 8006258:	e7f2      	b.n	8006240 <__sinit+0xc>
 800625a:	bf00      	nop
 800625c:	080061a1 	.word	0x080061a1
 8006260:	20000514 	.word	0x20000514

08006264 <_fwalk_sglue>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	4607      	mov	r7, r0
 800626a:	4688      	mov	r8, r1
 800626c:	4614      	mov	r4, r2
 800626e:	2600      	movs	r6, #0
 8006270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006274:	f1b9 0901 	subs.w	r9, r9, #1
 8006278:	d505      	bpl.n	8006286 <_fwalk_sglue+0x22>
 800627a:	6824      	ldr	r4, [r4, #0]
 800627c:	2c00      	cmp	r4, #0
 800627e:	d1f7      	bne.n	8006270 <_fwalk_sglue+0xc>
 8006280:	4630      	mov	r0, r6
 8006282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006286:	89ab      	ldrh	r3, [r5, #12]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d907      	bls.n	800629c <_fwalk_sglue+0x38>
 800628c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006290:	3301      	adds	r3, #1
 8006292:	d003      	beq.n	800629c <_fwalk_sglue+0x38>
 8006294:	4629      	mov	r1, r5
 8006296:	4638      	mov	r0, r7
 8006298:	47c0      	blx	r8
 800629a:	4306      	orrs	r6, r0
 800629c:	3568      	adds	r5, #104	@ 0x68
 800629e:	e7e9      	b.n	8006274 <_fwalk_sglue+0x10>

080062a0 <__sread>:
 80062a0:	b510      	push	{r4, lr}
 80062a2:	460c      	mov	r4, r1
 80062a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a8:	f000 f868 	bl	800637c <_read_r>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	bfab      	itete	ge
 80062b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062b2:	89a3      	ldrhlt	r3, [r4, #12]
 80062b4:	181b      	addge	r3, r3, r0
 80062b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062ba:	bfac      	ite	ge
 80062bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062be:	81a3      	strhlt	r3, [r4, #12]
 80062c0:	bd10      	pop	{r4, pc}

080062c2 <__swrite>:
 80062c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c6:	461f      	mov	r7, r3
 80062c8:	898b      	ldrh	r3, [r1, #12]
 80062ca:	05db      	lsls	r3, r3, #23
 80062cc:	4605      	mov	r5, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	4616      	mov	r6, r2
 80062d2:	d505      	bpl.n	80062e0 <__swrite+0x1e>
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	2302      	movs	r3, #2
 80062da:	2200      	movs	r2, #0
 80062dc:	f000 f83c 	bl	8006358 <_lseek_r>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	4632      	mov	r2, r6
 80062ee:	463b      	mov	r3, r7
 80062f0:	4628      	mov	r0, r5
 80062f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	f000 b853 	b.w	80063a0 <_write_r>

080062fa <__sseek>:
 80062fa:	b510      	push	{r4, lr}
 80062fc:	460c      	mov	r4, r1
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	f000 f829 	bl	8006358 <_lseek_r>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	bf15      	itete	ne
 800630c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800630e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006316:	81a3      	strheq	r3, [r4, #12]
 8006318:	bf18      	it	ne
 800631a:	81a3      	strhne	r3, [r4, #12]
 800631c:	bd10      	pop	{r4, pc}

0800631e <__sclose>:
 800631e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006322:	f000 b809 	b.w	8006338 <_close_r>

08006326 <memset>:
 8006326:	4402      	add	r2, r0
 8006328:	4603      	mov	r3, r0
 800632a:	4293      	cmp	r3, r2
 800632c:	d100      	bne.n	8006330 <memset+0xa>
 800632e:	4770      	bx	lr
 8006330:	f803 1b01 	strb.w	r1, [r3], #1
 8006334:	e7f9      	b.n	800632a <memset+0x4>
	...

08006338 <_close_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d06      	ldr	r5, [pc, #24]	@ (8006354 <_close_r+0x1c>)
 800633c:	2300      	movs	r3, #0
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fb fc64 	bl	8001c10 <_close>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_close_r+0x1a>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_close_r+0x1a>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20000518 	.word	0x20000518

08006358 <_lseek_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d07      	ldr	r5, [pc, #28]	@ (8006378 <_lseek_r+0x20>)
 800635c:	4604      	mov	r4, r0
 800635e:	4608      	mov	r0, r1
 8006360:	4611      	mov	r1, r2
 8006362:	2200      	movs	r2, #0
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	f7fb fc79 	bl	8001c5e <_lseek>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_lseek_r+0x1e>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_lseek_r+0x1e>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20000518 	.word	0x20000518

0800637c <_read_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d07      	ldr	r5, [pc, #28]	@ (800639c <_read_r+0x20>)
 8006380:	4604      	mov	r4, r0
 8006382:	4608      	mov	r0, r1
 8006384:	4611      	mov	r1, r2
 8006386:	2200      	movs	r2, #0
 8006388:	602a      	str	r2, [r5, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	f7fb fc07 	bl	8001b9e <_read>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_read_r+0x1e>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_read_r+0x1e>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000518 	.word	0x20000518

080063a0 <_write_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	@ (80063c0 <_write_r+0x20>)
 80063a4:	4604      	mov	r4, r0
 80063a6:	4608      	mov	r0, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fb fc12 	bl	8001bd8 <_write>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_write_r+0x1e>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_write_r+0x1e>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	20000518 	.word	0x20000518

080063c4 <__errno>:
 80063c4:	4b01      	ldr	r3, [pc, #4]	@ (80063cc <__errno+0x8>)
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	2000001c 	.word	0x2000001c

080063d0 <__libc_init_array>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006408 <__libc_init_array+0x38>)
 80063d4:	4c0d      	ldr	r4, [pc, #52]	@ (800640c <__libc_init_array+0x3c>)
 80063d6:	1b64      	subs	r4, r4, r5
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	2600      	movs	r6, #0
 80063dc:	42a6      	cmp	r6, r4
 80063de:	d109      	bne.n	80063f4 <__libc_init_array+0x24>
 80063e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006410 <__libc_init_array+0x40>)
 80063e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006414 <__libc_init_array+0x44>)
 80063e4:	f000 fe3a 	bl	800705c <_init>
 80063e8:	1b64      	subs	r4, r4, r5
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	2600      	movs	r6, #0
 80063ee:	42a6      	cmp	r6, r4
 80063f0:	d105      	bne.n	80063fe <__libc_init_array+0x2e>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f8:	4798      	blx	r3
 80063fa:	3601      	adds	r6, #1
 80063fc:	e7ee      	b.n	80063dc <__libc_init_array+0xc>
 80063fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006402:	4798      	blx	r3
 8006404:	3601      	adds	r6, #1
 8006406:	e7f2      	b.n	80063ee <__libc_init_array+0x1e>
 8006408:	08007358 	.word	0x08007358
 800640c:	08007358 	.word	0x08007358
 8006410:	08007358 	.word	0x08007358
 8006414:	0800735c 	.word	0x0800735c

08006418 <__retarget_lock_init_recursive>:
 8006418:	4770      	bx	lr

0800641a <__retarget_lock_acquire_recursive>:
 800641a:	4770      	bx	lr

0800641c <__retarget_lock_release_recursive>:
 800641c:	4770      	bx	lr
	...

08006420 <__assert_func>:
 8006420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006422:	4614      	mov	r4, r2
 8006424:	461a      	mov	r2, r3
 8006426:	4b09      	ldr	r3, [pc, #36]	@ (800644c <__assert_func+0x2c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4605      	mov	r5, r0
 800642c:	68d8      	ldr	r0, [r3, #12]
 800642e:	b954      	cbnz	r4, 8006446 <__assert_func+0x26>
 8006430:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <__assert_func+0x30>)
 8006432:	461c      	mov	r4, r3
 8006434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006438:	9100      	str	r1, [sp, #0]
 800643a:	462b      	mov	r3, r5
 800643c:	4905      	ldr	r1, [pc, #20]	@ (8006454 <__assert_func+0x34>)
 800643e:	f000 f9b9 	bl	80067b4 <fiprintf>
 8006442:	f000 f9d9 	bl	80067f8 <abort>
 8006446:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <__assert_func+0x38>)
 8006448:	e7f4      	b.n	8006434 <__assert_func+0x14>
 800644a:	bf00      	nop
 800644c:	2000001c 	.word	0x2000001c
 8006450:	0800731a 	.word	0x0800731a
 8006454:	080072ec 	.word	0x080072ec
 8006458:	080072df 	.word	0x080072df

0800645c <_free_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4605      	mov	r5, r0
 8006460:	2900      	cmp	r1, #0
 8006462:	d041      	beq.n	80064e8 <_free_r+0x8c>
 8006464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006468:	1f0c      	subs	r4, r1, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	bfb8      	it	lt
 800646e:	18e4      	addlt	r4, r4, r3
 8006470:	f000 f8e8 	bl	8006644 <__malloc_lock>
 8006474:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <_free_r+0x90>)
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	b933      	cbnz	r3, 8006488 <_free_r+0x2c>
 800647a:	6063      	str	r3, [r4, #4]
 800647c:	6014      	str	r4, [r2, #0]
 800647e:	4628      	mov	r0, r5
 8006480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006484:	f000 b8e4 	b.w	8006650 <__malloc_unlock>
 8006488:	42a3      	cmp	r3, r4
 800648a:	d908      	bls.n	800649e <_free_r+0x42>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	1821      	adds	r1, r4, r0
 8006490:	428b      	cmp	r3, r1
 8006492:	bf01      	itttt	eq
 8006494:	6819      	ldreq	r1, [r3, #0]
 8006496:	685b      	ldreq	r3, [r3, #4]
 8006498:	1809      	addeq	r1, r1, r0
 800649a:	6021      	streq	r1, [r4, #0]
 800649c:	e7ed      	b.n	800647a <_free_r+0x1e>
 800649e:	461a      	mov	r2, r3
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	b10b      	cbz	r3, 80064a8 <_free_r+0x4c>
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	d9fa      	bls.n	800649e <_free_r+0x42>
 80064a8:	6811      	ldr	r1, [r2, #0]
 80064aa:	1850      	adds	r0, r2, r1
 80064ac:	42a0      	cmp	r0, r4
 80064ae:	d10b      	bne.n	80064c8 <_free_r+0x6c>
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	4401      	add	r1, r0
 80064b4:	1850      	adds	r0, r2, r1
 80064b6:	4283      	cmp	r3, r0
 80064b8:	6011      	str	r1, [r2, #0]
 80064ba:	d1e0      	bne.n	800647e <_free_r+0x22>
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	6053      	str	r3, [r2, #4]
 80064c2:	4408      	add	r0, r1
 80064c4:	6010      	str	r0, [r2, #0]
 80064c6:	e7da      	b.n	800647e <_free_r+0x22>
 80064c8:	d902      	bls.n	80064d0 <_free_r+0x74>
 80064ca:	230c      	movs	r3, #12
 80064cc:	602b      	str	r3, [r5, #0]
 80064ce:	e7d6      	b.n	800647e <_free_r+0x22>
 80064d0:	6820      	ldr	r0, [r4, #0]
 80064d2:	1821      	adds	r1, r4, r0
 80064d4:	428b      	cmp	r3, r1
 80064d6:	bf04      	itt	eq
 80064d8:	6819      	ldreq	r1, [r3, #0]
 80064da:	685b      	ldreq	r3, [r3, #4]
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	bf04      	itt	eq
 80064e0:	1809      	addeq	r1, r1, r0
 80064e2:	6021      	streq	r1, [r4, #0]
 80064e4:	6054      	str	r4, [r2, #4]
 80064e6:	e7ca      	b.n	800647e <_free_r+0x22>
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
 80064ea:	bf00      	nop
 80064ec:	20000524 	.word	0x20000524

080064f0 <malloc>:
 80064f0:	4b02      	ldr	r3, [pc, #8]	@ (80064fc <malloc+0xc>)
 80064f2:	4601      	mov	r1, r0
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	f000 b825 	b.w	8006544 <_malloc_r>
 80064fa:	bf00      	nop
 80064fc:	2000001c 	.word	0x2000001c

08006500 <sbrk_aligned>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	4e0f      	ldr	r6, [pc, #60]	@ (8006540 <sbrk_aligned+0x40>)
 8006504:	460c      	mov	r4, r1
 8006506:	6831      	ldr	r1, [r6, #0]
 8006508:	4605      	mov	r5, r0
 800650a:	b911      	cbnz	r1, 8006512 <sbrk_aligned+0x12>
 800650c:	f000 f964 	bl	80067d8 <_sbrk_r>
 8006510:	6030      	str	r0, [r6, #0]
 8006512:	4621      	mov	r1, r4
 8006514:	4628      	mov	r0, r5
 8006516:	f000 f95f 	bl	80067d8 <_sbrk_r>
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	d103      	bne.n	8006526 <sbrk_aligned+0x26>
 800651e:	f04f 34ff 	mov.w	r4, #4294967295
 8006522:	4620      	mov	r0, r4
 8006524:	bd70      	pop	{r4, r5, r6, pc}
 8006526:	1cc4      	adds	r4, r0, #3
 8006528:	f024 0403 	bic.w	r4, r4, #3
 800652c:	42a0      	cmp	r0, r4
 800652e:	d0f8      	beq.n	8006522 <sbrk_aligned+0x22>
 8006530:	1a21      	subs	r1, r4, r0
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f950 	bl	80067d8 <_sbrk_r>
 8006538:	3001      	adds	r0, #1
 800653a:	d1f2      	bne.n	8006522 <sbrk_aligned+0x22>
 800653c:	e7ef      	b.n	800651e <sbrk_aligned+0x1e>
 800653e:	bf00      	nop
 8006540:	20000520 	.word	0x20000520

08006544 <_malloc_r>:
 8006544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006548:	1ccd      	adds	r5, r1, #3
 800654a:	f025 0503 	bic.w	r5, r5, #3
 800654e:	3508      	adds	r5, #8
 8006550:	2d0c      	cmp	r5, #12
 8006552:	bf38      	it	cc
 8006554:	250c      	movcc	r5, #12
 8006556:	2d00      	cmp	r5, #0
 8006558:	4606      	mov	r6, r0
 800655a:	db01      	blt.n	8006560 <_malloc_r+0x1c>
 800655c:	42a9      	cmp	r1, r5
 800655e:	d904      	bls.n	800656a <_malloc_r+0x26>
 8006560:	230c      	movs	r3, #12
 8006562:	6033      	str	r3, [r6, #0]
 8006564:	2000      	movs	r0, #0
 8006566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006640 <_malloc_r+0xfc>
 800656e:	f000 f869 	bl	8006644 <__malloc_lock>
 8006572:	f8d8 3000 	ldr.w	r3, [r8]
 8006576:	461c      	mov	r4, r3
 8006578:	bb44      	cbnz	r4, 80065cc <_malloc_r+0x88>
 800657a:	4629      	mov	r1, r5
 800657c:	4630      	mov	r0, r6
 800657e:	f7ff ffbf 	bl	8006500 <sbrk_aligned>
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	4604      	mov	r4, r0
 8006586:	d158      	bne.n	800663a <_malloc_r+0xf6>
 8006588:	f8d8 4000 	ldr.w	r4, [r8]
 800658c:	4627      	mov	r7, r4
 800658e:	2f00      	cmp	r7, #0
 8006590:	d143      	bne.n	800661a <_malloc_r+0xd6>
 8006592:	2c00      	cmp	r4, #0
 8006594:	d04b      	beq.n	800662e <_malloc_r+0xea>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	4639      	mov	r1, r7
 800659a:	4630      	mov	r0, r6
 800659c:	eb04 0903 	add.w	r9, r4, r3
 80065a0:	f000 f91a 	bl	80067d8 <_sbrk_r>
 80065a4:	4581      	cmp	r9, r0
 80065a6:	d142      	bne.n	800662e <_malloc_r+0xea>
 80065a8:	6821      	ldr	r1, [r4, #0]
 80065aa:	1a6d      	subs	r5, r5, r1
 80065ac:	4629      	mov	r1, r5
 80065ae:	4630      	mov	r0, r6
 80065b0:	f7ff ffa6 	bl	8006500 <sbrk_aligned>
 80065b4:	3001      	adds	r0, #1
 80065b6:	d03a      	beq.n	800662e <_malloc_r+0xea>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	442b      	add	r3, r5
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	f8d8 3000 	ldr.w	r3, [r8]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	bb62      	cbnz	r2, 8006620 <_malloc_r+0xdc>
 80065c6:	f8c8 7000 	str.w	r7, [r8]
 80065ca:	e00f      	b.n	80065ec <_malloc_r+0xa8>
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	1b52      	subs	r2, r2, r5
 80065d0:	d420      	bmi.n	8006614 <_malloc_r+0xd0>
 80065d2:	2a0b      	cmp	r2, #11
 80065d4:	d917      	bls.n	8006606 <_malloc_r+0xc2>
 80065d6:	1961      	adds	r1, r4, r5
 80065d8:	42a3      	cmp	r3, r4
 80065da:	6025      	str	r5, [r4, #0]
 80065dc:	bf18      	it	ne
 80065de:	6059      	strne	r1, [r3, #4]
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	bf08      	it	eq
 80065e4:	f8c8 1000 	streq.w	r1, [r8]
 80065e8:	5162      	str	r2, [r4, r5]
 80065ea:	604b      	str	r3, [r1, #4]
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 f82f 	bl	8006650 <__malloc_unlock>
 80065f2:	f104 000b 	add.w	r0, r4, #11
 80065f6:	1d23      	adds	r3, r4, #4
 80065f8:	f020 0007 	bic.w	r0, r0, #7
 80065fc:	1ac2      	subs	r2, r0, r3
 80065fe:	bf1c      	itt	ne
 8006600:	1a1b      	subne	r3, r3, r0
 8006602:	50a3      	strne	r3, [r4, r2]
 8006604:	e7af      	b.n	8006566 <_malloc_r+0x22>
 8006606:	6862      	ldr	r2, [r4, #4]
 8006608:	42a3      	cmp	r3, r4
 800660a:	bf0c      	ite	eq
 800660c:	f8c8 2000 	streq.w	r2, [r8]
 8006610:	605a      	strne	r2, [r3, #4]
 8006612:	e7eb      	b.n	80065ec <_malloc_r+0xa8>
 8006614:	4623      	mov	r3, r4
 8006616:	6864      	ldr	r4, [r4, #4]
 8006618:	e7ae      	b.n	8006578 <_malloc_r+0x34>
 800661a:	463c      	mov	r4, r7
 800661c:	687f      	ldr	r7, [r7, #4]
 800661e:	e7b6      	b.n	800658e <_malloc_r+0x4a>
 8006620:	461a      	mov	r2, r3
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	42a3      	cmp	r3, r4
 8006626:	d1fb      	bne.n	8006620 <_malloc_r+0xdc>
 8006628:	2300      	movs	r3, #0
 800662a:	6053      	str	r3, [r2, #4]
 800662c:	e7de      	b.n	80065ec <_malloc_r+0xa8>
 800662e:	230c      	movs	r3, #12
 8006630:	6033      	str	r3, [r6, #0]
 8006632:	4630      	mov	r0, r6
 8006634:	f000 f80c 	bl	8006650 <__malloc_unlock>
 8006638:	e794      	b.n	8006564 <_malloc_r+0x20>
 800663a:	6005      	str	r5, [r0, #0]
 800663c:	e7d6      	b.n	80065ec <_malloc_r+0xa8>
 800663e:	bf00      	nop
 8006640:	20000524 	.word	0x20000524

08006644 <__malloc_lock>:
 8006644:	4801      	ldr	r0, [pc, #4]	@ (800664c <__malloc_lock+0x8>)
 8006646:	f7ff bee8 	b.w	800641a <__retarget_lock_acquire_recursive>
 800664a:	bf00      	nop
 800664c:	2000051c 	.word	0x2000051c

08006650 <__malloc_unlock>:
 8006650:	4801      	ldr	r0, [pc, #4]	@ (8006658 <__malloc_unlock+0x8>)
 8006652:	f7ff bee3 	b.w	800641c <__retarget_lock_release_recursive>
 8006656:	bf00      	nop
 8006658:	2000051c 	.word	0x2000051c

0800665c <__sflush_r>:
 800665c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006664:	0716      	lsls	r6, r2, #28
 8006666:	4605      	mov	r5, r0
 8006668:	460c      	mov	r4, r1
 800666a:	d454      	bmi.n	8006716 <__sflush_r+0xba>
 800666c:	684b      	ldr	r3, [r1, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	dc02      	bgt.n	8006678 <__sflush_r+0x1c>
 8006672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	dd48      	ble.n	800670a <__sflush_r+0xae>
 8006678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800667a:	2e00      	cmp	r6, #0
 800667c:	d045      	beq.n	800670a <__sflush_r+0xae>
 800667e:	2300      	movs	r3, #0
 8006680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006684:	682f      	ldr	r7, [r5, #0]
 8006686:	6a21      	ldr	r1, [r4, #32]
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	d030      	beq.n	80066ee <__sflush_r+0x92>
 800668c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	0759      	lsls	r1, r3, #29
 8006692:	d505      	bpl.n	80066a0 <__sflush_r+0x44>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800669a:	b10b      	cbz	r3, 80066a0 <__sflush_r+0x44>
 800669c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b0      	blx	r6
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	d106      	bne.n	80066be <__sflush_r+0x62>
 80066b0:	6829      	ldr	r1, [r5, #0]
 80066b2:	291d      	cmp	r1, #29
 80066b4:	d82b      	bhi.n	800670e <__sflush_r+0xb2>
 80066b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006760 <__sflush_r+0x104>)
 80066b8:	410a      	asrs	r2, r1
 80066ba:	07d6      	lsls	r6, r2, #31
 80066bc:	d427      	bmi.n	800670e <__sflush_r+0xb2>
 80066be:	2200      	movs	r2, #0
 80066c0:	6062      	str	r2, [r4, #4]
 80066c2:	04d9      	lsls	r1, r3, #19
 80066c4:	6922      	ldr	r2, [r4, #16]
 80066c6:	6022      	str	r2, [r4, #0]
 80066c8:	d504      	bpl.n	80066d4 <__sflush_r+0x78>
 80066ca:	1c42      	adds	r2, r0, #1
 80066cc:	d101      	bne.n	80066d2 <__sflush_r+0x76>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b903      	cbnz	r3, 80066d4 <__sflush_r+0x78>
 80066d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d6:	602f      	str	r7, [r5, #0]
 80066d8:	b1b9      	cbz	r1, 800670a <__sflush_r+0xae>
 80066da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066de:	4299      	cmp	r1, r3
 80066e0:	d002      	beq.n	80066e8 <__sflush_r+0x8c>
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7ff feba 	bl	800645c <_free_r>
 80066e8:	2300      	movs	r3, #0
 80066ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ec:	e00d      	b.n	800670a <__sflush_r+0xae>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b0      	blx	r6
 80066f4:	4602      	mov	r2, r0
 80066f6:	1c50      	adds	r0, r2, #1
 80066f8:	d1c9      	bne.n	800668e <__sflush_r+0x32>
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0c6      	beq.n	800668e <__sflush_r+0x32>
 8006700:	2b1d      	cmp	r3, #29
 8006702:	d001      	beq.n	8006708 <__sflush_r+0xac>
 8006704:	2b16      	cmp	r3, #22
 8006706:	d11e      	bne.n	8006746 <__sflush_r+0xea>
 8006708:	602f      	str	r7, [r5, #0]
 800670a:	2000      	movs	r0, #0
 800670c:	e022      	b.n	8006754 <__sflush_r+0xf8>
 800670e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006712:	b21b      	sxth	r3, r3
 8006714:	e01b      	b.n	800674e <__sflush_r+0xf2>
 8006716:	690f      	ldr	r7, [r1, #16]
 8006718:	2f00      	cmp	r7, #0
 800671a:	d0f6      	beq.n	800670a <__sflush_r+0xae>
 800671c:	0793      	lsls	r3, r2, #30
 800671e:	680e      	ldr	r6, [r1, #0]
 8006720:	bf08      	it	eq
 8006722:	694b      	ldreq	r3, [r1, #20]
 8006724:	600f      	str	r7, [r1, #0]
 8006726:	bf18      	it	ne
 8006728:	2300      	movne	r3, #0
 800672a:	eba6 0807 	sub.w	r8, r6, r7
 800672e:	608b      	str	r3, [r1, #8]
 8006730:	f1b8 0f00 	cmp.w	r8, #0
 8006734:	dde9      	ble.n	800670a <__sflush_r+0xae>
 8006736:	6a21      	ldr	r1, [r4, #32]
 8006738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800673a:	4643      	mov	r3, r8
 800673c:	463a      	mov	r2, r7
 800673e:	4628      	mov	r0, r5
 8006740:	47b0      	blx	r6
 8006742:	2800      	cmp	r0, #0
 8006744:	dc08      	bgt.n	8006758 <__sflush_r+0xfc>
 8006746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006758:	4407      	add	r7, r0
 800675a:	eba8 0800 	sub.w	r8, r8, r0
 800675e:	e7e7      	b.n	8006730 <__sflush_r+0xd4>
 8006760:	dfbffffe 	.word	0xdfbffffe

08006764 <_fflush_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	4605      	mov	r5, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b913      	cbnz	r3, 8006774 <_fflush_r+0x10>
 800676e:	2500      	movs	r5, #0
 8006770:	4628      	mov	r0, r5
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	b118      	cbz	r0, 800677e <_fflush_r+0x1a>
 8006776:	6a03      	ldr	r3, [r0, #32]
 8006778:	b90b      	cbnz	r3, 800677e <_fflush_r+0x1a>
 800677a:	f7ff fd5b 	bl	8006234 <__sinit>
 800677e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f3      	beq.n	800676e <_fflush_r+0xa>
 8006786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006788:	07d0      	lsls	r0, r2, #31
 800678a:	d404      	bmi.n	8006796 <_fflush_r+0x32>
 800678c:	0599      	lsls	r1, r3, #22
 800678e:	d402      	bmi.n	8006796 <_fflush_r+0x32>
 8006790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006792:	f7ff fe42 	bl	800641a <__retarget_lock_acquire_recursive>
 8006796:	4628      	mov	r0, r5
 8006798:	4621      	mov	r1, r4
 800679a:	f7ff ff5f 	bl	800665c <__sflush_r>
 800679e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067a0:	07da      	lsls	r2, r3, #31
 80067a2:	4605      	mov	r5, r0
 80067a4:	d4e4      	bmi.n	8006770 <_fflush_r+0xc>
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	059b      	lsls	r3, r3, #22
 80067aa:	d4e1      	bmi.n	8006770 <_fflush_r+0xc>
 80067ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ae:	f7ff fe35 	bl	800641c <__retarget_lock_release_recursive>
 80067b2:	e7dd      	b.n	8006770 <_fflush_r+0xc>

080067b4 <fiprintf>:
 80067b4:	b40e      	push	{r1, r2, r3}
 80067b6:	b503      	push	{r0, r1, lr}
 80067b8:	4601      	mov	r1, r0
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	4805      	ldr	r0, [pc, #20]	@ (80067d4 <fiprintf+0x20>)
 80067be:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	f000 f847 	bl	8006858 <_vfiprintf_r>
 80067ca:	b002      	add	sp, #8
 80067cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d0:	b003      	add	sp, #12
 80067d2:	4770      	bx	lr
 80067d4:	2000001c 	.word	0x2000001c

080067d8 <_sbrk_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d06      	ldr	r5, [pc, #24]	@ (80067f4 <_sbrk_r+0x1c>)
 80067dc:	2300      	movs	r3, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fb fa48 	bl	8001c78 <_sbrk>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_sbrk_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_sbrk_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20000518 	.word	0x20000518

080067f8 <abort>:
 80067f8:	b508      	push	{r3, lr}
 80067fa:	2006      	movs	r0, #6
 80067fc:	f000 fb8e 	bl	8006f1c <raise>
 8006800:	2001      	movs	r0, #1
 8006802:	f7fb f9c1 	bl	8001b88 <_exit>

08006806 <__sfputc_r>:
 8006806:	6893      	ldr	r3, [r2, #8]
 8006808:	3b01      	subs	r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	b410      	push	{r4}
 800680e:	6093      	str	r3, [r2, #8]
 8006810:	da08      	bge.n	8006824 <__sfputc_r+0x1e>
 8006812:	6994      	ldr	r4, [r2, #24]
 8006814:	42a3      	cmp	r3, r4
 8006816:	db01      	blt.n	800681c <__sfputc_r+0x16>
 8006818:	290a      	cmp	r1, #10
 800681a:	d103      	bne.n	8006824 <__sfputc_r+0x1e>
 800681c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006820:	f000 bac0 	b.w	8006da4 <__swbuf_r>
 8006824:	6813      	ldr	r3, [r2, #0]
 8006826:	1c58      	adds	r0, r3, #1
 8006828:	6010      	str	r0, [r2, #0]
 800682a:	7019      	strb	r1, [r3, #0]
 800682c:	4608      	mov	r0, r1
 800682e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006832:	4770      	bx	lr

08006834 <__sfputs_r>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	4606      	mov	r6, r0
 8006838:	460f      	mov	r7, r1
 800683a:	4614      	mov	r4, r2
 800683c:	18d5      	adds	r5, r2, r3
 800683e:	42ac      	cmp	r4, r5
 8006840:	d101      	bne.n	8006846 <__sfputs_r+0x12>
 8006842:	2000      	movs	r0, #0
 8006844:	e007      	b.n	8006856 <__sfputs_r+0x22>
 8006846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684a:	463a      	mov	r2, r7
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff ffda 	bl	8006806 <__sfputc_r>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	d1f3      	bne.n	800683e <__sfputs_r+0xa>
 8006856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006858 <_vfiprintf_r>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	460d      	mov	r5, r1
 800685e:	b09d      	sub	sp, #116	@ 0x74
 8006860:	4614      	mov	r4, r2
 8006862:	4698      	mov	r8, r3
 8006864:	4606      	mov	r6, r0
 8006866:	b118      	cbz	r0, 8006870 <_vfiprintf_r+0x18>
 8006868:	6a03      	ldr	r3, [r0, #32]
 800686a:	b90b      	cbnz	r3, 8006870 <_vfiprintf_r+0x18>
 800686c:	f7ff fce2 	bl	8006234 <__sinit>
 8006870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006872:	07d9      	lsls	r1, r3, #31
 8006874:	d405      	bmi.n	8006882 <_vfiprintf_r+0x2a>
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	059a      	lsls	r2, r3, #22
 800687a:	d402      	bmi.n	8006882 <_vfiprintf_r+0x2a>
 800687c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800687e:	f7ff fdcc 	bl	800641a <__retarget_lock_acquire_recursive>
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	071b      	lsls	r3, r3, #28
 8006886:	d501      	bpl.n	800688c <_vfiprintf_r+0x34>
 8006888:	692b      	ldr	r3, [r5, #16]
 800688a:	b99b      	cbnz	r3, 80068b4 <_vfiprintf_r+0x5c>
 800688c:	4629      	mov	r1, r5
 800688e:	4630      	mov	r0, r6
 8006890:	f000 fac6 	bl	8006e20 <__swsetup_r>
 8006894:	b170      	cbz	r0, 80068b4 <_vfiprintf_r+0x5c>
 8006896:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006898:	07dc      	lsls	r4, r3, #31
 800689a:	d504      	bpl.n	80068a6 <_vfiprintf_r+0x4e>
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	b01d      	add	sp, #116	@ 0x74
 80068a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a6:	89ab      	ldrh	r3, [r5, #12]
 80068a8:	0598      	lsls	r0, r3, #22
 80068aa:	d4f7      	bmi.n	800689c <_vfiprintf_r+0x44>
 80068ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068ae:	f7ff fdb5 	bl	800641c <__retarget_lock_release_recursive>
 80068b2:	e7f3      	b.n	800689c <_vfiprintf_r+0x44>
 80068b4:	2300      	movs	r3, #0
 80068b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b8:	2320      	movs	r3, #32
 80068ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068be:	f8cd 800c 	str.w	r8, [sp, #12]
 80068c2:	2330      	movs	r3, #48	@ 0x30
 80068c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a74 <_vfiprintf_r+0x21c>
 80068c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068cc:	f04f 0901 	mov.w	r9, #1
 80068d0:	4623      	mov	r3, r4
 80068d2:	469a      	mov	sl, r3
 80068d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068d8:	b10a      	cbz	r2, 80068de <_vfiprintf_r+0x86>
 80068da:	2a25      	cmp	r2, #37	@ 0x25
 80068dc:	d1f9      	bne.n	80068d2 <_vfiprintf_r+0x7a>
 80068de:	ebba 0b04 	subs.w	fp, sl, r4
 80068e2:	d00b      	beq.n	80068fc <_vfiprintf_r+0xa4>
 80068e4:	465b      	mov	r3, fp
 80068e6:	4622      	mov	r2, r4
 80068e8:	4629      	mov	r1, r5
 80068ea:	4630      	mov	r0, r6
 80068ec:	f7ff ffa2 	bl	8006834 <__sfputs_r>
 80068f0:	3001      	adds	r0, #1
 80068f2:	f000 80a7 	beq.w	8006a44 <_vfiprintf_r+0x1ec>
 80068f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068f8:	445a      	add	r2, fp
 80068fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80068fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 809f 	beq.w	8006a44 <_vfiprintf_r+0x1ec>
 8006906:	2300      	movs	r3, #0
 8006908:	f04f 32ff 	mov.w	r2, #4294967295
 800690c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006910:	f10a 0a01 	add.w	sl, sl, #1
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800691c:	931a      	str	r3, [sp, #104]	@ 0x68
 800691e:	4654      	mov	r4, sl
 8006920:	2205      	movs	r2, #5
 8006922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006926:	4853      	ldr	r0, [pc, #332]	@ (8006a74 <_vfiprintf_r+0x21c>)
 8006928:	f7f9 fc72 	bl	8000210 <memchr>
 800692c:	9a04      	ldr	r2, [sp, #16]
 800692e:	b9d8      	cbnz	r0, 8006968 <_vfiprintf_r+0x110>
 8006930:	06d1      	lsls	r1, r2, #27
 8006932:	bf44      	itt	mi
 8006934:	2320      	movmi	r3, #32
 8006936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800693a:	0713      	lsls	r3, r2, #28
 800693c:	bf44      	itt	mi
 800693e:	232b      	movmi	r3, #43	@ 0x2b
 8006940:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006944:	f89a 3000 	ldrb.w	r3, [sl]
 8006948:	2b2a      	cmp	r3, #42	@ 0x2a
 800694a:	d015      	beq.n	8006978 <_vfiprintf_r+0x120>
 800694c:	9a07      	ldr	r2, [sp, #28]
 800694e:	4654      	mov	r4, sl
 8006950:	2000      	movs	r0, #0
 8006952:	f04f 0c0a 	mov.w	ip, #10
 8006956:	4621      	mov	r1, r4
 8006958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800695c:	3b30      	subs	r3, #48	@ 0x30
 800695e:	2b09      	cmp	r3, #9
 8006960:	d94b      	bls.n	80069fa <_vfiprintf_r+0x1a2>
 8006962:	b1b0      	cbz	r0, 8006992 <_vfiprintf_r+0x13a>
 8006964:	9207      	str	r2, [sp, #28]
 8006966:	e014      	b.n	8006992 <_vfiprintf_r+0x13a>
 8006968:	eba0 0308 	sub.w	r3, r0, r8
 800696c:	fa09 f303 	lsl.w	r3, r9, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	46a2      	mov	sl, r4
 8006976:	e7d2      	b.n	800691e <_vfiprintf_r+0xc6>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	1d19      	adds	r1, r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	9103      	str	r1, [sp, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	bfbb      	ittet	lt
 8006984:	425b      	neglt	r3, r3
 8006986:	f042 0202 	orrlt.w	r2, r2, #2
 800698a:	9307      	strge	r3, [sp, #28]
 800698c:	9307      	strlt	r3, [sp, #28]
 800698e:	bfb8      	it	lt
 8006990:	9204      	strlt	r2, [sp, #16]
 8006992:	7823      	ldrb	r3, [r4, #0]
 8006994:	2b2e      	cmp	r3, #46	@ 0x2e
 8006996:	d10a      	bne.n	80069ae <_vfiprintf_r+0x156>
 8006998:	7863      	ldrb	r3, [r4, #1]
 800699a:	2b2a      	cmp	r3, #42	@ 0x2a
 800699c:	d132      	bne.n	8006a04 <_vfiprintf_r+0x1ac>
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	1d1a      	adds	r2, r3, #4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	9203      	str	r2, [sp, #12]
 80069a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069aa:	3402      	adds	r4, #2
 80069ac:	9305      	str	r3, [sp, #20]
 80069ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a84 <_vfiprintf_r+0x22c>
 80069b2:	7821      	ldrb	r1, [r4, #0]
 80069b4:	2203      	movs	r2, #3
 80069b6:	4650      	mov	r0, sl
 80069b8:	f7f9 fc2a 	bl	8000210 <memchr>
 80069bc:	b138      	cbz	r0, 80069ce <_vfiprintf_r+0x176>
 80069be:	9b04      	ldr	r3, [sp, #16]
 80069c0:	eba0 000a 	sub.w	r0, r0, sl
 80069c4:	2240      	movs	r2, #64	@ 0x40
 80069c6:	4082      	lsls	r2, r0
 80069c8:	4313      	orrs	r3, r2
 80069ca:	3401      	adds	r4, #1
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d2:	4829      	ldr	r0, [pc, #164]	@ (8006a78 <_vfiprintf_r+0x220>)
 80069d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069d8:	2206      	movs	r2, #6
 80069da:	f7f9 fc19 	bl	8000210 <memchr>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d03f      	beq.n	8006a62 <_vfiprintf_r+0x20a>
 80069e2:	4b26      	ldr	r3, [pc, #152]	@ (8006a7c <_vfiprintf_r+0x224>)
 80069e4:	bb1b      	cbnz	r3, 8006a2e <_vfiprintf_r+0x1d6>
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	3307      	adds	r3, #7
 80069ea:	f023 0307 	bic.w	r3, r3, #7
 80069ee:	3308      	adds	r3, #8
 80069f0:	9303      	str	r3, [sp, #12]
 80069f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f4:	443b      	add	r3, r7
 80069f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f8:	e76a      	b.n	80068d0 <_vfiprintf_r+0x78>
 80069fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80069fe:	460c      	mov	r4, r1
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7a8      	b.n	8006956 <_vfiprintf_r+0xfe>
 8006a04:	2300      	movs	r3, #0
 8006a06:	3401      	adds	r4, #1
 8006a08:	9305      	str	r3, [sp, #20]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	f04f 0c0a 	mov.w	ip, #10
 8006a10:	4620      	mov	r0, r4
 8006a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a16:	3a30      	subs	r2, #48	@ 0x30
 8006a18:	2a09      	cmp	r2, #9
 8006a1a:	d903      	bls.n	8006a24 <_vfiprintf_r+0x1cc>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0c6      	beq.n	80069ae <_vfiprintf_r+0x156>
 8006a20:	9105      	str	r1, [sp, #20]
 8006a22:	e7c4      	b.n	80069ae <_vfiprintf_r+0x156>
 8006a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a28:	4604      	mov	r4, r0
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e7f0      	b.n	8006a10 <_vfiprintf_r+0x1b8>
 8006a2e:	ab03      	add	r3, sp, #12
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	462a      	mov	r2, r5
 8006a34:	4b12      	ldr	r3, [pc, #72]	@ (8006a80 <_vfiprintf_r+0x228>)
 8006a36:	a904      	add	r1, sp, #16
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f3af 8000 	nop.w
 8006a3e:	4607      	mov	r7, r0
 8006a40:	1c78      	adds	r0, r7, #1
 8006a42:	d1d6      	bne.n	80069f2 <_vfiprintf_r+0x19a>
 8006a44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a46:	07d9      	lsls	r1, r3, #31
 8006a48:	d405      	bmi.n	8006a56 <_vfiprintf_r+0x1fe>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	059a      	lsls	r2, r3, #22
 8006a4e:	d402      	bmi.n	8006a56 <_vfiprintf_r+0x1fe>
 8006a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a52:	f7ff fce3 	bl	800641c <__retarget_lock_release_recursive>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	065b      	lsls	r3, r3, #25
 8006a5a:	f53f af1f 	bmi.w	800689c <_vfiprintf_r+0x44>
 8006a5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a60:	e71e      	b.n	80068a0 <_vfiprintf_r+0x48>
 8006a62:	ab03      	add	r3, sp, #12
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	462a      	mov	r2, r5
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <_vfiprintf_r+0x228>)
 8006a6a:	a904      	add	r1, sp, #16
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 f879 	bl	8006b64 <_printf_i>
 8006a72:	e7e4      	b.n	8006a3e <_vfiprintf_r+0x1e6>
 8006a74:	0800731b 	.word	0x0800731b
 8006a78:	08007325 	.word	0x08007325
 8006a7c:	00000000 	.word	0x00000000
 8006a80:	08006835 	.word	0x08006835
 8006a84:	08007321 	.word	0x08007321

08006a88 <_printf_common>:
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	4698      	mov	r8, r3
 8006a90:	688a      	ldr	r2, [r1, #8]
 8006a92:	690b      	ldr	r3, [r1, #16]
 8006a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	bfb8      	it	lt
 8006a9c:	4613      	movlt	r3, r2
 8006a9e:	6033      	str	r3, [r6, #0]
 8006aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	b10a      	cbz	r2, 8006aae <_printf_common+0x26>
 8006aaa:	3301      	adds	r3, #1
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	0699      	lsls	r1, r3, #26
 8006ab2:	bf42      	ittt	mi
 8006ab4:	6833      	ldrmi	r3, [r6, #0]
 8006ab6:	3302      	addmi	r3, #2
 8006ab8:	6033      	strmi	r3, [r6, #0]
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	f015 0506 	ands.w	r5, r5, #6
 8006ac0:	d106      	bne.n	8006ad0 <_printf_common+0x48>
 8006ac2:	f104 0a19 	add.w	sl, r4, #25
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	6832      	ldr	r2, [r6, #0]
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	42ab      	cmp	r3, r5
 8006ace:	dc26      	bgt.n	8006b1e <_printf_common+0x96>
 8006ad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	3b00      	subs	r3, #0
 8006ad8:	bf18      	it	ne
 8006ada:	2301      	movne	r3, #1
 8006adc:	0692      	lsls	r2, r2, #26
 8006ade:	d42b      	bmi.n	8006b38 <_printf_common+0xb0>
 8006ae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	47c8      	blx	r9
 8006aea:	3001      	adds	r0, #1
 8006aec:	d01e      	beq.n	8006b2c <_printf_common+0xa4>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	6922      	ldr	r2, [r4, #16]
 8006af2:	f003 0306 	and.w	r3, r3, #6
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	bf02      	ittt	eq
 8006afa:	68e5      	ldreq	r5, [r4, #12]
 8006afc:	6833      	ldreq	r3, [r6, #0]
 8006afe:	1aed      	subeq	r5, r5, r3
 8006b00:	68a3      	ldr	r3, [r4, #8]
 8006b02:	bf0c      	ite	eq
 8006b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b08:	2500      	movne	r5, #0
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	bfc4      	itt	gt
 8006b0e:	1a9b      	subgt	r3, r3, r2
 8006b10:	18ed      	addgt	r5, r5, r3
 8006b12:	2600      	movs	r6, #0
 8006b14:	341a      	adds	r4, #26
 8006b16:	42b5      	cmp	r5, r6
 8006b18:	d11a      	bne.n	8006b50 <_printf_common+0xc8>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e008      	b.n	8006b30 <_printf_common+0xa8>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4652      	mov	r2, sl
 8006b22:	4641      	mov	r1, r8
 8006b24:	4638      	mov	r0, r7
 8006b26:	47c8      	blx	r9
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d103      	bne.n	8006b34 <_printf_common+0xac>
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b34:	3501      	adds	r5, #1
 8006b36:	e7c6      	b.n	8006ac6 <_printf_common+0x3e>
 8006b38:	18e1      	adds	r1, r4, r3
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	2030      	movs	r0, #48	@ 0x30
 8006b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b42:	4422      	add	r2, r4
 8006b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	e7c7      	b.n	8006ae0 <_printf_common+0x58>
 8006b50:	2301      	movs	r3, #1
 8006b52:	4622      	mov	r2, r4
 8006b54:	4641      	mov	r1, r8
 8006b56:	4638      	mov	r0, r7
 8006b58:	47c8      	blx	r9
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d0e6      	beq.n	8006b2c <_printf_common+0xa4>
 8006b5e:	3601      	adds	r6, #1
 8006b60:	e7d9      	b.n	8006b16 <_printf_common+0x8e>
	...

08006b64 <_printf_i>:
 8006b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	7e0f      	ldrb	r7, [r1, #24]
 8006b6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b6c:	2f78      	cmp	r7, #120	@ 0x78
 8006b6e:	4691      	mov	r9, r2
 8006b70:	4680      	mov	r8, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	469a      	mov	sl, r3
 8006b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b7a:	d807      	bhi.n	8006b8c <_printf_i+0x28>
 8006b7c:	2f62      	cmp	r7, #98	@ 0x62
 8006b7e:	d80a      	bhi.n	8006b96 <_printf_i+0x32>
 8006b80:	2f00      	cmp	r7, #0
 8006b82:	f000 80d2 	beq.w	8006d2a <_printf_i+0x1c6>
 8006b86:	2f58      	cmp	r7, #88	@ 0x58
 8006b88:	f000 80b9 	beq.w	8006cfe <_printf_i+0x19a>
 8006b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b94:	e03a      	b.n	8006c0c <_printf_i+0xa8>
 8006b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b9a:	2b15      	cmp	r3, #21
 8006b9c:	d8f6      	bhi.n	8006b8c <_printf_i+0x28>
 8006b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8006ba4 <_printf_i+0x40>)
 8006ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba4:	08006bfd 	.word	0x08006bfd
 8006ba8:	08006c11 	.word	0x08006c11
 8006bac:	08006b8d 	.word	0x08006b8d
 8006bb0:	08006b8d 	.word	0x08006b8d
 8006bb4:	08006b8d 	.word	0x08006b8d
 8006bb8:	08006b8d 	.word	0x08006b8d
 8006bbc:	08006c11 	.word	0x08006c11
 8006bc0:	08006b8d 	.word	0x08006b8d
 8006bc4:	08006b8d 	.word	0x08006b8d
 8006bc8:	08006b8d 	.word	0x08006b8d
 8006bcc:	08006b8d 	.word	0x08006b8d
 8006bd0:	08006d11 	.word	0x08006d11
 8006bd4:	08006c3b 	.word	0x08006c3b
 8006bd8:	08006ccb 	.word	0x08006ccb
 8006bdc:	08006b8d 	.word	0x08006b8d
 8006be0:	08006b8d 	.word	0x08006b8d
 8006be4:	08006d33 	.word	0x08006d33
 8006be8:	08006b8d 	.word	0x08006b8d
 8006bec:	08006c3b 	.word	0x08006c3b
 8006bf0:	08006b8d 	.word	0x08006b8d
 8006bf4:	08006b8d 	.word	0x08006b8d
 8006bf8:	08006cd3 	.word	0x08006cd3
 8006bfc:	6833      	ldr	r3, [r6, #0]
 8006bfe:	1d1a      	adds	r2, r3, #4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6032      	str	r2, [r6, #0]
 8006c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e09d      	b.n	8006d4c <_printf_i+0x1e8>
 8006c10:	6833      	ldr	r3, [r6, #0]
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	1d19      	adds	r1, r3, #4
 8006c16:	6031      	str	r1, [r6, #0]
 8006c18:	0606      	lsls	r6, r0, #24
 8006c1a:	d501      	bpl.n	8006c20 <_printf_i+0xbc>
 8006c1c:	681d      	ldr	r5, [r3, #0]
 8006c1e:	e003      	b.n	8006c28 <_printf_i+0xc4>
 8006c20:	0645      	lsls	r5, r0, #25
 8006c22:	d5fb      	bpl.n	8006c1c <_printf_i+0xb8>
 8006c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c28:	2d00      	cmp	r5, #0
 8006c2a:	da03      	bge.n	8006c34 <_printf_i+0xd0>
 8006c2c:	232d      	movs	r3, #45	@ 0x2d
 8006c2e:	426d      	negs	r5, r5
 8006c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c34:	4859      	ldr	r0, [pc, #356]	@ (8006d9c <_printf_i+0x238>)
 8006c36:	230a      	movs	r3, #10
 8006c38:	e011      	b.n	8006c5e <_printf_i+0xfa>
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	6833      	ldr	r3, [r6, #0]
 8006c3e:	0608      	lsls	r0, r1, #24
 8006c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c44:	d402      	bmi.n	8006c4c <_printf_i+0xe8>
 8006c46:	0649      	lsls	r1, r1, #25
 8006c48:	bf48      	it	mi
 8006c4a:	b2ad      	uxthmi	r5, r5
 8006c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c4e:	4853      	ldr	r0, [pc, #332]	@ (8006d9c <_printf_i+0x238>)
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	bf14      	ite	ne
 8006c54:	230a      	movne	r3, #10
 8006c56:	2308      	moveq	r3, #8
 8006c58:	2100      	movs	r1, #0
 8006c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c5e:	6866      	ldr	r6, [r4, #4]
 8006c60:	60a6      	str	r6, [r4, #8]
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	bfa2      	ittt	ge
 8006c66:	6821      	ldrge	r1, [r4, #0]
 8006c68:	f021 0104 	bicge.w	r1, r1, #4
 8006c6c:	6021      	strge	r1, [r4, #0]
 8006c6e:	b90d      	cbnz	r5, 8006c74 <_printf_i+0x110>
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	d04b      	beq.n	8006d0c <_printf_i+0x1a8>
 8006c74:	4616      	mov	r6, r2
 8006c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c7e:	5dc7      	ldrb	r7, [r0, r7]
 8006c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c84:	462f      	mov	r7, r5
 8006c86:	42bb      	cmp	r3, r7
 8006c88:	460d      	mov	r5, r1
 8006c8a:	d9f4      	bls.n	8006c76 <_printf_i+0x112>
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d10b      	bne.n	8006ca8 <_printf_i+0x144>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	07df      	lsls	r7, r3, #31
 8006c94:	d508      	bpl.n	8006ca8 <_printf_i+0x144>
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	6861      	ldr	r1, [r4, #4]
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	bfde      	ittt	le
 8006c9e:	2330      	movle	r3, #48	@ 0x30
 8006ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ca8:	1b92      	subs	r2, r2, r6
 8006caa:	6122      	str	r2, [r4, #16]
 8006cac:	f8cd a000 	str.w	sl, [sp]
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	aa03      	add	r2, sp, #12
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f7ff fee6 	bl	8006a88 <_printf_common>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d14a      	bne.n	8006d56 <_printf_i+0x1f2>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	b004      	add	sp, #16
 8006cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	f043 0320 	orr.w	r3, r3, #32
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	4833      	ldr	r0, [pc, #204]	@ (8006da0 <_printf_i+0x23c>)
 8006cd4:	2778      	movs	r7, #120	@ 0x78
 8006cd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	6831      	ldr	r1, [r6, #0]
 8006cde:	061f      	lsls	r7, r3, #24
 8006ce0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ce4:	d402      	bmi.n	8006cec <_printf_i+0x188>
 8006ce6:	065f      	lsls	r7, r3, #25
 8006ce8:	bf48      	it	mi
 8006cea:	b2ad      	uxthmi	r5, r5
 8006cec:	6031      	str	r1, [r6, #0]
 8006cee:	07d9      	lsls	r1, r3, #31
 8006cf0:	bf44      	itt	mi
 8006cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf6:	6023      	strmi	r3, [r4, #0]
 8006cf8:	b11d      	cbz	r5, 8006d02 <_printf_i+0x19e>
 8006cfa:	2310      	movs	r3, #16
 8006cfc:	e7ac      	b.n	8006c58 <_printf_i+0xf4>
 8006cfe:	4827      	ldr	r0, [pc, #156]	@ (8006d9c <_printf_i+0x238>)
 8006d00:	e7e9      	b.n	8006cd6 <_printf_i+0x172>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	f023 0320 	bic.w	r3, r3, #32
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	e7f6      	b.n	8006cfa <_printf_i+0x196>
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	e7bd      	b.n	8006c8c <_printf_i+0x128>
 8006d10:	6833      	ldr	r3, [r6, #0]
 8006d12:	6825      	ldr	r5, [r4, #0]
 8006d14:	6961      	ldr	r1, [r4, #20]
 8006d16:	1d18      	adds	r0, r3, #4
 8006d18:	6030      	str	r0, [r6, #0]
 8006d1a:	062e      	lsls	r6, r5, #24
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	d501      	bpl.n	8006d24 <_printf_i+0x1c0>
 8006d20:	6019      	str	r1, [r3, #0]
 8006d22:	e002      	b.n	8006d2a <_printf_i+0x1c6>
 8006d24:	0668      	lsls	r0, r5, #25
 8006d26:	d5fb      	bpl.n	8006d20 <_printf_i+0x1bc>
 8006d28:	8019      	strh	r1, [r3, #0]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	4616      	mov	r6, r2
 8006d30:	e7bc      	b.n	8006cac <_printf_i+0x148>
 8006d32:	6833      	ldr	r3, [r6, #0]
 8006d34:	1d1a      	adds	r2, r3, #4
 8006d36:	6032      	str	r2, [r6, #0]
 8006d38:	681e      	ldr	r6, [r3, #0]
 8006d3a:	6862      	ldr	r2, [r4, #4]
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f7f9 fa66 	bl	8000210 <memchr>
 8006d44:	b108      	cbz	r0, 8006d4a <_printf_i+0x1e6>
 8006d46:	1b80      	subs	r0, r0, r6
 8006d48:	6060      	str	r0, [r4, #4]
 8006d4a:	6863      	ldr	r3, [r4, #4]
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d54:	e7aa      	b.n	8006cac <_printf_i+0x148>
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	4632      	mov	r2, r6
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	47d0      	blx	sl
 8006d60:	3001      	adds	r0, #1
 8006d62:	d0ad      	beq.n	8006cc0 <_printf_i+0x15c>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	079b      	lsls	r3, r3, #30
 8006d68:	d413      	bmi.n	8006d92 <_printf_i+0x22e>
 8006d6a:	68e0      	ldr	r0, [r4, #12]
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	4298      	cmp	r0, r3
 8006d70:	bfb8      	it	lt
 8006d72:	4618      	movlt	r0, r3
 8006d74:	e7a6      	b.n	8006cc4 <_printf_i+0x160>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4632      	mov	r2, r6
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	47d0      	blx	sl
 8006d80:	3001      	adds	r0, #1
 8006d82:	d09d      	beq.n	8006cc0 <_printf_i+0x15c>
 8006d84:	3501      	adds	r5, #1
 8006d86:	68e3      	ldr	r3, [r4, #12]
 8006d88:	9903      	ldr	r1, [sp, #12]
 8006d8a:	1a5b      	subs	r3, r3, r1
 8006d8c:	42ab      	cmp	r3, r5
 8006d8e:	dcf2      	bgt.n	8006d76 <_printf_i+0x212>
 8006d90:	e7eb      	b.n	8006d6a <_printf_i+0x206>
 8006d92:	2500      	movs	r5, #0
 8006d94:	f104 0619 	add.w	r6, r4, #25
 8006d98:	e7f5      	b.n	8006d86 <_printf_i+0x222>
 8006d9a:	bf00      	nop
 8006d9c:	0800732c 	.word	0x0800732c
 8006da0:	0800733d 	.word	0x0800733d

08006da4 <__swbuf_r>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	460e      	mov	r6, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	4605      	mov	r5, r0
 8006dac:	b118      	cbz	r0, 8006db6 <__swbuf_r+0x12>
 8006dae:	6a03      	ldr	r3, [r0, #32]
 8006db0:	b90b      	cbnz	r3, 8006db6 <__swbuf_r+0x12>
 8006db2:	f7ff fa3f 	bl	8006234 <__sinit>
 8006db6:	69a3      	ldr	r3, [r4, #24]
 8006db8:	60a3      	str	r3, [r4, #8]
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	071a      	lsls	r2, r3, #28
 8006dbe:	d501      	bpl.n	8006dc4 <__swbuf_r+0x20>
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	b943      	cbnz	r3, 8006dd6 <__swbuf_r+0x32>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f82a 	bl	8006e20 <__swsetup_r>
 8006dcc:	b118      	cbz	r0, 8006dd6 <__swbuf_r+0x32>
 8006dce:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	6922      	ldr	r2, [r4, #16]
 8006dda:	1a98      	subs	r0, r3, r2
 8006ddc:	6963      	ldr	r3, [r4, #20]
 8006dde:	b2f6      	uxtb	r6, r6
 8006de0:	4283      	cmp	r3, r0
 8006de2:	4637      	mov	r7, r6
 8006de4:	dc05      	bgt.n	8006df2 <__swbuf_r+0x4e>
 8006de6:	4621      	mov	r1, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	f7ff fcbb 	bl	8006764 <_fflush_r>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d1ed      	bne.n	8006dce <__swbuf_r+0x2a>
 8006df2:	68a3      	ldr	r3, [r4, #8]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	60a3      	str	r3, [r4, #8]
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	6022      	str	r2, [r4, #0]
 8006dfe:	701e      	strb	r6, [r3, #0]
 8006e00:	6962      	ldr	r2, [r4, #20]
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d004      	beq.n	8006e12 <__swbuf_r+0x6e>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	07db      	lsls	r3, r3, #31
 8006e0c:	d5e1      	bpl.n	8006dd2 <__swbuf_r+0x2e>
 8006e0e:	2e0a      	cmp	r6, #10
 8006e10:	d1df      	bne.n	8006dd2 <__swbuf_r+0x2e>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4628      	mov	r0, r5
 8006e16:	f7ff fca5 	bl	8006764 <_fflush_r>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d0d9      	beq.n	8006dd2 <__swbuf_r+0x2e>
 8006e1e:	e7d6      	b.n	8006dce <__swbuf_r+0x2a>

08006e20 <__swsetup_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4b29      	ldr	r3, [pc, #164]	@ (8006ec8 <__swsetup_r+0xa8>)
 8006e24:	4605      	mov	r5, r0
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	460c      	mov	r4, r1
 8006e2a:	b118      	cbz	r0, 8006e34 <__swsetup_r+0x14>
 8006e2c:	6a03      	ldr	r3, [r0, #32]
 8006e2e:	b90b      	cbnz	r3, 8006e34 <__swsetup_r+0x14>
 8006e30:	f7ff fa00 	bl	8006234 <__sinit>
 8006e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e38:	0719      	lsls	r1, r3, #28
 8006e3a:	d422      	bmi.n	8006e82 <__swsetup_r+0x62>
 8006e3c:	06da      	lsls	r2, r3, #27
 8006e3e:	d407      	bmi.n	8006e50 <__swsetup_r+0x30>
 8006e40:	2209      	movs	r2, #9
 8006e42:	602a      	str	r2, [r5, #0]
 8006e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4e:	e033      	b.n	8006eb8 <__swsetup_r+0x98>
 8006e50:	0758      	lsls	r0, r3, #29
 8006e52:	d512      	bpl.n	8006e7a <__swsetup_r+0x5a>
 8006e54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e56:	b141      	cbz	r1, 8006e6a <__swsetup_r+0x4a>
 8006e58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d002      	beq.n	8006e66 <__swsetup_r+0x46>
 8006e60:	4628      	mov	r0, r5
 8006e62:	f7ff fafb 	bl	800645c <_free_r>
 8006e66:	2300      	movs	r3, #0
 8006e68:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	2300      	movs	r3, #0
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b94b      	cbnz	r3, 8006e9a <__swsetup_r+0x7a>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e90:	d003      	beq.n	8006e9a <__swsetup_r+0x7a>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 f883 	bl	8006fa0 <__smakebuf_r>
 8006e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9e:	f013 0201 	ands.w	r2, r3, #1
 8006ea2:	d00a      	beq.n	8006eba <__swsetup_r+0x9a>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	60a2      	str	r2, [r4, #8]
 8006ea8:	6962      	ldr	r2, [r4, #20]
 8006eaa:	4252      	negs	r2, r2
 8006eac:	61a2      	str	r2, [r4, #24]
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	b942      	cbnz	r2, 8006ec4 <__swsetup_r+0xa4>
 8006eb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eb6:	d1c5      	bne.n	8006e44 <__swsetup_r+0x24>
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	0799      	lsls	r1, r3, #30
 8006ebc:	bf58      	it	pl
 8006ebe:	6962      	ldrpl	r2, [r4, #20]
 8006ec0:	60a2      	str	r2, [r4, #8]
 8006ec2:	e7f4      	b.n	8006eae <__swsetup_r+0x8e>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e7f7      	b.n	8006eb8 <__swsetup_r+0x98>
 8006ec8:	2000001c 	.word	0x2000001c

08006ecc <_raise_r>:
 8006ecc:	291f      	cmp	r1, #31
 8006ece:	b538      	push	{r3, r4, r5, lr}
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	d904      	bls.n	8006ee0 <_raise_r+0x14>
 8006ed6:	2316      	movs	r3, #22
 8006ed8:	6003      	str	r3, [r0, #0]
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ee2:	b112      	cbz	r2, 8006eea <_raise_r+0x1e>
 8006ee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ee8:	b94b      	cbnz	r3, 8006efe <_raise_r+0x32>
 8006eea:	4628      	mov	r0, r5
 8006eec:	f000 f830 	bl	8006f50 <_getpid_r>
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efa:	f000 b817 	b.w	8006f2c <_kill_r>
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d00a      	beq.n	8006f18 <_raise_r+0x4c>
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	d103      	bne.n	8006f0e <_raise_r+0x42>
 8006f06:	2316      	movs	r3, #22
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	e7e7      	b.n	8006ede <_raise_r+0x12>
 8006f0e:	2100      	movs	r1, #0
 8006f10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f14:	4620      	mov	r0, r4
 8006f16:	4798      	blx	r3
 8006f18:	2000      	movs	r0, #0
 8006f1a:	e7e0      	b.n	8006ede <_raise_r+0x12>

08006f1c <raise>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	@ (8006f28 <raise+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f7ff bfd3 	b.w	8006ecc <_raise_r>
 8006f26:	bf00      	nop
 8006f28:	2000001c 	.word	0x2000001c

08006f2c <_kill_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	@ (8006f4c <_kill_r+0x20>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	f7fa fe15 	bl	8001b68 <_kill>
 8006f3e:	1c43      	adds	r3, r0, #1
 8006f40:	d102      	bne.n	8006f48 <_kill_r+0x1c>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	b103      	cbz	r3, 8006f48 <_kill_r+0x1c>
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000518 	.word	0x20000518

08006f50 <_getpid_r>:
 8006f50:	f7fa be02 	b.w	8001b58 <_getpid>

08006f54 <__swhatbuf_r>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	b096      	sub	sp, #88	@ 0x58
 8006f60:	4615      	mov	r5, r2
 8006f62:	461e      	mov	r6, r3
 8006f64:	da0d      	bge.n	8006f82 <__swhatbuf_r+0x2e>
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f6c:	f04f 0100 	mov.w	r1, #0
 8006f70:	bf14      	ite	ne
 8006f72:	2340      	movne	r3, #64	@ 0x40
 8006f74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f78:	2000      	movs	r0, #0
 8006f7a:	6031      	str	r1, [r6, #0]
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	b016      	add	sp, #88	@ 0x58
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	466a      	mov	r2, sp
 8006f84:	f000 f848 	bl	8007018 <_fstat_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	dbec      	blt.n	8006f66 <__swhatbuf_r+0x12>
 8006f8c:	9901      	ldr	r1, [sp, #4]
 8006f8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f96:	4259      	negs	r1, r3
 8006f98:	4159      	adcs	r1, r3
 8006f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f9e:	e7eb      	b.n	8006f78 <__swhatbuf_r+0x24>

08006fa0 <__smakebuf_r>:
 8006fa0:	898b      	ldrh	r3, [r1, #12]
 8006fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fa4:	079d      	lsls	r5, r3, #30
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	d507      	bpl.n	8006fbc <__smakebuf_r+0x1c>
 8006fac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	6163      	str	r3, [r4, #20]
 8006fb8:	b003      	add	sp, #12
 8006fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fbc:	ab01      	add	r3, sp, #4
 8006fbe:	466a      	mov	r2, sp
 8006fc0:	f7ff ffc8 	bl	8006f54 <__swhatbuf_r>
 8006fc4:	9f00      	ldr	r7, [sp, #0]
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	4639      	mov	r1, r7
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7ff faba 	bl	8006544 <_malloc_r>
 8006fd0:	b948      	cbnz	r0, 8006fe6 <__smakebuf_r+0x46>
 8006fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd6:	059a      	lsls	r2, r3, #22
 8006fd8:	d4ee      	bmi.n	8006fb8 <__smakebuf_r+0x18>
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	f043 0302 	orr.w	r3, r3, #2
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	e7e2      	b.n	8006fac <__smakebuf_r+0xc>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	6020      	str	r0, [r4, #0]
 8006fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	9b01      	ldr	r3, [sp, #4]
 8006ff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ff6:	b15b      	cbz	r3, 8007010 <__smakebuf_r+0x70>
 8006ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f000 f81d 	bl	800703c <_isatty_r>
 8007002:	b128      	cbz	r0, 8007010 <__smakebuf_r+0x70>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	431d      	orrs	r5, r3
 8007014:	81a5      	strh	r5, [r4, #12]
 8007016:	e7cf      	b.n	8006fb8 <__smakebuf_r+0x18>

08007018 <_fstat_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	@ (8007038 <_fstat_r+0x20>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	f7fa fdff 	bl	8001c28 <_fstat>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	d102      	bne.n	8007034 <_fstat_r+0x1c>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	b103      	cbz	r3, 8007034 <_fstat_r+0x1c>
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	bd38      	pop	{r3, r4, r5, pc}
 8007036:	bf00      	nop
 8007038:	20000518 	.word	0x20000518

0800703c <_isatty_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	@ (8007058 <_isatty_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7fa fdfe 	bl	8001c48 <_isatty>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_isatty_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_isatty_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000518 	.word	0x20000518

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
