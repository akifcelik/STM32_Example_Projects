
STM32F446RE_DAC_DMA_WITH_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e58  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002008  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800602c  0800602c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006034  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08006040  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08006040  000081d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9b5  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d1  00000000  00000000  000169f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00018bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae5  00000000  00000000  000199b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224b4  00000000  00000000  0001a495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ceb  00000000  00000000  0003c949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2cc1  00000000  00000000  0004d634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001202f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac0  00000000  00000000  00120338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00123df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004004 	.word	0x08004004

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004004 	.word	0x08004004

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	f5ad 5dff 	sub.w	sp, sp, #8160	@ 0x1fe0
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fd71 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f88f 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fac7 	bl	8000a98 <MX_GPIO_Init>
  MX_DMA_Init();
 800050a:	f000 fa9d 	bl	8000a48 <MX_DMA_Init>
  MX_DAC_Init();
 800050e:	f000 f8fd 	bl	800070c <MX_DAC_Init>
  MX_TIM8_Init();
 8000512:	f000 f9cf 	bl	80008b4 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000516:	f000 f92d 	bl	8000774 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800051a:	f000 fa6b 	bl	80009f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint32_t saw_or_sine 	= 0;  // == 0  is ramp , == 1 is sine
  //-----
  //uint32_t index_count 		= 0;
  uint32_t window_len		= 2041;
 800051e:	f240 73f9 	movw	r3, #2041	@ 0x7f9
 8000522:	f507 52ff 	add.w	r2, r7, #8160	@ 0x1fe0
 8000526:	f102 020c 	add.w	r2, r2, #12
 800052a:	6013      	str	r3, [r2, #0]
  //const uint16_t Y [3446] = {50, 50, 70, 72, 72, 72, 72, 72, 72, 72, 93, 95, 95, 95, 95, 95, 95, 115, 118, 118, 118, 118, 118, 118, 138, 140, 140, 140, 140, 140, 140, 161, 163, 163, 163, 163, 163, 163, 184, 186, 186, 186, 186, 186, 186, 206, 208, 208, 208, 208, 208, 208, 229, 231, 231, 231, 231, 231, 252, 254, 274, 297, 318, 320, 340, 320, 318, 318, 318, 318, 318, 318, 297, 295, 295, 295, 295, 295, 295, 295, 274, 272, 272, 272, 272, 272, 272, 252, 249, 249, 249, 249, 249, 249, 229, 227, 227, 227, 227, 227, 227, 229, 231, 252, 254, 274, 277, 297, 299, 320, 322, 343, 365, 367, 388, 390, 411, 413, 433, 436, 456, 458, 479, 481, 501, 504, 524, 547, 549, 570, 572, 592, 595, 615, 617, 638, 640, 660, 663, 683, 685, 706, 708, 729, 751, 754, 774, 776, 797, 799, 819, 822, 842, 844, 865, 867, 888, 890, 910, 913, 933, 956, 958, 978, 981, 1001, 1003, 1024, 1026, 1047, 1049, 1069, 1072, 1092, 1094, 1115, 1137, 1140, 1160, 1162, 1183, 1185, 1206, 1208, 1228, 1231, 1251, 1253, 1274, 1276, 1296, 1299, 1319, 1342, 1344, 1365, 1367, 1387, 1390, 1410, 1412, 1433, 1435, 1455, 1458, 1478, 1480, 1501, 1503, 1524, 1546, 1549, 1569, 1571, 1592, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1614, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1637, 1639, 1639, 1660, 1662, 1662, 1662, 1683, 1685, 1685, 1685, 1705, 1708, 1708, 1708, 1728, 1730, 1730, 1751, 1753, 1753, 1753, 1773, 1776, 1776, 1796, 1798, 1798, 1798, 1819, 1821, 1821, 1842, 1844, 1844, 1864, 1867, 1867, 1867, 1887, 1889, 1889, 1910, 1912, 1912, 1912, 1932, 1935, 1935, 1955, 1957, 1957, 1957, 1978, 1980, 1980, 2001, 2003, 2003, 2003, 2023, 2026, 2026, 2046, 2048, 2048, 2069, 2071, 2071, 2071, 2091, 2094, 2094, 2094, 2094, 2114, 2116, 2116, 2116, 2116, 2137, 2139, 2139, 2139, 2139, 2160, 2162, 2162, 2162, 2162, 2182, 2185, 2185, 2185, 2205, 2207, 2207, 2207, 2207, 2228, 2230, 2230, 2230, 2230, 2250, 2253, 2253, 2253, 2253, 2273, 2275, 2275, 2275, 2275, 2296, 2298, 2298, 2298, 2298, 2319, 2321, 2321, 2321, 2321, 2341, 2344, 2344, 2344, 2344, 2364, 2366, 2366, 2366, 2387, 2389, 2389, 2389, 2409, 2412, 2412, 2412, 2412, 2432, 2434, 2434, 2434, 2455, 2457, 2457, 2457, 2478, 2480, 2480, 2500, 2503, 2503, 2503, 2523, 2525, 2525, 2546, 2548, 2548, 2548, 2568, 2571, 2571, 2591, 2593, 2593, 2614, 2616, 2616, 2637, 2639, 2639, 2659, 2662, 2662, 2682, 2684, 2684, 2684, 2705, 2725, 2725, 2725, 2725, 2725, 2727, 2748, 2748, 2748, 2748, 2748, 2748, 2748, 2750, 2771, 2771, 2771, 2771, 2771, 2771, 2773, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2796, 2816, 2816, 2796, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2773, 2752, 2752, 2750, 2730, 2750, 2752, 2750, 2730, 2730, 2727, 2705, 2684, 2682, 2659, 2657, 2637, 2634, 2614, 2612, 2612, 2591, 2589, 2589, 2568, 2566, 2566, 2546, 2543, 2543, 2543, 2523, 2521, 2521, 2521, 2500, 2498, 2498, 2498, 2478, 2475, 2475, 2475, 2475, 2455, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2455, 2475, 2475, 2455, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2455, 2475, 2455, 2453, 2455, 2478, 2480, 2480, 2500, 2503, 2503, 2523, 2525, 2525, 2546, 2548, 2548, 2568, 2571, 2571, 2591, 2593, 2593, 2614, 2616, 2616, 2637, 2639, 2639, 2659, 2662, 2662, 2682, 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2705, 2707, 2707, 2727, 2730, 2730, 2730, 2750, 2752, 2752, 2752, 2773, 2775, 2775, 2775, 2796, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2798, 2796, 2775, 2775, 2775, 2796, 2798, 2796, 2775, 2775, 2775, 2775, 2796, 2816, 2816, 2816, 2818, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2839, 2818, 2816, 2816, 2816, 2796, 2793, 2793, 2793, 2773, 2771, 2771, 2771, 2750, 2748, 2748, 2727, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2705, 2702, 2702, 2702, 2702, 2702, 2702, 2702, 2702, 2702, 2702, 2682, 2680, 2680, 2680, 2680, 2680, 2680, 2659, 2657, 2657, 2657, 2657, 2657, 2637, 2634, 2634, 2634, 2614, 2612, 2612, 2612, 2612, 2591, 2589, 2589, 2589, 2589, 2591, 2612, 2614, 2634, 2637, 2657, 2659, 2680, 2682, 2702, 2705, 2725, 2727, 2748, 2750, 2771, 2773, 2793, 2796, 2816, 2818, 2841, 2861, 2864, 2884, 2886, 2907, 2909, 2930, 2932, 2952, 2955, 2975, 2977, 2998, 3000, 3020, 3023, 3043, 3045, 3066, 3068, 3089, 3091, 3111, 3114, 3134, 3136, 3159, 3179, 3182, 3202, 3204, 3225, 3227, 3248, 3250, 3270, 3273, 3293, 3295, 3316, 3318, 3338, 3341, 3361, 3363, 3384, 3386, 3407, 3409, 3429, 3432, 3452, 3454, 3477, 3479, 3479, 3479, 3500, 3502, 3502, 3502, 3502, 3502, 3502, 3522, 3525, 3525, 3525, 3525, 3525, 3525, 3545, 3547, 3547, 3547, 3547, 3547, 3568, 3570, 3570, 3570, 3570, 3570, 3570, 3591, 3593, 3593, 3593, 3613, 3615, 3615, 3636, 3659, 3679, 3679, 3679, 3659, 3656, 3656, 3656, 3656, 3656, 3636, 3634, 3634, 3634, 3634, 3634, 3634, 3613, 3611, 3611, 3611, 3611, 3611, 3591, 3588, 3588, 3588, 3588, 3588, 3568, 3566, 3566, 3566, 3566, 3566, 3566, 3545, 3543, 3543, 3543, 3543, 3543, 3522, 3520, 3520, 3520, 3520, 3520, 3520, 3500, 3497, 3497, 3497, 3497, 3497, 3477, 3475, 3475, 3475, 3475, 3475, 3454, 3432, 3409, 3388, 3388, 3388, 3388, 3388, 3409, 3411, 3411, 3411, 3409, 3388, 3386, 3363, 3341, 3318, 3295, 3273, 3250, 3227, 3207, 3204, 3182, 3159, 3136, 3114, 3091, 3068, 3045, 3023, 3000, 2977, 2957, 2955, 2932, 2909, 2886, 2864, 2841, 2818, 2796, 2773, 2750, 2727, 2707, 2705, 2682, 2659, 2637, 2614, 2591, 2568, 2546, 2523, 2500, 2478, 2457, 2455, 2432, 2409, 2387, 2364, 2341, 2319, 2296, 2294, 2294, 2273, 2271, 2271, 2271, 2271, 2250, 2248, 2248, 2248, 2248, 2228, 2225, 2225, 2225, 2225, 2205, 2203, 2203, 2203, 2203, 2182, 2180, 2180, 2180, 2180, 2180, 2160, 2157, 2157, 2157, 2157, 2137, 2135, 2135, 2135, 2135, 2114, 2112, 2112, 2112, 2112, 2091, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2091, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2114, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2114, 2091, 2089, 2089, 2089, 2069, 2066, 2066, 2046, 2044, 2044, 2044, 2023, 2021, 2021, 2001, 1998, 1998, 1978, 1976, 1976, 1976, 1976, 1955, 1953, 1953, 1953, 1953, 1932, 1930, 1930, 1930, 1930, 1930, 1910, 1907, 1907, 1907, 1907, 1887, 1885, 1885, 1885, 1885, 1885, 1864, 1862, 1862, 1862, 1862, 1862, 1842, 1839, 1839, 1839, 1839, 1819, 1817, 1817, 1817, 1817, 1817, 1796, 1794, 1794, 1794, 1794, 1794, 1773, 1771, 1771, 1771, 1771, 1751, 1748, 1748, 1748, 1748, 1748, 1728, 1726, 1726, 1726, 1726, 1726, 1705, 1703, 1703, 1703, 1703, 1683, 1660, 1637, 1614, 1592, 1569, 1546, 1524, 1503, 1501, 1478, 1455, 1435, 1433, 1410, 1387, 1367, 1365, 1342, 1340, 1319, 1317, 1317, 1317, 1317, 1296, 1294, 1294, 1294, 1294, 1274, 1271, 1271, 1271, 1271, 1251, 1249, 1249, 1249, 1228, 1226, 1226, 1226, 1226, 1226, 1206, 1183, 1160, 1137, 1115, 1092, 1090, 1069, 1067, 1067, 1067, 1047, 1044, 1044, 1024, 1001, 978, 956, 933, 910, 888, 865, 842, 819, 797, 774, 751, 729, 706, 683, 660, 638, 636, 615, 592, 570, 547, 524, 501, 479, 456, 433, 411, 390, 390, 388, 367, 367, 365, 345, 345, 345, 345, 365, 367, 367, 367, 367, 367, 367, 388, 390, 390, 390, 390, 411, 413, 433, 456, 458, 479, 481, 501, 504, 524, 526, 547, 549, 570, 592, 595, 615, 617, 638, 640, 660, 663, 683, 706, 708, 729, 731, 751, 754, 774, 776, 797, 819, 822, 842, 844, 865, 867, 888, 890, 910, 933, 935, 956, 958, 978, 981, 1001, 1003, 1024, 1026, 1047, 1069, 1072, 1092, 1094, 1115, 1117, 1137, 1140, 1160, 1183, 1185, 1206, 1226, 1226, 1226, 1226, 1226, 1226, 1206, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1183, 1181, 1181, 1181, 1181, 1181, 1160, 1158, 1158, 1158, 1158, 1158, 1137, 1135, 1137, 1140, 1160, 1162, 1162, 1162, 1183, 1185, 1185, 1185, 1185, 1185, 1206, 1208, 1208, 1208, 1208, 1228, 1231, 1231, 1251, 1253, 1253, 1253, 1253, 1274, 1276, 1276, 1276, 1276, 1296, 1299, 1299, 1299, 1299, 1319, 1321, 1321, 1321, 1321, 1321, 1342, 1344, 1344, 1344, 1344, 1365, 1367, 1367, 1367, 1367, 1387, 1390, 1390, 1390, 1390, 1410, 1412, 1412, 1412, 1412, 1433, 1435, 1435, 1435, 1435, 1455, 1458, 1458, 1458, 1458, 1458, 1478, 1480, 1480, 1480, 1501, 1503, 1503, 1503, 1503, 1524, 1526, 1526, 1526, 1526, 1546, 1549, 1549, 1549, 1549, 1546, 1544, 1544, 1544, 1524, 1521, 1521, 1521, 1501, 1499, 1499, 1499, 1478, 1476, 1476, 1476, 1455, 1453, 1453, 1453, 1433, 1430, 1430, 1430, 1410, 1408, 1408, 1408, 1387, 1367, 1367, 1367, 1367, 1387, 1390, 1390, 1390, 1390, 1410, 1412, 1412, 1412, 1412, 1410, 1387, 1365, 1362, 1342, 1319, 1296, 1294, 1274, 1251, 1228, 1226, 1206, 1183, 1160, 1158, 1137, 1115, 1092, 1090, 1069, 1047, 1024, 1022, 1001, 978, 976, 956, 933, 910, 908, 888, 865, 842, 840, 819, 797, 774, 772, 751, 729, 706, 704, 683, 660, 638, 636, 615, 592, 570, 567, 547, 524, 522, 501, 479, 456, 454, 433, 411, 388, 386, 365, 343, 320, 318, 297, 274, 252, 249, 229, 206, 204, 184, 181, 181, 181, 181, 161, 159, 159, 159, 159, 159, 159, 138, 115, 93, 72, 70, 50, 2616, 2616, 2616, 2616, 2616, 2637, 2639, 2639, 2639, 2639, 2659, 2662, 2682, 2702, 2705, 2725, 2727, 2748, 2750, 2771, 2771, 2773, 2793, 2796, 2816, 2818, 2839, 2841, 2861, 2864, 2884, 2886, 2907, 2909, 2930, 2932, 2952, 2952, 2955, 2975, 2977, 2998, 3000, 3020, 3023, 3043, 3045, 3066, 3068, 3089, 3091, 3111, 3114, 3134, 3134, 3136, 3157, 3159, 3179, 3182, 3202, 3204, 3225, 3227, 3248, 3250, 3270, 3273, 3293, 3295, 3316, 3318, 3338, 3338, 3341, 3361, 3363, 3384, 3386, 3407, 3409, 3429, 3432, 3452, 3454, 3475, 3477, 3497, 3477, 3475, 3475, 3475, 3475, 3454, 3434, 3432, 3411, 3409, 3388, 3386, 3366, 3363, 3343, 3341, 3320, 3318, 3298, 3295, 3275, 3273, 3252, 3250, 3229, 3227, 3207, 3204, 3182, 3161, 3159, 3139, 3136, 3116, 3114, 3093, 3091, 3070, 3068, 3048, 3045, 3025, 3023, 3002, 3000, 2980, 2977, 2957, 2955, 2934, 2932, 2911, 2909, 2889, 2886, 2866, 2864, 2841, 2821, 2818, 2798, 2796, 2775, 2773, 2752, 2750, 2730, 2727, 2707, 2705, 2684, 2682, 2662, 2659, 2639, 2637, 2616, 2230, 2230, 2250, 2253, 2253, 2253, 2253, 2273, 2275, 2275, 2275, 2275, 2296, 2298, 2298, 2298, 2319, 2341, 2364, 2387, 2409, 2432, 2455, 2478, 2500, 2523, 2543, 2546, 2568, 2591, 2614, 2637, 2659, 2682, 2705, 2727, 2750, 2773, 2793, 2796, 2818, 2841, 2864, 2886, 2909, 2932, 2955, 2977, 3000, 3023, 3045, 3066, 3068, 3091, 3114, 3136, 3159, 3182, 3204, 3227, 3250, 3273, 3295, 3316, 3318, 3341, 3363, 3386, 3407, 3386, 3384, 3384, 3363, 3341, 3318, 3316, 3295, 3273, 3250, 3227, 3204, 3182, 3159, 3136, 3114, 3111, 3091, 3068, 3045, 3023, 3000, 2977, 2955, 2932, 2930, 2909, 2886, 2864, 2841, 2818, 2796, 2773, 2750, 2727, 2725, 2705, 2682, 2659, 2637, 2614, 2591, 2568, 2546, 2543, 2523, 2500, 2478, 2455, 2432, 2409, 2387, 2364, 2341, 2339, 2319, 2296, 2273, 2250, 2230, 2707, 2707, 2707, 2727, 2748, 2748, 2748, 2727, 2707, 2480, 2500, 2523, 2543, 2546, 2568, 2589, 2591, 2614, 2637, 2659, 2680, 2680, 2659, 2637, 2614, 2591, 2571, 2568, 2546, 2525, 2523, 2503, 2500, 2480, 2616, 2637, 2657, 2637, 2616, 2593, 2614, 2634, 2614, 2593, 2571, 2591, 2612, 2591, 2571, 2548, 2568, 2589, 2568, 2548, 2525, 2546, 2566, 2546, 2525, 2503, 2523, 2543, 2523, 2503, 2480, 2500, 2521, 2500, 2480, 2457, 2478, 2498, 2478, 2457, 2457, 2478, 2498, 2478, 2457, 1867, 1867, 1867, 1867, 1867, 1867, 1867, 1887, 1889, 1889, 1889, 1889, 1889, 1910, 1912, 1912, 1912, 1912, 1932, 1935, 1935, 1935, 1955, 1957, 1957, 1957, 1957, 1978, 1980, 1980, 1980, 2001, 2003, 2003, 2003, 2023, 2026, 2026, 2046, 2066, 2066, 2066, 2069, 2089, 2089, 2089, 2089, 2091, 2112, 2112, 2112, 2114, 2135, 2135, 2135, 2137, 2157, 2157, 2157, 2160, 2180, 2180, 2180, 2180, 2182, 2203, 2203, 2203, 2205, 2225, 2225, 2225, 2228, 2248, 2248, 2248, 2250, 2271, 2271, 2271, 2273, 2294, 2294, 2294, 2296, 2316, 2316, 2316, 2316, 2319, 2339, 2339, 2339, 2341, 2362, 2362, 2362, 2364, 2384, 2384, 2384, 2387, 2407, 2407, 2407, 2407, 2409, 2430, 2430, 2430, 2432, 2453, 2453, 2453, 2455, 2475, 2475, 2475, 2455, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2432, 2430, 2430, 2430, 2430, 2430, 2409, 2407, 2407, 2407, 2407, 2387, 2384, 2384, 2384, 2384, 2364, 2341, 2319, 2298, 2296, 2275, 2275, 2275, 2296, 2298, 2298, 2298, 2298, 2319, 2321, 2321, 2321, 2321, 2321, 2319, 2298, 2298, 2296, 2275, 2275, 2273, 2253, 2253, 2250, 2230, 2230, 2228, 2207, 2207, 2205, 2185, 2185, 2182, 2162, 2162, 2160, 2139, 2139, 2137, 2116, 2116, 2114, 2094, 2091, 2071, 2071, 2069, 2048, 2048, 2046, 2026, 2026, 2023, 2003, 2003, 2001, 1980, 1980, 1978, 1957, 1957, 1955, 1935, 1935, 1932, 1912, 1912, 1910, 1889, 1889, 1887, 1867, 2094, 2094, 2094, 2114, 2135, 2137, 2157, 2160, 2180, 2180, 2182, 2203, 2205, 2225, 2228, 2248, 2250, 2271, 2273, 2294, 2296, 2316, 2319, 2339, 2339, 2341, 2362, 2364, 2384, 2387, 2407, 2407, 2407, 2407, 2407, 2387, 2384, 2384, 2384, 2384, 2384, 2384, 2364, 2362, 2362, 2362, 2341, 2339, 2339, 2319, 2298, 2298, 2296, 2275, 2275, 2275, 2273, 2253, 2253, 2253, 2250, 2230, 2230, 2230, 2228, 2207, 2207, 2207, 2205, 2185, 2185, 2185, 2185, 2182, 2162, 2162, 2162, 2160, 2139, 2139, 2139, 2137, 2116, 2116, 2116, 2114, 2094, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1842, 1844, 1844, 1844, 1844, 1844, 1864, 1885, 1885, 1887, 1907, 1910, 1930, 1930, 1930, 1932, 1953, 1955, 1976, 1976, 1978, 1998, 1998, 2001, 2021, 2021, 2023, 2044, 2044, 2046, 2066, 2066, 2069, 2089, 2089, 2091, 2112, 2112, 2114, 2135, 2135, 2137, 2157, 2157, 2160, 2180, 2180, 2182, 2203, 2203, 2205, 2225, 2225, 2228, 2248, 2248, 2250, 2271, 2271, 2273, 2294, 2294, 2296, 2316, 2316, 2296, 2294, 2294, 2294, 2294, 2273, 2253, 2253, 2250, 2230, 2228, 2207, 2207, 2205, 2185, 2182, 2162, 2162, 2160, 2139, 2139, 2137, 2116, 2114, 2094, 2094, 2091, 2071, 2069, 2048, 2048, 2046, 2026, 2023, 2003, 2003, 2001, 1980, 1978, 1957, 1957, 1955, 1935, 1935, 1932, 1912, 1910, 1889, 1889, 1887, 1867, 1864, 1844, 1844, 1842, 1821, 1753, 1753, 1753, 1773, 1776, 1776, 1776, 1776, 1796, 1798, 1798, 1798, 1798, 1819, 1821, 1821, 1821, 1821, 1842, 1844, 1844, 1844, 1844, 1844, 1864, 1867, 1867, 1867, 1867, 1887, 1889, 1889, 1889, 1889, 1910, 1912, 1912, 1912, 1912, 1932, 1935, 1935, 1935, 1955, 1976, 1978, 2001, 2003, 2023, 2026, 2046, 2069, 2091, 2112, 2091, 2089, 2089, 2089, 2069, 2066, 2066, 2066, 2046, 2044, 2044, 2023, 2021, 2021, 2021, 2001, 1998, 1998, 1978, 1976, 1976, 1976, 1955, 1953, 1953, 1932, 1930, 1930, 1930, 1910, 1907, 1907, 1887, 1885, 1885, 1864, 1862, 1862, 1862, 1842, 1839, 1839, 1819, 1817, 1817, 1817, 1796, 1794, 1794, 1773, 1753, 2071, 2071, 2091, 2112, 2112, 2091, 2071, 2071, 2091, 2112, 2091, 2071, 1662, 1662, 1662, 1662, 1662, 1662, 1683, 1685, 1685, 1685, 1685, 1705, 1708, 1708, 1708, 1708, 1728, 1730, 1730, 1730, 1728, 1708, 1728, 1730, 1730, 1730, 1730, 1730, 1751, 1753, 1753, 1753, 1753, 1753, 1773, 1776, 1776, 1776, 1776, 1796, 1798, 1798, 1798, 1798, 1798, 1819, 1821, 1821, 1821, 1821, 1821, 1842, 1844, 1844, 1844, 1844, 1844, 1864, 1867, 1867, 1867, 1867, 1887, 1889, 1889, 1889, 1889, 1889, 1910, 1912, 1912, 1912, 1912, 1912, 1932, 1935, 1935, 1935, 1935, 1935, 1955, 1957, 1957, 1957, 1957, 1978, 1980, 1980, 1980, 1980, 2001, 2003, 2003, 2003, 2023, 2026, 2026, 2046, 2048, 2048, 2048, 2069, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2069, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2046, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2023, 2021, 2021, 2021, 2001, 1998, 1998, 1998, 1978, 1976, 1976, 1976, 1955, 1953, 1953, 1953, 1932, 1930, 1930, 1930, 1910, 1907, 1907, 1907, 1887, 1885, 1885, 1885, 1885, 1864, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1842, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1819, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1796, 1794, 1794, 1796, 1817, 1796, 1773, 1753, 1751, 1730, 1728, 1708, 1708, 1705, 1685, 1683, 1662, 1730, 1730, 1751, 1771, 1771, 1751, 1730, 1299, 1319, 1321, 1321, 1321, 1321, 1342, 1365, 1387, 1410, 1430, 1433, 1455, 1478, 1499, 1501, 1524, 1546, 1569, 1589, 1592, 1614, 1637, 1660, 1683, 1703, 1703, 1703, 1683, 1680, 1680, 1680, 1660, 1637, 1614, 1592, 1569, 1546, 1524, 1501, 1480, 1478, 1455, 1435, 1433, 1410, 1387, 1367, 1365, 1342, 1321, 1319, 1299, 1276, 1276, 1276, 1296, 1299, 1319, 1342, 1362, 1365, 1387, 1408, 1410, 1433, 1453, 1455, 1478, 1501, 1524, 1544, 1546, 1569, 1592, 1614, 1637, 1658, 1658, 1658, 1658, 1637, 1614, 1592, 1569, 1546, 1524, 1501, 1480, 1478, 1455, 1433, 1412, 1410, 1387, 1367, 1365, 1342, 1321, 1319, 1296, 1276, 1617, 1617, 1637, 1658, 1658, 1637, 1617, 1549, 1549, 1569, 1571, 1571, 1592, 1594, 1614, 1635, 1635, 1614, 1612, 1612, 1592, 1589, 1569, 1549, 1571, 1592, 1612, 1592, 1571, 254, 254, 254, 254, 254, 254, 274, 277, 297, 299, 320, 322, 343, 345, 365, 367, 388, 390, 411, 413, 433, 436, 456, 458, 479, 481, 501, 504, 524, 526, 547, 549, 570, 572, 592, 595, 615, 617, 638, 640, 660, 663, 683, 685, 706, 708, 729, 731, 751, 774, 776, 797, 799, 819, 822, 842, 844, 865, 867, 888, 890, 910, 913, 933, 935, 956, 958, 978, 981, 1001, 1003, 1024, 1026, 1047, 1049, 1069, 1072, 1092, 1094, 1115, 1117, 1137, 1140, 1160, 1162, 1183, 1185, 1206, 1208, 1228, 1231, 1251, 1253, 1274, 1276, 1296, 1299, 1319, 1321, 1342, 1365, 1367, 1387, 1390, 1410, 1412, 1433, 1435, 1455, 1458, 1478, 1480, 1501, 1503, 1524, 1526, 1546, 1549, 1569, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1569, 1567, 1567, 1567, 1567, 1546, 1524, 1521, 1501, 1499, 1478, 1476, 1455, 1453, 1433, 1430, 1410, 1408, 1387, 1385, 1365, 1362, 1342, 1319, 1317, 1296, 1294, 1274, 1271, 1251, 1249, 1228, 1226, 1206, 1203, 1183, 1181, 1160, 1158, 1137, 1115, 1112, 1092, 1090, 1069, 1067, 1047, 1044, 1024, 1022, 1001, 999, 978, 976, 956, 953, 933, 910, 908, 888, 885, 865, 863, 842, 840, 819, 817, 797, 794, 774, 772, 751, 749, 729, 706, 704, 683, 681, 660, 658, 638, 636, 615, 613, 592, 590, 570, 567, 547, 545, 524, 501, 499, 479, 477, 456, 454, 433, 431, 411, 408, 388, 386, 365, 363, 343, 340, 320, 297, 295, 274, 254, 1458, 1458, 1458, 1478, 1480, 1480, 1501, 1503, 1503, 1524, 1526, 1526, 1546, 1549, 1569, 1589, 1589, 1569, 1567, 1567, 1546, 1544, 1544, 1524, 1521, 1521, 1501, 1499, 1499, 1478, 1458, 1526, 1526, 1546, 1567, 1567, 1546, 1526, 1503, 1524, 1544, 1524, 1503, 1367, 1387, 1390, 1390, 1390, 1410, 1412, 1412, 1412, 1433, 1435, 1435, 1455, 1478, 1501, 1521, 1501, 1499, 1499, 1499, 1478, 1476, 1476, 1455, 1453, 1453, 1453, 1433, 1430, 1410, 1390, 1387, 1367, 1321, 1321, 1321, 1321, 1321, 1321, 1342, 1344, 1344, 1344, 1344, 1344, 1365, 1385, 1387, 1410, 1430, 1410, 1408, 1408, 1408, 1408, 1387, 1385, 1385, 1385, 1365, 1362, 1362, 1342, 1321, 186, 186, 186, 206, 208, 208, 229, 252, 274, 277, 297, 320, 343, 345, 365, 388, 411, 413, 433, 456, 479, 481, 501, 524, 526, 547, 570, 592, 595, 615, 638, 660, 663, 683, 706, 729, 731, 751, 774, 797, 799, 819, 842, 865, 867, 888, 910, 933, 935, 956, 978, 1001, 1003, 1024, 1047, 1069, 1072, 1092, 1115, 1137, 1140, 1160, 1183, 1185, 1206, 1228, 1251, 1253, 1274, 1296, 1319, 1321, 1342, 1365, 1385, 1385, 1385, 1385, 1365, 1362, 1362, 1362, 1362, 1342, 1340, 1340, 1340, 1340, 1319, 1317, 1296, 1274, 1271, 1251, 1228, 1206, 1183, 1160, 1158, 1137, 1115, 1092, 1069, 1047, 1044, 1024, 1001, 978, 956, 933, 910, 908, 888, 865, 842, 819, 797, 774, 772, 751, 729, 706, 683, 660, 638, 636, 615, 592, 570, 547, 524, 522, 501, 479, 456, 433, 411, 388, 365, 363, 343, 320, 297, 274, 252, 249, 229, 206, 186, 1344, 1344, 1365, 1385, 1385, 1365, 1344, 1253, 1253, 1274, 1276, 1274, 1253, 1274, 1276, 1276, 1276, 1276, 1276, 1276, 1296, 1319, 1340, 1340, 1319, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1296, 1274, 1253, 1140, 1140, 1140, 1160, 1183, 1206, 1208, 1228, 1251, 1274, 1296, 1317, 1296, 1294, 1294, 1294, 1294, 1294, 1274, 1251, 1228, 1208, 1206, 1183, 1162, 1160, 1140, 231, 252, 272, 252, 231};
  // -- F 16 3
  //const uint16_t X [7917] = {};
  //const uint16_t Y [7917] = {50, 50, 72, 75, 98, 123, 148, 151, 174, 176, 199, 202, 224, 250, 252, 275, 278, 301, 326, 351, 354, 377, 402, 405, 427, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 427, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 402, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 377, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 377, 379, 402, 405, 405, 427, 430, 453, 455, 478, 481, 503, 529, 554, 580, 605, 630, 656, 681, 706, 732, 757, 760, 782, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 808, 810, 810, 810, 810, 810, 833, 836, 836, 836, 836, 836, 858, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 884, 886, 886, 886, 886, 886, 886, 886, 886, 909, 912, 935, 937, 937, 937, 960, 962, 962, 962, 985, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 1011, 1036, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1061, 1084, 1084, 1084, 1084, 1087, 1112, 1135, 1135, 1137, 1160, 1160, 1160, 1163, 1186, 1188, 1211, 1211, 1214, 1236, 1236, 1239, 1262, 1262, 1262, 1262, 1262, 1264, 1287, 1290, 1312, 1312, 1315, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1363, 1366, 1388, 1388, 1388, 1388, 1388, 1391, 1414, 1414, 1414, 1414, 1416, 1439, 1439, 1439, 1439, 1439, 1439, 1442, 1465, 1465, 1465, 1467, 1490, 1490, 1490, 1492, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1518, 1541, 1543, 1566, 1566, 1566, 1566, 1566, 1566, 1569, 1591, 1591, 1591, 1591, 1591, 1594, 1617, 1617, 1617, 1617, 1619, 1642, 1642, 1645, 1667, 1670, 1693, 1693, 1693, 1695, 1721, 1744, 1746, 1769, 1771, 1794, 1794, 1794, 1797, 1820, 1820, 1822, 1845, 1848, 1870, 1870, 1873, 1896, 1896, 1896, 1898, 1924, 1946, 1946, 1946, 1946, 1946, 1946, 1949, 1974, 1997, 1997, 2000, 2022, 2022, 2022, 2022, 2025, 2048, 2048, 2048, 2048, 2048, 2050, 2073, 2073, 2073, 2073, 2073, 2076, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2076, 2073, 2073, 2073, 2073, 2073, 2073, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2025, 2022, 2022, 2022, 2022, 2022, 2022, 2000, 1997, 1997, 1997, 1974, 1949, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1924, 1921, 1898, 1896, 1896, 1896, 1896, 1896, 1873, 1870, 1870, 1870, 1870, 1870, 1848, 1845, 1845, 1845, 1845, 1822, 1820, 1820, 1820, 1820, 1820, 1820, 1797, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1771, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1746, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1746, 1769, 1769, 1771, 1794, 1794, 1794, 1797, 1820, 1822, 1845, 1848, 1873, 1896, 1898, 1924, 1946, 1949, 1974, 1997, 2000, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2000, 1974, 1949, 1924, 1898, 1873, 1870, 1870, 1870, 1873, 1896, 1896, 1896, 1896, 1896, 1898, 1921, 1924, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1949, 1974, 1997, 1997, 2000, 2022, 2022, 2022, 2022, 2022, 2025, 2048, 2048, 2048, 2048, 2048, 2050, 2073, 2073, 2073, 2076, 2099, 2099, 2099, 2101, 2124, 2124, 2124, 2124, 2124, 2124, 2126, 2149, 2149, 2149, 2152, 2175, 2177, 2203, 2225, 2225, 2225, 2228, 2253, 2279, 2301, 2301, 2304, 2327, 2329, 2352, 2355, 2378, 2380, 2403, 2403, 2405, 2431, 2456, 2479, 2479, 2482, 2504, 2507, 2530, 2530, 2532, 2558, 2580, 2580, 2583, 2608, 2631, 2634, 2656, 2656, 2656, 2659, 2684, 2710, 2733, 2733, 2735, 2758, 2760, 2783, 2786, 2809, 2811, 2834, 2834, 2837, 2862, 2885, 2887, 2910, 2913, 2935, 2935, 2938, 2961, 2963, 2989, 3012, 3014, 3037, 3037, 3039, 3065, 3088, 3088, 3090, 3113, 3116, 3138, 3141, 3164, 3166, 3189, 3192, 3214, 3217, 3240, 3242, 3265, 3265, 3268, 3293, 3316, 3318, 3341, 3344, 3367, 3367, 3369, 3394, 3417, 3417, 3420, 3443, 3445, 3468, 3471, 3496, 3519, 3519, 3521, 3544, 3544, 3547, 3572, 3595, 3597, 3620, 3620, 3623, 3648, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3648, 3623, 3620, 3597, 3595, 3572, 3547, 3521, 3496, 3471, 3448, 3448, 3445, 3420, 3397, 3397, 3394, 3369, 3346, 3344, 3318, 3293, 3270, 3268, 3242, 3217, 3194, 3192, 3169, 3166, 3141, 3116, 3093, 3090, 3065, 3039, 3017, 3014, 2991, 2989, 2963, 2938, 2915, 2913, 2887, 2864, 2862, 2837, 2814, 2811, 2786, 2763, 2760, 2735, 2712, 2710, 2684, 2659, 2636, 2634, 2608, 2583, 2560, 2558, 2532, 2509, 2507, 2482, 2459, 2456, 2431, 2405, 2383, 2380, 2357, 2355, 2332, 2329, 2304, 2279, 2253, 2228, 2205, 2203, 2177, 2154, 2152, 2129, 2126, 2101, 2076, 2050, 2048, 2048, 2025, 2000, 1974, 1949, 1924, 1898, 1873, 1848, 1822, 1799, 1797, 1774, 1774, 1771, 1749, 1746, 1721, 1695, 1670, 1645, 1619, 1617, 1617, 1617, 1617, 1617, 1594, 1591, 1591, 1591, 1569, 1566, 1566, 1566, 1543, 1518, 1515, 1515, 1515, 1515, 1515, 1492, 1467, 1442, 1416, 1391, 1366, 1340, 1315, 1290, 1264, 1239, 1214, 1188, 1163, 1137, 1112, 1087, 1061, 1036, 1011, 985, 960, 935, 909, 884, 858, 833, 808, 785, 785, 785, 782, 760, 757, 734, 734, 734, 732, 709, 709, 709, 709, 706, 683, 683, 683, 683, 683, 683, 681, 656, 633, 633, 633, 630, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 605, 582, 582, 582, 582, 580, 557, 557, 557, 557, 557, 554, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 529, 506, 506, 506, 503, 481, 481, 481, 481, 481, 478, 453, 427, 402, 377, 351, 326, 301, 275, 252, 252, 252, 252, 252, 250, 227, 227, 227, 227, 227, 224, 202, 202, 202, 199, 176, 176, 176, 176, 176, 176, 176, 174, 151, 151, 151, 151, 148, 126, 126, 123, 100, 100, 100, 100, 100, 98, 75, 75, 75, 75, 72, 50, 1898, 1924, 1949, 1974, 2000, 2002, 2002, 2002, 2025, 2048, 2048, 2048, 2050, 2073, 2076, 2099, 2101, 2124, 2101, 2076, 2053, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2073, 2076, 2099, 2076, 2050, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2050, 2076, 2101, 2124, 2124, 2126, 2152, 2177, 2203, 2225, 2228, 2253, 2276, 2279, 2301, 2304, 2329, 2355, 2378, 2380, 2403, 2405, 2431, 2456, 2479, 2482, 2507, 2532, 2558, 2580, 2580, 2583, 2608, 2631, 2634, 2659, 2684, 2710, 2733, 2735, 2758, 2760, 2786, 2809, 2811, 2837, 2862, 2887, 2910, 2913, 2935, 2938, 2963, 2989, 3012, 3014, 3039, 3065, 3088, 3090, 3113, 3116, 3141, 3164, 3166, 3192, 3217, 3240, 3242, 3268, 3290, 3293, 3318, 3344, 3367, 3369, 3394, 3417, 3420, 3422, 3422, 3422, 3422, 3422, 3422, 3422, 3422, 3422, 3420, 3397, 3420, 3445, 3471, 3493, 3493, 3471, 3468, 3468, 3468, 3468, 3468, 3468, 3468, 3468, 3468, 3468, 3471, 3496, 3519, 3519, 3521, 3524, 3524, 3547, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3547, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3544, 3521, 3496, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3471, 3448, 3445, 3422, 3420, 3397, 3397, 3420, 3443, 3445, 3468, 3471, 3493, 3496, 3521, 3544, 3544, 3544, 3547, 3549, 3549, 3549, 3549, 3547, 3524, 3524, 3521, 3496, 3473, 3471, 3448, 3448, 3445, 3422, 3420, 3397, 3394, 3372, 3369, 3346, 3344, 3321, 3318, 3296, 3293, 3270, 3270, 3268, 3245, 3242, 3219, 3217, 3192, 3169, 3169, 3166, 3141, 3118, 3116, 3093, 3093, 3093, 3090, 3065, 3042, 3039, 3017, 3014, 2991, 2989, 2966, 2963, 2941, 2938, 2915, 2915, 2913, 2890, 2887, 2864, 2862, 2837, 2814, 2811, 2788, 2788, 2786, 2763, 2760, 2738, 2735, 2712, 2710, 2687, 2684, 2662, 2659, 2636, 2634, 2611, 2608, 2583, 2560, 2560, 2558, 2535, 2532, 2509, 2509, 2507, 2484, 2482, 2459, 2456, 2433, 2431, 2405, 2383, 2383, 2380, 2357, 2355, 2332, 2332, 2329, 2304, 2281, 2279, 2256, 2253, 2230, 2228, 2205, 2203, 2180, 2180, 2177, 2152, 2129, 2126, 2104, 2101, 2099, 2076, 2073, 2073, 2073, 2050, 2028, 2028, 2028, 2028, 2028, 2050, 2053, 2053, 2050, 2028, 2028, 2028, 2028, 2028, 2025, 2002, 2002, 2002, 2002, 2002, 2000, 1977, 1974, 1951, 1949, 1926, 1926, 1926, 1926, 1926, 1926, 1924, 1898, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1898, 3346, 3369, 3394, 3417, 3394, 3369, 3346, 3346, 3369, 3392, 3369, 3346, 3270, 3270, 3293, 3316, 3318, 3344, 3367, 3367, 3344, 3321, 3318, 3293, 3270, 3270, 3293, 3318, 3344, 3367, 3367, 3344, 3318, 3296, 3293, 3270, 3194, 3217, 3242, 3268, 3290, 3290, 3290, 3268, 3245, 3242, 3219, 3217, 3194, 3169, 3192, 3217, 3242, 3265, 3268, 3290, 3290, 3268, 3242, 3219, 3217, 3194, 3192, 3169, 3093, 3093, 3116, 3138, 3141, 3164, 3166, 3189, 3192, 3214, 3192, 3166, 3143, 3141, 3118, 3116, 3093, 3042, 3065, 3090, 3113, 3116, 3138, 3141, 3164, 3141, 3116, 3093, 3090, 3067, 3065, 3042, 2991, 3014, 3039, 3062, 3065, 3088, 3090, 3113, 3113, 3090, 3067, 3065, 3042, 3039, 3017, 3014, 2991, 2941, 2963, 2989, 3012, 3014, 3037, 3039, 3062, 3039, 3014, 2991, 2989, 2966, 2963, 2941, 2915, 2915, 2938, 2961, 2963, 2986, 2989, 3012, 2989, 2963, 2941, 2938, 2915, 2864, 2887, 2913, 2935, 2938, 2961, 2938, 2913, 2890, 2887, 2864, 2814, 2814, 2837, 2859, 2862, 2887, 2910, 2913, 2935, 2935, 2913, 2890, 2887, 2862, 2839, 2837, 2814, 2788, 2811, 2837, 2862, 2885, 2862, 2837, 2811, 2788, 2636, 2659, 2684, 2707, 2710, 2733, 2735, 2758, 2760, 2783, 2786, 2809, 2811, 2834, 2811, 2786, 2763, 2760, 2738, 2735, 2712, 2710, 2687, 2684, 2662, 2659, 2636, 2712, 2712, 2735, 2760, 2783, 2786, 2809, 2809, 2786, 2760, 2738, 2735, 2712, 2560, 2583, 2608, 2634, 2656, 2659, 2684, 2707, 2710, 2733, 2710, 2684, 2659, 2636, 2634, 2611, 2608, 2583, 2560, 2611, 2634, 2656, 2634, 2611, 2560, 2560, 2583, 2608, 2631, 2631, 2608, 2583, 2560, 2484, 2507, 2532, 2555, 2558, 2580, 2580, 2558, 2532, 2509, 2509, 2507, 2484, 2459, 2482, 2507, 2530, 2532, 2555, 2558, 2580, 2558, 2532, 2509, 2507, 2484, 2482, 2459, 2459, 2482, 2504, 2482, 2459, 2332, 2355, 2380, 2403, 2403, 2405, 2428, 2431, 2456, 2479, 2479, 2456, 2433, 2431, 2405, 2383, 2380, 2357, 2357, 2355, 2332, 2383, 2383, 2405, 2431, 2454, 2456, 2479, 2456, 2431, 2405, 2383, 2332, 2355, 2380, 2403, 2403, 2380, 2357, 2355, 2332, 2281, 2281, 2304, 2329, 2352, 2352, 2329, 2304, 2281, 2256, 2279, 2304, 2327, 2304, 2279, 2256, 2256, 2256, 2279, 2301, 2301, 2279, 2256, 2205, 2228, 2253, 2276, 2253, 2228, 2205, 2205, 2228, 2251, 2228, 2205, 2180, 2203, 2225, 2203, 2180, 2078, 2101, 2126, 2149, 2152, 2175, 2177, 2203, 2225, 2225, 2203, 2177, 2154, 2152, 2129, 2126, 2104, 2101, 2078, 2104, 2104, 2126, 2149, 2152, 2175, 2177, 2200, 2177, 2152, 2129, 2126, 2104, 1645, 1670, 1695, 1721, 1746, 1771, 1797, 1799, 1799, 1799, 1799, 1797, 1771, 1746, 1721, 1695, 1673, 1673, 1695, 1721, 1744, 1746, 1771, 1797, 1822, 1848, 1873, 1898, 1924, 1949, 1974, 2000, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2000, 1974, 1949, 1924, 1898, 1873, 1848, 1822, 1797, 1771, 1746, 1721, 1695, 1670, 1645, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1645, 1670, 1693, 1693, 1670, 1645, 1642, 1642, 1642, 1642, 1642, 1642, 1645, 1670, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1670, 1667, 1645, 1642, 1642, 1642, 1642, 1642, 1642, 1645, 1873, 1898, 1924, 1949, 1974, 2000, 2002, 2002, 2002, 2002, 2000, 1974, 1949, 1924, 1898, 1873, 1870, 1870, 1870, 1870, 1873, 1873, 1898, 1924, 1949, 1974, 1977, 2000, 2002, 2000, 1974, 1949, 1924, 1898, 1873, 1870, 1870, 1873, 1163, 1188, 1211, 1211, 1211, 1214, 1216, 1216, 1239, 1262, 1262, 1264, 1287, 1290, 1292, 1292, 1290, 1267, 1264, 1241, 1264, 1290, 1312, 1315, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1340, 1363, 1363, 1366, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1391, 1416, 1442, 1467, 1492, 1518, 1543, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1543, 1520, 1520, 1520, 1518, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1492, 1467, 1442, 1416, 1391, 1366, 1340, 1317, 1340, 1366, 1391, 1416, 1442, 1467, 1492, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1518, 1543, 1566, 1566, 1566, 1566, 1566, 1566, 1569, 1591, 1591, 1591, 1594, 1617, 1617, 1617, 1617, 1617, 1617, 1594, 1571, 1571, 1571, 1569, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1569, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1594, 1617, 1619, 1645, 1647, 1647, 1645, 1622, 1622, 1622, 1622, 1622, 1622, 1645, 1667, 1667, 1670, 1673, 1673, 1673, 1673, 1673, 1673, 1695, 1721, 1744, 1746, 1771, 1794, 1794, 1797, 1820, 1822, 1848, 1873, 1896, 1898, 1924, 1946, 1946, 1949, 1974, 1977, 1977, 1977, 1974, 1949, 1926, 1926, 1924, 1898, 1875, 1873, 1850, 1848, 1825, 1822, 1799, 1797, 1774, 1771, 1746, 1721, 1698, 1695, 1673, 1670, 1647, 1645, 1622, 1622, 1622, 1619, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1594, 1571, 1571, 1571, 1571, 1569, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1543, 1520, 1520, 1520, 1518, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1492, 1490, 1467, 1442, 1419, 1442, 1444, 1467, 1470, 1467, 1442, 1416, 1391, 1366, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1315, 1290, 1264, 1239, 1214, 1188, 1163, 1160, 1160, 1160, 1163, 1186, 1188, 1211, 1211, 1211, 1211, 1211, 1188, 1165, 1165, 1163, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1163, 1926, 1949, 1974, 1997, 1974, 1949, 1926, 1670, 1695, 1721, 1746, 1771, 1797, 1822, 1848, 1873, 1898, 1924, 1926, 1924, 1901, 1901, 1898, 1875, 1875, 1875, 1875, 1873, 1850, 1850, 1850, 1850, 1850, 1850, 1848, 1825, 1825, 1822, 1799, 1799, 1799, 1799, 1797, 1771, 1746, 1721, 1695, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1670, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1670, 1850, 1850, 1873, 1898, 1921, 1924, 1946, 1946, 1924, 1901, 1898, 1873, 1850, 1746, 1769, 1769, 1771, 1794, 1797, 1822, 1848, 1870, 1873, 1875, 1875, 1875, 1873, 1848, 1825, 1822, 1797, 1774, 1774, 1771, 1746, 1744, 1744, 1746, 1670, 1695, 1721, 1746, 1771, 1797, 1822, 1848, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1848, 1822, 1797, 1771, 1746, 1721, 1695, 1670, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1670, 1774, 1774, 1797, 1822, 1845, 1848, 1870, 1848, 1822, 1797, 1774, 1569, 1594, 1619, 1645, 1647, 1647, 1647, 1670, 1693, 1693, 1693, 1693, 1695, 1698, 1698, 1698, 1721, 1723, 1723, 1723, 1723, 1746, 1749, 1749, 1771, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1797, 1799, 1799, 1799, 1799, 1799, 1797, 1794, 1794, 1794, 1794, 1771, 1749, 1749, 1749, 1746, 1723, 1723, 1723, 1723, 1721, 1698, 1698, 1695, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1695, 1718, 1718, 1721, 1744, 1744, 1744, 1744, 1746, 1769, 1769, 1769, 1771, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1771, 1749, 1749, 1746, 1723, 1723, 1723, 1723, 1723, 1721, 1698, 1698, 1695, 1693, 1693, 1693, 1693, 1670, 1645, 1619, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1594, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1569, 1566, 1566, 1566, 1566, 1566, 1569, 1695, 1721, 1746, 1771, 1774, 1774, 1774, 1774, 1774, 1771, 1749, 1749, 1746, 1723, 1723, 1721, 1698, 1698, 1695, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1695, 1723, 1746, 1771, 1794, 1771, 1746, 1723, 1673, 1695, 1721, 1744, 1721, 1695, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1695, 1718, 1718, 1718, 1718, 1718, 1718, 1695, 1673, 1163, 1186, 1186, 1186, 1186, 1186, 1188, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1214, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1239, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1290, 1292, 1292, 1292, 1292, 1292, 1292, 1290, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1264, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1264, 1287, 1287, 1287, 1287, 1290, 1315, 1340, 1366, 1391, 1416, 1419, 1442, 1444, 1444, 1444, 1467, 1470, 1470, 1470, 1470, 1470, 1492, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1492, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1518, 1543, 1569, 1594, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1619, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1645, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1670, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1670, 1667, 1667, 1667, 1667, 1667, 1667, 1645, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1645, 1647, 1647, 1645, 1619, 1594, 1569, 1566, 1566, 1543, 1541, 1518, 1495, 1495, 1495, 1492, 1467, 1442, 1416, 1391, 1366, 1340, 1315, 1290, 1264, 1262, 1262, 1262, 1262, 1262, 1239, 1216, 1216, 1216, 1216, 1216, 1214, 1188, 1163, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1163, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1619, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1619, 1596, 1619, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1619, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1619, 1492, 1518, 1543, 1569, 1594, 1619, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1619, 1594, 1569, 1543, 1518, 1492, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1492, 1518, 1543, 1569, 1594, 1619, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1619, 1594, 1569, 1543, 1518, 1492, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1492, 1518, 1543, 1569, 1594, 1596, 1596, 1596, 1596, 1594, 1569, 1543, 1518, 1492, 1490, 1490, 1490, 1490, 1492, 1492, 1518, 1543, 1569, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1594, 1596, 1596, 1594, 1571, 1569, 1543, 1518, 1492, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1492, 1518, 1543, 1569, 1594, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1594, 1569, 1543, 1518, 1492, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1315, 1340, 1366, 1391, 1416, 1442, 1467, 1492, 1518, 1543, 1569, 1594, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1594, 1569, 1543, 1518, 1492, 1467, 1442, 1416, 1391, 1366, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1315, 1312, 1312, 1312, 1312, 1312, 1315, 1214, 1239, 1264, 1290, 1315, 1340, 1366, 1391, 1416, 1442, 1467, 1492, 1518, 1543, 1569, 1571, 1571, 1571, 1594, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1594, 1569, 1543, 1518, 1492, 1467, 1442, 1416, 1391, 1366, 1340, 1315, 1312, 1312, 1312, 1290, 1287, 1287, 1287, 1287, 1287, 1287, 1264, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1239, 1236, 1214, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1214, 1214, 1216, 1216, 1216, 1239, 1262, 1262, 1262, 1264, 1290, 1315, 1340, 1366, 1391, 1416, 1442, 1467, 1492, 1518, 1543, 1546, 1546, 1546, 1569, 1571, 1569, 1543, 1518, 1492, 1467, 1442, 1416, 1391, 1366, 1340, 1315, 1290, 1264, 1239, 1214, 1211, 1211, 1211, 1211, 1214, 1543, 1546, 1543, 1541, 1543, 1416, 1442, 1467, 1492, 1495, 1495, 1495, 1495, 1495, 1518, 1520, 1520, 1520, 1543, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1543, 1518, 1492, 1467, 1442, 1416, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1416, 1518, 1520, 1518, 1515, 1518, 909, 935, 960, 985, 1011, 1036, 1061, 1087, 1112, 1137, 1163, 1188, 1214, 1239, 1264, 1290, 1315, 1340, 1366, 1368, 1368, 1368, 1366, 1343, 1343, 1340, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1340, 1363, 1366, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1391, 1414, 1414, 1414, 1414, 1416, 1442, 1467, 1492, 1495, 1495, 1495, 1492, 1470, 1470, 1470, 1470, 1470, 1467, 1444, 1444, 1444, 1442, 1419, 1419, 1419, 1419, 1419, 1416, 1391, 1366, 1340, 1338, 1338, 1315, 1292, 1292, 1290, 1264, 1239, 1214, 1188, 1163, 1137, 1112, 1087, 1061, 1036, 1011, 985, 960, 935, 909, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 909, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1442, 1465, 1465, 1465, 1465, 1465, 1465, 1467, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1492, 1470, 1470, 1470, 1470, 1470, 1467, 1444, 1444, 1444, 1444, 1442, 1419, 1416, 1439, 1439, 1439, 1442, 1444, 1467, 1470, 1470, 1492, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1492, 1490, 1490, 1490, 1490, 1467, 1465, 1465, 1465, 1442, 1419, 1419, 1419, 1419, 1416, 1414, 1414, 1414, 1414, 1416, 1442, 1444, 1444, 1467, 1470, 1467, 1442, 1439, 1439, 1439, 1442, 909, 935, 960, 985, 1011, 1036, 1061, 1087, 1112, 1137, 1163, 1188, 1214, 1239, 1264, 1290, 1315, 1340, 1366, 1391, 1416, 1419, 1419, 1419, 1416, 1394, 1394, 1394, 1394, 1394, 1391, 1368, 1368, 1368, 1368, 1368, 1368, 1366, 1343, 1340, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1315, 1292, 1292, 1292, 1290, 1267, 1264, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1239, 1216, 1216, 1214, 1191, 1191, 1191, 1191, 1188, 1165, 1163, 1140, 1140, 1140, 1137, 1115, 1115, 1115, 1112, 1089, 1087, 1064, 1064, 1061, 1039, 1039, 1036, 1013, 1011, 1008, 1008, 1008, 1008, 1008, 985, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 960, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 935, 932, 932, 932, 909, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 909, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1416, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1416, 1394, 1290, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1315, 1340, 1366, 1391, 1416, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1416, 1391, 1366, 1340, 1315, 1290, 1287, 1287, 1287, 1290, 1340, 1366, 1391, 1416, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1416, 1391, 1366, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1290, 1315, 1340, 1366, 1391, 1416, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1416, 1391, 1366, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1315, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1290, 1287, 1287, 1290, 630, 653, 653, 653, 653, 653, 653, 656, 678, 681, 706, 732, 757, 782, 808, 833, 858, 884, 909, 935, 937, 937, 937, 937, 937, 960, 983, 983, 983, 983, 983, 983, 960, 957, 957, 957, 957, 957, 935, 932, 909, 886, 886, 886, 886, 886, 884, 881, 881, 881, 881, 881, 884, 907, 907, 907, 907, 907, 907, 884, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 884, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 909, 932, 935, 957, 960, 985, 1011, 1036, 1061, 1064, 1087, 1089, 1112, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1137, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1163, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1163, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1137, 1115, 1115, 1115, 1112, 1110, 1110, 1087, 1064, 1064, 1064, 1064, 1064, 1087, 1089, 1089, 1112, 1115, 1115, 1137, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1163, 1186, 1186, 1186, 1188, 1214, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1239, 1262, 1264, 1290, 1315, 1340, 1366, 1391, 1416, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1416, 1391, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1366, 1363, 1363, 1363, 1363, 1363, 1363, 1340, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1315, 1290, 1287, 1287, 1287, 1287, 1287, 1264, 1241, 1241, 1241, 1241, 1241, 1239, 1214, 1188, 1163, 1137, 1112, 1087, 1061, 1036, 1011, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1011, 1013, 1013, 1036, 1039, 1039, 1039, 1039, 1061, 1084, 1084, 1084, 1084, 1084, 1084, 1061, 1059, 1059, 1059, 1036, 1033, 1033, 1033, 1011, 1008, 1008, 1008, 1008, 1008, 985, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 985, 1011, 1036, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1036, 1011, 985, 962, 985, 988, 1011, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1011, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 985, 962, 985, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 985, 962, 962, 962, 985, 1008, 1008, 1011, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1036, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1061, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1087, 1112, 1137, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1137, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1112, 1089, 1089, 1089, 1089, 1089, 1089, 1087, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1087, 1112, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1137, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1163, 1165, 1165, 1165, 1188, 1211, 1214, 1216, 1214, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1214, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1214, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1188, 1165, 1165, 1165, 1165, 1165, 1165, 1163, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1137, 1115, 1115, 1112, 1110, 1087, 1061, 1059, 1059, 1061, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1061, 1084, 1084, 1084, 1084, 1061, 1039, 1039, 1036, 1011, 988, 988, 988, 985, 962, 960, 937, 937, 935, 912, 909, 886, 886, 886, 909, 935, 957, 957, 957, 960, 983, 983, 985, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 985, 960, 935, 909, 884, 858, 833, 831, 833, 856, 856, 858, 881, 881, 884, 907, 884, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 884, 907, 907, 909, 932, 935, 957, 960, 983, 983, 983, 960, 937, 937, 935, 912, 909, 886, 884, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 884, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 909, 935, 957, 957, 935, 909, 884, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 858, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 856, 858, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 858, 833, 808, 782, 757, 732, 706, 681, 656, 630, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 630, 1264, 1290, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1315, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1366, 1391, 1416, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1416, 1391, 1366, 1340, 1315, 1290, 1264, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264, 1416, 1419, 1416, 1414, 1416, 1163, 1188, 1214, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1239, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264, 1267, 1267, 1267, 1290, 1292, 1292, 1292, 1292, 1292, 1292, 1315, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1343, 1366, 1388, 1388, 1388, 1391, 1394, 1394, 1394, 1391, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1391, 1394, 1394, 1394, 1394, 1391, 1388, 1366, 1363, 1363, 1340, 1317, 1317, 1317, 1315, 1290, 1287, 1287, 1264, 1241, 1241, 1239, 1214, 1211, 1211, 1211, 1211, 1188, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1163, 1160, 1160, 1160, 1160, 1163, 1214, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1239, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264, 1290, 1315, 1340, 1366, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1366, 1363, 1363, 1363, 1340, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1315, 1312, 1290, 1264, 1241, 1239, 1216, 1216, 1214, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1214, 1236, 1236, 1236, 1239, 1262, 1262, 1262, 1239, 1214, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1214, 1290, 1315, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1340, 1343, 1343, 1343, 1343, 1343, 1343, 1340, 1315, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1290, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1290, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1264, 1287, 1287, 1287, 1290, 1312, 1312, 1312, 1312, 1312, 1315, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1315, 1292, 1292, 1292, 1292, 1292, 1290, 1267, 1267, 1264, 1241, 1241, 1264, 1290, 1315, 1338, 1338, 1315, 1290, 1267, 1264, 1241, 1315, 1317, 1315, 1312, 1315, 909, 935, 960, 985, 1011, 1036, 1039, 1039, 1061, 1064, 1087, 1110, 1112, 1135, 1137, 1160, 1163, 1188, 1214, 1239, 1264, 1290, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1290, 1264, 1239, 1214, 1188, 1163, 1137, 1112, 1087, 1061, 1036, 1011, 985, 960, 935, 909, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 909, 1264, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1290, 1292, 1292, 1292, 1292, 1292, 1292, 1290, 1264, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264, 1191, 1191, 1191, 1191, 1214, 1236, 1236, 1236, 1239, 1262, 1262, 1262, 1262, 1262, 1239, 1216, 1216, 1216, 1216, 1214, 1191, 1191, 1191, 1214, 1236, 1239, 1262, 1239, 1214, 1191, 1239, 1241, 1241, 1241, 1241, 1241, 1241, 1239, 1236, 1236, 1236, 1236, 1236, 1236, 1239, 1188, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1214, 1239, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1239, 1236, 1236, 1236, 1214, 1211, 1211, 1211, 1188, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1188, 1239, 1241, 1241, 1241, 1241, 1239, 1236, 1236, 1236, 1236, 1239, 1163, 1188, 1214, 1216, 1216, 1216, 1216, 1214, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1188, 1165, 1165, 1165, 1165, 1165, 1163, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1163, 1188, 1211, 1211, 1211, 1211, 1214, 1216, 1216, 1216, 1216, 1216, 1216, 1214, 1188, 1186, 1186, 1188, 1061, 1087, 1112, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1112, 1089, 1089, 1089, 1112, 1115, 1115, 1112, 1089, 1087, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1061, 909, 935, 960, 985, 1011, 1036, 1039, 1039, 1061, 1084, 1084, 1087, 1112, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1112, 1087, 1061, 1036, 1011, 985, 960, 957, 957, 957, 957, 960, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 985, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1011, 1033, 1033, 1033, 1033, 1033, 1036, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1061, 1084, 1084, 1061, 1036, 1011, 985, 960, 935, 909, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 909, 1087, 1089, 1112, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1112, 1087, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1087, 1064, 1087, 1112, 1135, 1112, 1087, 1064, 1087, 1112, 1115, 1112, 1087, 1084, 1087, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 1011, 1013, 1036, 1039, 1039, 1061, 1084, 1084, 1084, 1061, 1059, 1059, 1059, 1036, 1033, 1033, 1033, 1033, 1033, 1036, 1061, 1084, 1061, 1059, 1059, 1036, 1033, 1011, 988, 808, 833, 858, 884, 909, 935, 960, 985, 988, 1011, 1013, 1013, 1013, 1013, 1013, 1036, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1036, 1011, 985, 960, 935, 932, 932, 932, 932, 909, 886, 884, 861, 861, 861, 858, 833, 808, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 808, 1011, 1036, 1039, 1036, 1011, 1008, 1011, 909, 932, 932, 932, 932, 932, 932, 935, 957, 957, 957, 957, 957, 957, 957, 957, 957, 960, 985, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 1011, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1011, 985, 960, 935, 909, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 909, 960, 985, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 985, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 960, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 960, 937, 960, 983, 960, 937, 960, 962, 960, 957, 960, 909, 932, 932, 932, 932, 932, 932, 932, 935, 937, 937, 937, 937, 937, 937, 937, 937, 937, 937, 937, 935, 912, 912, 912, 909, 907, 907, 907, 907, 907, 907, 907, 909, 478, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 503, 529, 554, 580, 605, 630, 656, 681, 706, 732, 757, 782, 808, 833, 858, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 884, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 886, 884, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 858, 856, 833, 808, 805, 782, 757, 732, 706, 704, 681, 656, 630, 605, 580, 554, 552, 529, 503, 501, 501, 501, 478, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 478, 757, 780, 780, 780, 782, 785, 785, 785, 785, 785, 808, 831, 831, 833, 856, 856, 856, 858, 861, 861, 861, 861, 861, 861, 858, 836, 833, 808, 782, 757, 755, 755, 755, 755, 757, 808, 831, 831, 833, 856, 858, 861, 861, 861, 858, 836, 836, 836, 833, 810, 808, 805, 805, 805, 805, 808, 503, 526, 526, 526, 526, 526, 526, 526, 526, 529, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 554, 580, 605, 630, 656, 681, 706, 732, 757, 782, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 808, 833, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 833, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 808, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 782, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 757, 734, 734, 734, 734, 734, 732, 706, 681, 656, 630, 605, 580, 554, 529, 503, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 503, 833, 836, 836, 833, 831, 831, 833, 833, 836, 836, 836, 833, 831, 831, 831, 833, 757, 780, 780, 780, 780, 780, 780, 780, 782, 808, 833, 836, 833, 810, 810, 810, 810, 810, 810, 810, 808, 785, 785, 785, 782, 757, 755, 755, 755, 755, 757, 732, 757, 782, 808, 833, 836, 836, 836, 836, 833, 808, 782, 757, 732, 729, 729, 729, 729, 732, 554, 580, 605, 630, 656, 681, 706, 732, 757, 782, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 782, 757, 732, 706, 681, 656, 630, 605, 580, 554, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 554, 199, 222, 222, 224, 247, 247, 247, 247, 247, 247, 250, 273, 273, 273, 273, 273, 273, 275, 298, 298, 298, 298, 298, 301, 323, 326, 349, 349, 349, 349, 351, 374, 374, 377, 402, 427, 453, 478, 503, 529, 554, 580, 602, 605, 630, 656, 681, 706, 732, 757, 782, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 782, 757, 732, 706, 681, 656, 630, 605, 580, 554, 552, 552, 552, 552, 552, 554, 557, 580, 605, 628, 628, 605, 580, 554, 552, 529, 503, 501, 478, 453, 450, 427, 402, 399, 377, 374, 351, 349, 326, 301, 275, 273, 250, 247, 247, 224, 199, 197, 197, 197, 197, 197, 199, 503, 529, 554, 580, 605, 630, 656, 681, 706, 732, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 757, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 757, 732, 706, 681, 656, 630, 605, 580, 554, 529, 503, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 503, 706, 732, 734, 734, 734, 734, 734, 734, 732, 709, 709, 709, 709, 709, 706, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 706, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 630, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 656, 678, 678, 678, 678, 678, 678, 678, 681, 704, 704, 681, 656, 630, 607};
  // -- sinoş
  const uint16_t X [2041] = {289, 276, 264, 251, 238, 226, 213, 201, 188, 175, 163, 150, 138, 125, 112, 101, 100, 87, 76, 75, 63, 63, 75, 76, 87, 89, 100, 101, 112, 114, 125, 138, 149, 150, 163, 175, 188, 201, 212, 213, 226, 238, 251, 264, 276, 289, 301, 303, 314, 326, 339, 352, 364, 377, 378, 389, 402, 415, 427, 428, 440, 452, 454, 465, 478, 479, 490, 503, 515, 517, 528, 540, 542, 553, 566, 567, 578, 591, 592, 603, 605, 616, 617, 629, 641, 642, 642, 642, 642, 641, 630, 629, 616, 605, 603, 591, 578, 567, 566, 553, 540, 529, 528, 515, 503, 491, 490, 478, 465, 454, 452, 441, 440, 427, 415, 403, 402, 389, 377, 365, 364, 352, 340, 339, 326, 315, 314, 303, 301, 290, 289, 277, 277, 277, 277, 277, 277, 277, 277, 289, 290, 290, 301, 303, 303, 314, 315, 326, 328, 339, 340, 352, 353, 364, 365, 377, 389, 391, 402, 403, 415, 427, 428, 440, 452, 454, 465, 478, 490, 491, 503, 515, 528, 529, 540, 553, 566, 567, 578, 591, 603, 616, 617, 629, 641, 654, 666, 679, 692, 704, 705, 717, 729, 742, 755, 767, 780, 792, 805, 817, 829, 830, 843, 855, 868, 880, 892, 893, 906, 917, 918, 929, 929, 931, 942, 942, 931, 929, 929, 918, 917, 917, 906, 904, 893, 880, 879, 868, 855, 843, 831, 831, 843, 844, 844, 843, 831, 831, 830, 819, 817, 805, 792, 780, 767, 755, 742, 729, 717, 704, 692, 679, 666, 654, 641, 629, 627, 616, 603, 591, 578, 577, 566, 553, 552, 540, 528, 515, 514, 503, 490, 489, 478, 465, 452, 451, 440, 439, 427, 415, 413, 413, 402, 401, 401, 389, 388, 388, 388, 388, 389, 401, 401, 402, 413, 415, 427, 440, 451, 452, 464, 465, 478, 489, 490, 503, 515, 528, 539, 540, 553, 566, 577, 578, 591, 603, 615, 616, 629, 641, 653, 654, 666, 678, 679, 692, 703, 704, 715, 717, 729, 741, 741, 742, 753, 753, 753, 753, 753, 753, 742, 741, 729, 728, 717, 715, 704, 703, 692, 690, 679, 678, 666, 654, 653, 641, 629, 627, 627, 616, 603, 591, 590, 578, 577, 566, 553, 540, 539, 528, 515, 514, 503, 490, 478, 476, 465, 452, 440, 439, 427, 415, 402, 389, 388, 377, 364, 363, 352, 339, 326, 314, 301, 300, 289, 893, 880, 869, 868, 856, 856, 856, 856, 856, 856, 868, 869, 869, 869, 869, 880, 882, 882, 882, 893, 894, 906, 907, 907, 918, 919, 919, 919, 931, 932, 943, 945, 945, 956, 957, 957, 969, 970, 970, 981, 982, 994, 995, 995, 995, 1006, 1008, 1008, 1019, 1020, 1031, 1033, 1033, 1033, 1044, 1045, 1045, 1057, 1058, 1069, 1070, 1070, 1082, 1083, 1083, 1094, 1096, 1096, 1107, 1108, 1120, 1121, 1121, 1132, 1133, 1133, 1133, 1145, 1146, 1157, 1159, 1159, 1170, 1171, 1183, 1195, 1196, 1208, 1209, 1220, 1233, 1245, 1258, 1269, 1271, 1282, 1282, 1271, 1269, 1269, 1269, 1258, 1257, 1257, 1245, 1244, 1233, 1232, 1232, 1220, 1219, 1208, 1206, 1206, 1195, 1194, 1183, 1181, 1181, 1170, 1169, 1169, 1157, 1156, 1145, 1144, 1144, 1132, 1131, 1131, 1120, 1118, 1107, 1106, 1106, 1094, 1093, 1093, 1082, 1081, 1081, 1069, 1068, 1068, 1057, 1055, 1055, 1044, 1043, 1043, 1031, 1030, 1030, 1019, 1018, 1018, 1018, 1006, 1005, 1005, 1005, 994, 992, 992, 981, 980, 980, 980, 980, 969, 967, 967, 967, 956, 955, 943, 942, 931, 929, 918, 906, 904, 893, 1346, 1335, 1334, 1321, 1308, 1297, 1296, 1285, 1285, 1296, 1297, 1308, 1310, 1310, 1321, 1334, 1335, 1346, 1347, 1359, 1371, 1384, 1397, 1409, 1422, 1433, 1434, 1446, 1446, 1446, 1434, 1433, 1422, 1420, 1420, 1409, 1397, 1395, 1384, 1371, 1359, 1358, 1346, 1195, 1183, 1171, 1170, 1159, 1159, 1159, 1159, 1159, 1170, 1171, 1171, 1183, 1184, 1195, 1196, 1196, 1196, 1208, 1209, 1220, 1222, 1222, 1233, 1234, 1245, 1247, 1247, 1258, 1259, 1271, 1272, 1272, 1283, 1285, 1296, 1297, 1297, 1308, 1310, 1310, 1321, 1322, 1334, 1335, 1335, 1346, 1347, 1347, 1359, 1360, 1371, 1373, 1373, 1384, 1385, 1385, 1397, 1398, 1409, 1410, 1410, 1422, 1423, 1423, 1434, 1436, 1436, 1447, 1448, 1460, 1461, 1461, 1461, 1472, 1473, 1473, 1485, 1486, 1497, 1499, 1499, 1510, 1511, 1511, 1511, 1522, 1524, 1524, 1535, 1548, 1549, 1560, 1573, 1585, 1598, 1611, 1623, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1636, 1647, 1647, 1647, 1647, 1647, 1648, 1660, 1660, 1660, 1660, 1661, 1672, 1672, 1674, 1685, 1685, 1685, 1686, 1697, 1697, 1697, 1699, 1710, 1710, 1711, 1723, 1723, 1724, 1735, 1735, 1735, 1736, 1748, 1749, 1760, 1760, 1762, 1773, 1774, 1775, 1775, 1787, 1788, 1799, 1801, 1801, 1812, 1813, 1813, 1825, 1826, 1837, 1838, 1838, 1850, 1851, 1862, 1864, 1864, 1875, 1876, 1876, 1888, 1889, 1889, 1900, 1901, 1901, 1913, 1914, 1925, 1927, 1938, 1939, 1939, 1939, 1950, 1952, 1963, 1964, 1964, 1976, 1977, 1977, 1988, 1990, 1990, 1990, 2001, 2002, 2013, 2015, 2015, 2026, 2027, 2027, 2039, 2040, 2051, 2052, 2052, 2052, 2052, 2064, 2065, 2065, 2076, 2078, 2089, 2102, 2103, 2114, 2127, 2139, 2141, 2152, 2165, 2177, 2188, 2188, 2188, 2188, 2188, 2177, 2176, 2176, 2165, 2163, 2163, 2152, 2151, 2139, 2138, 2127, 2125, 2125, 2114, 2113, 2113, 2102, 2100, 2089, 2088, 2088, 2076, 2075, 2075, 2064, 2063, 2051, 2050, 2039, 2037, 2037, 2026, 2025, 2025, 2013, 2012, 2001, 2000, 2000, 1988, 1987, 1987, 1976, 1974, 1974, 1974, 1963, 1962, 1950, 1949, 1938, 1937, 1937, 1925, 1924, 1913, 1911, 1911, 1911, 1900, 1899, 1899, 1888, 1886, 1875, 1874, 1874, 1862, 1861, 1861, 1850, 1849, 1849, 1849, 1849, 1837, 1836, 1836, 1825, 1823, 1812, 1811, 1799, 1787, 1786, 1774, 1773, 1762, 1749, 1736, 1724, 1713, 1713, 1711, 1699, 1687, 1687, 1687, 1686, 1675, 1675, 1675, 1675, 1675, 1674, 1662, 1661, 1650, 1650, 1650, 1648, 1637, 1637, 1636, 1624, 1624, 1624, 1623, 1612, 1612, 1611, 1599, 1599, 1599, 1598, 1587, 1587, 1587, 1587, 1585, 1574, 1573, 1561, 1561, 1561, 1561, 1560, 1549, 1549, 1549, 1549, 1549, 1548, 1536, 1536, 1536, 1535, 1534, 1522, 1521, 1521, 1510, 1509, 1497, 1496, 1485, 1483, 1483, 1483, 1472, 1471, 1471, 1460, 1447, 1446, 1446, 1434, 1433, 1433, 1422, 1420, 1420, 1420, 1409, 1408, 1397, 1395, 1395, 1384, 1383, 1383, 1371, 1370, 1359, 1358, 1358, 1358, 1346, 1345, 1345, 1334, 1332, 1321, 1320, 1320, 1308, 1307, 1307, 1307, 1296, 1295, 1295, 1295, 1283, 1282, 1271, 1269, 1258, 1257, 1257, 1245, 1233, 1232, 1220, 1208, 1206, 1195, 2366, 2353, 2341, 2328, 2316, 2303, 2290, 2278, 2265, 2253, 2240, 2227, 2215, 2202, 2191, 2190, 2177, 2166, 2165, 2153, 2152, 2141, 2139, 2128, 2127, 2115, 2115, 2115, 2114, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2114, 2115, 2115, 2115, 2127, 2128, 2139, 2141, 2141, 2152, 2153, 2153, 2165, 2166, 2166, 2177, 2178, 2190, 2191, 2191, 2202, 2204, 2215, 2216, 2227, 2229, 2240, 2241, 2241, 2253, 2265, 2266, 2266, 2278, 2279, 2290, 2303, 2304, 2304, 2316, 2317, 2328, 2329, 2341, 2353, 2355, 2355, 2366, 2367, 2379, 2391, 2392, 2404, 2405, 2416, 2418, 2429, 2441, 2443, 2454, 2467, 2468, 2479, 2480, 2492, 2493, 2504, 2517, 2518, 2530, 2542, 2543, 2555, 2567, 2569, 2580, 2593, 2605, 2606, 2618, 2630, 2632, 2643, 2655, 2668, 2681, 2682, 2693, 2706, 2718, 2731, 2744, 2756, 2769, 2781, 2794, 2807, 2819, 2832, 2844, 2857, 2870, 2881, 2882, 2895, 2907, 2920, 2931, 2932, 2945, 2956, 2958, 2969, 2970, 2982, 2983, 2995, 3007, 3007, 3008, 3019, 3019, 3021, 3032, 3032, 3033, 3044, 3044, 3033, 3032, 3032, 3032, 3021, 3019, 3019, 3019, 3019, 3008, 3007, 3007, 2995, 2994, 2983, 2982, 2982, 2982, 2970, 2969, 2958, 2956, 2956, 2945, 2944, 2932, 2931, 2920, 2919, 2919, 2907, 2895, 2893, 2893, 2882, 2881, 2870, 2857, 2856, 2844, 2843, 2832, 2830, 2819, 2818, 2807, 2805, 2794, 2793, 2781, 2769, 2768, 2756, 2755, 2744, 2742, 2731, 2718, 2717, 2706, 2705, 2693, 2681, 2679, 2668, 2667, 2655, 2643, 2642, 2630, 2629, 2618, 2605, 2604, 2593, 2580, 2579, 2567, 2555, 2554, 2542, 2530, 2528, 2517, 2504, 2503, 2492, 2479, 2467, 2465, 2454, 2441, 2440, 2429, 2416, 2404, 2391, 2379, 2377, 2366, 2367, 2379, 2391, 2404, 2416, 2429, 2430, 2441, 2454, 2467, 2468, 2479, 2492, 2504, 2506, 2517, 2518, 2530, 2542, 2543, 2555, 2567, 2569, 2580, 2593, 2594, 2605, 2618, 2619, 2630, 2632, 2643, 2655, 2657, 2668, 2669, 2681, 2693, 2695, 2695, 2706, 2718, 2720, 2731, 2732, 2744, 2745, 2756, 2757, 2769, 2781, 2783, 2794, 2795, 2795, 2807, 2808, 2819, 2820, 2832, 2833, 2844, 2846, 2846, 2857, 2858, 2870, 2871, 2871, 2882, 2883, 2883, 2895, 2896, 2896, 2907, 2909, 2909, 2909, 2920, 2921, 2921, 2921, 2921, 2921, 2921, 2920, 2909, 2907, 2896, 2895, 2883, 2882, 2870, 2858, 2857, 2846, 2844, 2832, 2819, 2807, 2795, 2794, 2781, 2769, 2756, 2744, 2731, 2718, 2706, 2705, 2693, 2681, 2668, 2667, 2655, 2643, 2642, 2630, 2618, 2616, 2605, 2593, 2591, 2580, 2567, 2566, 2555, 2542, 2541, 2530, 2528, 2517, 2504, 2503, 2492, 2491, 2479, 2478, 2467, 2465, 2454, 2453, 2441, 2429, 2428, 2416, 2415, 2404, 2402, 2391, 2390, 2379, 2377, 2366, 2365, 2353, 2352, 2341, 2339, 2328, 2327, 2316, 2314, 2314, 2303, 2290, 2289, 2289, 2278, 2277, 2277, 2265, 2264, 2253, 2251, 2251, 2240, 2239, 2239, 2227, 2226, 2215, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2215, 2226, 2226, 2227, 2239, 2240, 2251, 2253, 2265, 2278, 2289, 2290, 2303, 2316, 2328, 2341, 2353, 2366, 2367, 3096, 3084, 3071, 3058, 3046, 3033, 3021, 3008, 2997, 2995, 2983, 2970, 2959, 2958, 2946, 2946, 2946, 2958, 2959, 2970, 2971, 2983, 2995, 3007, 3008, 3021, 3032, 3033, 3044, 3046, 3058, 3071, 3084, 3085, 3096, 3109, 3110, 3121, 3134, 3135, 3146, 3159, 3160, 3160, 3172, 3173, 3173, 3172, 3160, 3159, 3146, 3134, 3121, 3109, 3107, 3096, 3084, 3072, 3071, 3060, 3071, 3072, 3072, 3084, 3085, 3096, 3097, 3097, 3109, 3121, 3123, 3121, 3109, 3096, 3084, 3071, 3070, 3058, 3046, 3033, 3021, 3008, 2995, 2983, 2970, 2958, 2945, 2934, 2934, 2934, 2934, 2945, 2946, 2946, 2958, 2970, 2983, 2995, 3008, 3021, 3033, 3034, 3046, 3058, 3071, 3084, 3096, 3109, 3121, 3134, 3135, 3146, 3159, 3172, 3184, 3185, 3197, 3209, 3222, 3235, 3236, 3247, 3260, 3272, 3274, 3285, 3298, 3310, 3311, 3323, 3324, 3335, 3348, 3349, 3360, 3373, 3386, 3387, 3398, 3400, 3411, 3423, 3425, 3436, 3437, 3449, 3450, 3461, 3462, 3462, 3462, 3461, 3449, 3437, 3436, 3425, 3423, 3411, 3400, 3398, 3386, 3373, 3360, 3349, 3348, 3335, 3323, 3310, 3299, 3298, 3285, 3272, 3261, 3260, 3247, 3235, 3223, 3222, 3211, 3209, 3197, 3185, 3184, 3172, 3160, 3159, 3148, 3146, 3134, 3123, 3123, 3121, 3110, 3109, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3109, 3110, 3121, 3123, 3123, 3134, 3135, 3146, 3148, 3159, 3160, 3172, 3184, 3185, 3197, 3209, 3211, 3222, 3223, 3235, 3247, 3248, 3260, 3272, 3274, 3285, 3298, 3299, 3310, 3323, 3335, 3337, 3348, 3360, 3373, 3386, 3387, 3398, 3411, 3423, 3436, 3437, 3449, 3461, 3474, 3486, 3499, 3512, 3513, 3524, 3537, 3549, 3562, 3575, 3587, 3600, 3612, 3625, 3637, 3649, 3650, 3663, 3675, 3688, 3699, 3700, 3713, 3724, 3726, 3737, 3738, 3750, 3750, 3750, 3750, 3750, 3738, 3737, 3726, 3724, 3724, 3713, 3700, 3699, 3688, 3675, 3663, 3651, 3651, 3651, 3651, 3651, 3650, 3639, 3637, 3626, 3625, 3612, 3600, 3587, 3575, 3562, 3549, 3537, 3524, 3512, 3499, 3486, 3474, 3461, 3449, 3447, 3436, 3423, 3411, 3410, 3398, 3386, 3373, 3360, 3359, 3348, 3335, 3323, 3321, 3310, 3298, 3296, 3285, 3272, 3271, 3260, 3259, 3247, 3235, 3233, 3222, 3221, 3209, 3208, 3197, 3196, 3196, 3196, 3196, 3197, 3208, 3209, 3221, 3222, 3233, 3233, 3235, 3247, 3259, 3260, 3271, 3272, 3285, 3298, 3309, 3310, 3323, 3335, 3347, 3348, 3360, 3373, 3386, 3397, 3398, 3411, 3423, 3435, 3436, 3449, 3461, 3473, 3474, 3486, 3499, 3510, 3510, 3512, 3524, 3535, 3537, 3548, 3549, 3561, 3561, 3562, 3573, 3573, 3562, 3561, 3561, 3561, 3561, 3549, 3548, 3537, 3535, 3524, 3523, 3512, 3510, 3499, 3486, 3485, 3474, 3473, 3461, 3460, 3449, 3436, 3435, 3423, 3411, 3410, 3398, 3397, 3386, 3373, 3360, 3359, 3348, 3335, 3323, 3321, 3310, 3298, 3296, 3285, 3272, 3260, 3259, 3247, 3235, 3233, 3222, 3209, 3208, 3197, 3196, 3184, 3183, 3183, 3183, 3184, 3197, 3209, 3222, 3233, 3235, 3247, 3259, 3259, 3259, 3259, 3259, 3259, 3247, 3246, 3246, 3235, 3233, 3233, 3222, 3221, 3209, 3208, 3197, 3184, 3183, 3172, 3159, 3158, 3146, 3134, 3121, 3109, 3107, 3096};
 800052c:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8000530:	f103 0310 	add.w	r3, r3, #16
 8000534:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8000538:	4a2f      	ldr	r2, [pc, #188]	@ (80005f8 <main+0x104>)
 800053a:	4618      	mov	r0, r3
 800053c:	4611      	mov	r1, r2
 800053e:	f640 73f2 	movw	r3, #4082	@ 0xff2
 8000542:	461a      	mov	r2, r3
 8000544:	f003 fd50 	bl	8003fe8 <memcpy>
  const uint16_t Y [2041] = {813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 848, 851, 851, 886, 890, 924, 962, 996, 1000, 1035, 1038, 1073, 1077, 1111, 1115, 1149, 1149, 1115, 1111, 1111, 1111, 1111, 1111, 1077, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1077, 1111, 1111, 1111, 1111, 1111, 1111, 1115, 1149, 1149, 1149, 1149, 1153, 1187, 1187, 1191, 1226, 1226, 1229, 1264, 1264, 1264, 1268, 1302, 1302, 1306, 1340, 1340, 1344, 1378, 1378, 1382, 1416, 1420, 1455, 1458, 1493, 1493, 1497, 1535, 1573, 1611, 1615, 1649, 1653, 1653, 1688, 1691, 1691, 1691, 1726, 1730, 1730, 1730, 1764, 1768, 1768, 1768, 1802, 1806, 1806, 1806, 1840, 1844, 1878, 1882, 1882, 1882, 1917, 1921, 1921, 1921, 1955, 1959, 1959, 1993, 1997, 1997, 2031, 2035, 2069, 2073, 2108, 2111, 2146, 2184, 2222, 2260, 2299, 2337, 2375, 2413, 2447, 2451, 2489, 2524, 2528, 2566, 2600, 2604, 2638, 2642, 2677, 2680, 2715, 2719, 2753, 2757, 2791, 2791, 2795, 2829, 2833, 2867, 2867, 2871, 2906, 2906, 2909, 2944, 2944, 2944, 2948, 2982, 2982, 2982, 2986, 3020, 3020, 3020, 3024, 3058, 3058, 3058, 3058, 3062, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3100, 3135, 3135, 3135, 3135, 3135, 3135, 3135, 3135, 3135, 3100, 3097, 3097, 3097, 3097, 3097, 3062, 3058, 3058, 3024, 3020, 2986, 2948, 2944, 2909, 2871, 2837, 2833, 2795, 2761, 2757, 2719, 2684, 2680, 2646, 2646, 2642, 2608, 2608, 2608, 2642, 2680, 2715, 2719, 2757, 2761, 2795, 2833, 2837, 2871, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2871, 2837, 2837, 2837, 2837, 2833, 2799, 2799, 2795, 2761, 2761, 2761, 2757, 2722, 2722, 2719, 2684, 2684, 2684, 2680, 2646, 2642, 2608, 2608, 2604, 2566, 2531, 2528, 2489, 2455, 2451, 2413, 2375, 2337, 2333, 2299, 2260, 2257, 2222, 2218, 2218, 2218, 2184, 2180, 2146, 2142, 2142, 2108, 2104, 2104, 2104, 2104, 2069, 2066, 2066, 2066, 2031, 2027, 2027, 2027, 1993, 1989, 1989, 1989, 1955, 1951, 1951, 1917, 1913, 1913, 1878, 1875, 1840, 1836, 1836, 1802, 1764, 1760, 1726, 1688, 1649, 1611, 1573, 1535, 1500, 1497, 1462, 1458, 1424, 1420, 1386, 1382, 1348, 1344, 1310, 1306, 1271, 1271, 1268, 1233, 1233, 1229, 1191, 1157, 1157, 1157, 1153, 1119, 1115, 1080, 1080, 1080, 1077, 1042, 1042, 1038, 1004, 1004, 1004, 1000, 966, 966, 966, 962, 928, 928, 928, 928, 924, 890, 890, 886, 851, 851, 851, 851, 851, 848, 813, 851, 851, 886, 890, 924, 962, 1000, 1038, 1077, 1115, 1149, 1153, 1191, 1229, 1268, 1302, 1306, 1344, 1382, 1416, 1420, 1455, 1458, 1497, 1531, 1535, 1573, 1611, 1646, 1649, 1684, 1688, 1726, 1760, 1764, 1802, 1836, 1840, 1878, 1913, 1917, 1951, 1955, 1993, 2031, 2066, 2069, 2108, 2142, 2146, 2180, 2184, 2222, 2260, 2295, 2299, 2337, 2371, 2375, 2409, 2413, 2451, 2486, 2489, 2528, 2562, 2566, 2604, 2638, 2642, 2677, 2680, 2719, 2753, 2757, 2795, 2833, 2867, 2871, 2906, 2909, 2948, 2982, 2986, 3020, 3020, 3024, 3058, 3062, 3097, 3097, 3097, 3097, 3062, 3058, 3024, 2986, 2951, 2948, 2909, 2871, 2837, 2833, 2795, 2761, 2757, 2722, 2719, 2680, 2646, 2642, 2608, 2604, 2566, 2531, 2528, 2493, 2489, 2451, 2417, 2413, 2375, 2341, 2337, 2302, 2299, 2260, 2226, 2222, 2184, 2150, 2146, 2111, 2108, 2069, 2035, 2031, 1993, 1959, 1955, 1917, 1882, 1878, 1840, 1806, 1802, 1764, 1730, 1726, 1688, 1653, 1649, 1611, 1577, 1573, 1535, 1497, 1462, 1458, 1420, 1382, 1348, 1344, 1306, 1271, 1268, 1229, 1191, 1153, 1119, 1115, 1077, 1038, 1004, 1000, 966, 962, 928, 924, 890, 890, 886, 851, 3333, 3368, 3371, 3371, 3371, 3406, 3410, 3444, 3482, 3517, 3520, 3555, 3559, 3597, 3631, 3631, 3635, 3669, 3673, 3707, 3707, 3707, 3707, 3707, 3707, 3673, 3669, 3635, 3597, 3559, 3524, 3520, 3486, 3482, 3444, 3410, 3410, 3406, 3371, 3371, 3371, 3368, 3333, 775, 775, 809, 813, 848, 886, 924, 962, 1000, 1035, 1038, 1077, 1111, 1115, 1149, 1153, 1191, 1229, 1264, 1268, 1302, 1306, 1344, 1378, 1382, 1416, 1420, 1458, 1493, 1497, 1531, 1535, 1573, 1607, 1611, 1646, 1649, 1688, 1722, 1726, 1764, 1798, 1802, 1836, 1840, 1878, 1913, 1917, 1955, 1989, 1993, 2027, 2031, 2069, 2104, 2108, 2146, 2180, 2184, 2218, 2222, 2260, 2295, 2299, 2337, 2371, 2375, 2413, 2447, 2451, 2486, 2489, 2528, 2566, 2600, 2604, 2642, 2677, 2680, 2715, 2719, 2757, 2791, 2795, 2833, 2871, 2906, 2909, 2948, 2982, 2982, 2986, 3020, 3020, 3020, 3020, 3020, 3020, 2986, 2948, 2909, 2871, 2833, 2795, 2757, 2719, 2680, 2642, 2604, 2566, 2528, 2489, 2451, 2413, 2409, 2375, 2337, 2299, 2260, 2222, 2218, 2184, 2146, 2108, 2069, 2066, 2031, 1993, 1989, 1955, 1917, 1878, 1875, 1840, 1802, 1764, 1760, 1726, 1688, 1684, 1649, 1611, 1607, 1573, 1535, 1497, 1493, 1458, 1455, 1420, 1382, 1378, 1344, 1340, 1344, 1382, 1416, 1420, 1455, 1458, 1497, 1531, 1535, 1573, 1607, 1611, 1646, 1649, 1688, 1722, 1726, 1760, 1764, 1802, 1836, 1840, 1878, 1913, 1917, 1955, 1989, 1993, 2031, 2066, 2069, 2104, 2108, 2142, 2146, 2184, 2222, 2257, 2260, 2295, 2299, 2337, 2371, 2375, 2413, 2447, 2451, 2489, 2528, 2562, 2566, 2600, 2604, 2642, 2677, 2680, 2719, 2753, 2757, 2791, 2795, 2833, 2871, 2909, 2944, 2948, 2986, 3020, 3024, 3058, 3058, 3062, 3097, 3097, 3097, 3100, 3135, 3135, 3135, 3100, 3062, 3024, 2986, 2948, 2913, 2909, 2871, 2837, 2833, 2795, 2761, 2757, 2722, 2719, 2684, 2680, 2642, 2608, 2604, 2566, 2531, 2528, 2493, 2489, 2451, 2417, 2413, 2375, 2341, 2337, 2302, 2299, 2264, 2260, 2222, 2188, 2184, 2146, 2111, 2108, 2073, 2069, 2031, 1997, 1993, 1955, 1921, 1917, 1878, 1840, 1806, 1802, 1768, 1764, 1730, 1726, 1688, 1653, 1649, 1615, 1611, 1573, 1535, 1500, 1497, 1458, 1424, 1420, 1386, 1382, 1344, 1310, 1306, 1268, 1233, 1229, 1191, 1153, 1115, 1080, 1077, 1038, 1004, 1000, 966, 962, 928, 928, 924, 890, 886, 851, 851, 851, 851, 886, 924, 928, 928, 962, 1000, 1038, 1042, 1077, 1115, 1153, 1191, 1229, 1233, 1268, 1271, 1306, 1344, 1382, 1386, 1420, 1458, 1462, 1497, 1535, 1573, 1577, 1611, 1649, 1653, 1688, 1726, 1764, 1768, 1802, 1840, 1878, 1917, 1921, 1955, 1959, 1993, 2031, 2069, 2108, 2111, 2146, 2184, 2222, 2260, 2299, 2302, 2337, 2375, 2413, 2417, 2413, 2379, 2375, 2337, 2302, 2299, 2264, 2260, 2226, 2222, 2184, 2146, 2111, 2108, 2069, 2035, 2035, 2031, 1993, 1959, 1955, 1917, 1882, 1878, 1840, 1802, 1768, 1764, 1730, 1726, 1688, 1653, 1649, 1611, 1577, 1573, 1539, 1535, 1497, 1458, 1424, 1420, 1382, 1348, 1344, 1310, 1306, 1268, 1233, 1229, 1191, 1153, 1119, 1115, 1077, 1038, 1004, 1000, 966, 962, 928, 924, 886, 851, 851, 848, 813, 813, 809, 775, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 848, 851, 851, 886, 890, 924, 928, 962, 966, 1000, 1004, 1038, 1077, 1115, 1119, 1153, 1191, 1229, 1268, 1306, 1344, 1382, 1420, 1458, 1497, 1531, 1535, 1573, 1611, 1646, 1649, 1684, 1688, 1726, 1760, 1764, 1802, 1836, 1840, 1878, 1913, 1917, 1951, 1955, 1993, 2027, 2031, 2066, 2069, 2104, 2108, 2142, 2146, 2184, 2218, 2218, 2222, 2260, 2295, 2299, 2333, 2333, 2337, 2375, 2409, 2413, 2447, 2451, 2486, 2486, 2489, 2528, 2562, 2566, 2600, 2600, 2604, 2638, 2642, 2677, 2680, 2715, 2715, 2719, 2753, 2753, 2757, 2791, 2795, 2829, 2833, 2867, 2867, 2871, 2906, 2906, 2909, 2944, 2944, 2948, 2982, 2982, 2982, 2986, 3020, 3020, 3024, 3058, 3058, 3058, 3058, 3062, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3062, 3058, 3058, 3058, 3058, 3024, 3020, 3020, 2986, 2982, 2948, 2944, 2909, 2906, 2906, 2871, 2833, 2829, 2795, 2757, 2753, 2719, 2680, 2677, 2642, 2604, 2570, 2566, 2528, 2489, 2455, 2451, 2413, 2375, 2337, 2302, 2299, 2260, 2226, 2222, 2188, 2184, 2146, 2108, 2073, 2069, 2035, 2031, 1993, 1959, 1955, 1921, 1917, 1882, 1878, 1840, 1806, 1806, 1802, 1764, 1730, 1726, 1691, 1691, 1688, 1653, 1649, 1615, 1611, 1577, 1573, 1539, 1535, 1500, 1497, 1462, 1462, 1458, 1424, 1420, 1386, 1382, 1348, 1348, 1344, 1310, 1306, 1271, 1271, 1268, 1233, 1229, 1195, 1195, 1191, 1157, 1153, 1119, 1119, 1115, 1080, 1080, 1077, 1042, 1042, 1038, 1004, 1004, 1000, 966, 966, 962, 928, 928, 928, 924, 890, 890, 886, 851, 851, 851, 851, 851, 848, 813, 1077, 1111, 1111, 1111, 1111, 1111, 1115, 1149, 1149, 1149, 1153, 1187, 1187, 1187, 1191, 1226, 1229, 1264, 1264, 1268, 1302, 1302, 1306, 1340, 1340, 1344, 1378, 1378, 1382, 1416, 1420, 1455, 1455, 1458, 1493, 1497, 1531, 1531, 1535, 1573, 1607, 1607, 1611, 1646, 1649, 1684, 1688, 1722, 1726, 1760, 1760, 1764, 1798, 1802, 1840, 1875, 1878, 1913, 1917, 1951, 1955, 1989, 1993, 2031, 2066, 2069, 2104, 2108, 2146, 2180, 2184, 2222, 2257, 2260, 2299, 2333, 2337, 2375, 2413, 2447, 2451, 2489, 2528, 2566, 2604, 2642, 2646, 2680, 2684, 2719, 2722, 2757, 2761, 2761, 2795, 2799, 2833, 2837, 2837, 2837, 2837, 2871, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2871, 2837, 2837, 2837, 2833, 2799, 2799, 2795, 2761, 2761, 2757, 2722, 2722, 2719, 2684, 2684, 2680, 2646, 2646, 2642, 2608, 2604, 2570, 2570, 2566, 2531, 2528, 2493, 2489, 2455, 2451, 2417, 2413, 2379, 2379, 2375, 2341, 2337, 2302, 2299, 2264, 2260, 2226, 2222, 2188, 2184, 2150, 2146, 2111, 2108, 2073, 2069, 2035, 2031, 1993, 1959, 1959, 1955, 1917, 1882, 1878, 1840, 1806, 1802, 1768, 1764, 1726, 1691, 1688, 1649, 1615, 1611, 1577, 1573, 1535, 1497, 1458, 1420, 1382, 1344, 1306, 1268, 1264, 1229, 1191, 1187, 1153, 1149, 1115, 1111, 1111, 1111, 1077, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1077, 50, 50, 50, 50, 50, 50, 50, 50, 84, 88, 88, 88, 122, 126, 160, 198, 237, 271, 275, 309, 313, 347, 347, 313, 309, 309, 275, 271, 237, 233, 233, 233, 233, 237, 271, 271, 275, 309, 309, 313, 347, 347, 351, 389, 424, 428, 466, 470, 504, 508, 508, 508, 508, 508, 504, 470, 470, 504, 508, 542, 576, 580, 618, 653, 657, 691, 695, 733, 767, 767, 771, 775, 775, 775, 775, 775, 771, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 771, 809, 848, 886, 920, 924, 962, 996, 996, 996, 996, 996, 996, 996, 1000, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1038, 1073, 1073, 1073, 1073, 1077, 1111, 1111, 1111, 1111, 1115, 1149, 1149, 1149, 1153, 1187, 1187, 1187, 1191, 1226, 1229, 1264, 1264, 1268, 1302, 1302, 1302, 1306, 1340, 1344, 1378, 1378, 1382, 1416, 1420, 1455, 1458, 1493, 1497, 1535, 1573, 1577, 1577, 1611, 1615, 1649, 1653, 1653, 1688, 1691, 1691, 1691, 1691, 1726, 1730, 1730, 1730, 1730, 1764, 1768, 1768, 1768, 1802, 1806, 1806, 1806, 1840, 1844, 1878, 1882, 1882, 1917, 1921, 1921, 1955, 1959, 1993, 1997, 1997, 2031, 2069, 2073, 2108, 2111, 2146, 2184, 2222, 2260, 2299, 2337, 2375, 2413, 2451, 2486, 2489, 2524, 2528, 2566, 2600, 2604, 2638, 2642, 2677, 2680, 2715, 2715, 2719, 2753, 2753, 2757, 2791, 2795, 2829, 2829, 2833, 2867, 2867, 2871, 2906, 2906, 2909, 2944, 2944, 2944, 2948, 2982, 2982, 2982, 2982, 2986, 3020, 3020, 3020, 3020, 3024, 3058, 3058, 3058, 3058, 3058, 3058, 3062, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3062, 3058, 3058, 3058, 3058, 3024, 3020, 3020, 2986, 2982, 2948, 2944, 2909, 2871, 2833, 2795, 2757, 2722, 2719, 2684, 2680, 2642, 2608, 2608, 2604, 2570, 2570, 2570, 2604, 2642, 2680, 2719, 2757, 2761, 2795, 2799, 2833, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837, 2833, 2799, 2799, 2799, 2795, 2761, 2761, 2761, 2761, 2757, 2722, 2722, 2722, 2719, 2684, 2684, 2680, 2646, 2646, 2642, 2608, 2604, 2570, 2570, 2566, 2531, 2528, 2493, 2489, 2455, 2451, 2413, 2375, 2337, 2333, 2299, 2295, 2260, 2257, 2222, 2184, 2180, 2180, 2146, 2142, 2108, 2104, 2104, 2104, 2069, 2066, 2066, 2066, 2031, 2027, 2027, 2027, 2027, 1993, 1989, 1989, 1989, 1955, 1951, 1951, 1951, 1917, 1913, 1913, 1913, 1878, 1840, 1836, 1836, 1802, 1798, 1764, 1760, 1726, 1688, 1684, 1649, 1611, 1577, 1573, 1535, 1497, 1458, 1424, 1420, 1386, 1382, 1348, 1344, 1310, 1306, 1271, 1271, 1268, 1233, 1229, 1195, 1191, 1157, 1157, 1153, 1119, 1119, 1115, 1080, 1077, 1042, 1042, 1042, 1038, 1004, 1004, 1004, 1000, 966, 966, 962, 928, 928, 928, 924, 890, 890, 886, 851, 851, 848, 813, 809, 775, 771, 733, 695, 691, 691, 691, 691, 657, 653, 653, 618, 580, 542, 504, 466, 428, 393, 389, 351, 317, 313, 275, 240, 237, 202, 198, 164, 164, 160, 126, 126, 122, 88, 88, 88, 88, 84, 50};
 8000548:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 800054c:	f6a3 73ec 	subw	r3, r3, #4076	@ 0xfec
 8000550:	4a2a      	ldr	r2, [pc, #168]	@ (80005fc <main+0x108>)
 8000552:	4618      	mov	r0, r3
 8000554:	4611      	mov	r1, r2
 8000556:	f640 73f2 	movw	r3, #4082	@ 0xff2
 800055a:	461a      	mov	r2, r3
 800055c:	f003 fd44 	bl	8003fe8 <memcpy>
  	  index_count +=1;

   }
   */
  ///------- DAC START
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000560:	2100      	movs	r1, #0
 8000562:	4827      	ldr	r0, [pc, #156]	@ (8000600 <main+0x10c>)
 8000564:	f000 ff07 	bl	8001376 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000568:	2110      	movs	r1, #16
 800056a:	4825      	ldr	r0, [pc, #148]	@ (8000600 <main+0x10c>)
 800056c:	f000 ff03 	bl	8001376 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, 2048);
 8000570:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	4821      	ldr	r0, [pc, #132]	@ (8000600 <main+0x10c>)
 800057a:	f000 ff53 	bl	8001424 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, 2048);
 800057e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000582:	2200      	movs	r2, #0
 8000584:	2110      	movs	r1, #16
 8000586:	481e      	ldr	r0, [pc, #120]	@ (8000600 <main+0x10c>)
 8000588:	f000 ff4c 	bl	8001424 <HAL_DAC_SetValue>
  HAL_DMA_Start(&hdma_tim8_up, (uint32_t)&X[0], (uint32_t)&(DAC->DHR12R1), window_len);
 800058c:	f607 71f8 	addw	r1, r7, #4088	@ 0xff8
 8000590:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8000594:	f103 030c 	add.w	r3, r3, #12
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1a      	ldr	r2, [pc, #104]	@ (8000604 <main+0x110>)
 800059c:	481a      	ldr	r0, [pc, #104]	@ (8000608 <main+0x114>)
 800059e:	f001 f873 	bl	8001688 <HAL_DMA_Start>
  HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&Y[0], (uint32_t)&(DAC->DHR12R2), window_len);
 80005a2:	f107 0110 	add.w	r1, r7, #16
 80005a6:	390c      	subs	r1, #12
 80005a8:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 80005ac:	f103 030c 	add.w	r3, r3, #12
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a16      	ldr	r2, [pc, #88]	@ (800060c <main+0x118>)
 80005b4:	4816      	ldr	r0, [pc, #88]	@ (8000610 <main+0x11c>)
 80005b6:	f001 f867 	bl	8001688 <HAL_DMA_Start>
  TIM8->DIER |= TIM_DIER_UDE;
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <main+0x120>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4a15      	ldr	r2, [pc, #84]	@ (8000614 <main+0x120>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c4:	60d3      	str	r3, [r2, #12]
  TIM1->DIER |= TIM_DIER_UDE;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <main+0x124>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <main+0x124>)
 80005cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d0:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start(&htim8);
 80005d2:	4812      	ldr	r0, [pc, #72]	@ (800061c <main+0x128>)
 80005d4:	f002 fb1a 	bl	8002c0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 80005d8:	4811      	ldr	r0, [pc, #68]	@ (8000620 <main+0x12c>)
 80005da:	f002 fb17 	bl	8002c0c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0x128>)
 80005e2:	f002 fbd5 	bl	8002d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <main+0x12c>)
 80005ea:	f002 fbd1 	bl	8002d90 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f2:	f000 fd69 	bl	80010c8 <HAL_Delay>
 80005f6:	e7fa      	b.n	80005ee <main+0xfa>
 80005f8:	0800401c 	.word	0x0800401c
 80005fc:	08005010 	.word	0x08005010
 8000600:	20000028 	.word	0x20000028
 8000604:	40007408 	.word	0x40007408
 8000608:	2000012c 	.word	0x2000012c
 800060c:	40007414 	.word	0x40007414
 8000610:	200000cc 	.word	0x200000cc
 8000614:	40010400 	.word	0x40010400
 8000618:	40010000 	.word	0x40010000
 800061c:	20000084 	.word	0x20000084
 8000620:	2000003c 	.word	0x2000003c

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fcac 	bl	8003f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <SystemClock_Config+0xe0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <SystemClock_Config+0xe0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <SystemClock_Config+0xe0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xe4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a26      	ldr	r2, [pc, #152]	@ (8000708 <SystemClock_Config+0xe4>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <SystemClock_Config+0xe4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000694:	2310      	movs	r3, #16
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000698:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 ffbe 	bl	8002630 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ba:	f000 fa57 	bl	8000b6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006be:	f001 fc1d 	bl	8001efc <HAL_PWREx_EnableOverDrive>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006c8:	f000 fa50 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fc56 	bl	8001f9c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006f6:	f000 fa39 	bl	8000b6c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_DAC_Init+0x60>)
 800071c:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <MX_DAC_Init+0x64>)
 800071e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000720:	4812      	ldr	r0, [pc, #72]	@ (800076c <MX_DAC_Init+0x60>)
 8000722:	f000 fe06 	bl	8001332 <HAL_DAC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800072c:	f000 fa1e 	bl	8000b6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <MX_DAC_Init+0x60>)
 8000740:	f000 fe9a 	bl	8001478 <HAL_DAC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800074a:	f000 fa0f 	bl	8000b6c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	2210      	movs	r2, #16
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_DAC_Init+0x60>)
 8000756:	f000 fe8f 	bl	8001478 <HAL_DAC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 fa04 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000028 	.word	0x20000028
 8000770:	40007400 	.word	0x40007400

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b096      	sub	sp, #88	@ 0x58
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2220      	movs	r2, #32
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fbef 	bl	8003f90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007b4:	4a3e      	ldr	r2, [pc, #248]	@ (80008b0 <MX_TIM1_Init+0x13c>)
 80007b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b8:	4b3c      	ldr	r3, [pc, #240]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b3b      	ldr	r3, [pc, #236]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = timer_period;
 80007c4:	4b39      	ldr	r3, [pc, #228]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007c6:	22b4      	movs	r2, #180	@ 0xb4
 80007c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b38      	ldr	r3, [pc, #224]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d0:	4b36      	ldr	r3, [pc, #216]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b35      	ldr	r3, [pc, #212]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007dc:	4833      	ldr	r0, [pc, #204]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007de:	f002 f9c5 	bl	8002b6c <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007e8:	f000 f9c0 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007f6:	4619      	mov	r1, r3
 80007f8:	482c      	ldr	r0, [pc, #176]	@ (80008ac <MX_TIM1_Init+0x138>)
 80007fa:	f002 fc53 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000804:	f000 f9b2 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000808:	4828      	ldr	r0, [pc, #160]	@ (80008ac <MX_TIM1_Init+0x138>)
 800080a:	f002 fa67 	bl	8002cdc <HAL_TIM_PWM_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000814:	f000 f9aa 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000820:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000824:	4619      	mov	r1, r3
 8000826:	4821      	ldr	r0, [pc, #132]	@ (80008ac <MX_TIM1_Init+0x138>)
 8000828:	f003 f820 	bl	800386c <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000832:	f000 f99b 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	@ 0x60
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = timer_period/2;
 800083a:	235a      	movs	r3, #90	@ 0x5a
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000842:	2300      	movs	r3, #0
 8000844:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	4619      	mov	r1, r3
 800085a:	4814      	ldr	r0, [pc, #80]	@ (80008ac <MX_TIM1_Init+0x138>)
 800085c:	f002 fb60 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000866:	f000 f981 	bl	8000b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800087e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000882:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <MX_TIM1_Init+0x138>)
 800088e:	f003 f869 	bl	8003964 <HAL_TIMEx_ConfigBreakDeadTime>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000898:	f000 f968 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <MX_TIM1_Init+0x138>)
 800089e:	f000 fa77 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 80008a2:	bf00      	nop
 80008a4:	3758      	adds	r7, #88	@ 0x58
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000003c 	.word	0x2000003c
 80008b0:	40010000 	.word	0x40010000

080008b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b096      	sub	sp, #88	@ 0x58
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2220      	movs	r2, #32
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fb4f 	bl	8003f90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f2:	4b3e      	ldr	r3, [pc, #248]	@ (80009ec <MX_TIM8_Init+0x138>)
 80008f4:	4a3e      	ldr	r2, [pc, #248]	@ (80009f0 <MX_TIM8_Init+0x13c>)
 80008f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008f8:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <MX_TIM8_Init+0x138>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b3b      	ldr	r3, [pc, #236]	@ (80009ec <MX_TIM8_Init+0x138>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = timer_period;
 8000904:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <MX_TIM8_Init+0x138>)
 8000906:	22b4      	movs	r2, #180	@ 0xb4
 8000908:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b38      	ldr	r3, [pc, #224]	@ (80009ec <MX_TIM8_Init+0x138>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000910:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <MX_TIM8_Init+0x138>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b35      	ldr	r3, [pc, #212]	@ (80009ec <MX_TIM8_Init+0x138>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800091c:	4833      	ldr	r0, [pc, #204]	@ (80009ec <MX_TIM8_Init+0x138>)
 800091e:	f002 f925 	bl	8002b6c <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000928:	f000 f920 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000936:	4619      	mov	r1, r3
 8000938:	482c      	ldr	r0, [pc, #176]	@ (80009ec <MX_TIM8_Init+0x138>)
 800093a:	f002 fbb3 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000944:	f000 f912 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000948:	4828      	ldr	r0, [pc, #160]	@ (80009ec <MX_TIM8_Init+0x138>)
 800094a:	f002 f9c7 	bl	8002cdc <HAL_TIM_PWM_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000954:	f000 f90a 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000960:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000964:	4619      	mov	r1, r3
 8000966:	4821      	ldr	r0, [pc, #132]	@ (80009ec <MX_TIM8_Init+0x138>)
 8000968:	f002 ff80 	bl	800386c <HAL_TIMEx_MasterConfigSynchronization>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000972:	f000 f8fb 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000976:	2360      	movs	r3, #96	@ 0x60
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = timer_period/2;
 800097a:	235a      	movs	r3, #90	@ 0x5a
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	4814      	ldr	r0, [pc, #80]	@ (80009ec <MX_TIM8_Init+0x138>)
 800099c:	f002 fac0 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80009a6:	f000 f8e1 	bl	8000b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <MX_TIM8_Init+0x138>)
 80009ce:	f002 ffc9 	bl	8003964 <HAL_TIMEx_ConfigBreakDeadTime>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80009d8:	f000 f8c8 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_TIM8_Init+0x138>)
 80009de:	f000 f9d7 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 80009e2:	bf00      	nop
 80009e4:	3758      	adds	r7, #88	@ 0x58
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000084 	.word	0x20000084
 80009f0:	40010400 	.word	0x40010400

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f002 ffec 	bl	8003a08 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f899 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000018c 	.word	0x2000018c
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_DMA_Init+0x4c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <MX_DMA_Init+0x4c>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <MX_DMA_Init+0x4c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2039      	movs	r0, #57	@ 0x39
 8000a70:	f000 fc29 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a74:	2039      	movs	r0, #57	@ 0x39
 8000a76:	f000 fc42 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2044      	movs	r0, #68	@ 0x44
 8000a80:	f000 fc21 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000a84:	2044      	movs	r0, #68	@ 0x44
 8000a86:	f000 fc3a 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a24      	ldr	r2, [pc, #144]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a16      	ldr	r2, [pc, #88]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <MX_GPIO_Init+0xd0>)
 8000b36:	f001 f84d 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <MX_GPIO_Init+0xd0>)
 8000b58:	f001 f83c 	bl	8001bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020800 	.word	0x40020800

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f000 fb7a 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <HAL_DAC_MspInit+0x7c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d127      	bne.n	8000c3a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a15      	ldr	r2, [pc, #84]	@ (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c22:	2330      	movs	r3, #48	@ 0x30
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <HAL_DAC_MspInit+0x84>)
 8000c36:	f000 ffcd 	bl	8001bd4 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40007400 	.word	0x40007400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a45      	ldr	r2, [pc, #276]	@ (8000d74 <HAL_TIM_Base_MspInit+0x124>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d13f      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b44      	ldr	r3, [pc, #272]	@ (8000d78 <HAL_TIM_Base_MspInit+0x128>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a43      	ldr	r2, [pc, #268]	@ (8000d78 <HAL_TIM_Base_MspInit+0x128>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b41      	ldr	r3, [pc, #260]	@ (8000d78 <HAL_TIM_Base_MspInit+0x128>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000c80:	4a3f      	ldr	r2, [pc, #252]	@ (8000d80 <HAL_TIM_Base_MspInit+0x130>)
 8000c82:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000c84:	4b3d      	ldr	r3, [pc, #244]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000c86:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000c8a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000c8e:	2240      	movs	r2, #64	@ 0x40
 8000c90:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c92:	4b3a      	ldr	r3, [pc, #232]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000c98:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ca6:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca8:	4b34      	ldr	r3, [pc, #208]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000caa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cae:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000cb0:	4b32      	ldr	r3, [pc, #200]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb6:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000cb8:	4b30      	ldr	r3, [pc, #192]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000cc4:	482d      	ldr	r0, [pc, #180]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000cc6:	f000 fc31 	bl	800152c <HAL_DMA_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000cd0:	f7ff ff4c 	bl	8000b6c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a29      	ldr	r2, [pc, #164]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000cd8:	621a      	str	r2, [r3, #32]
 8000cda:	4a28      	ldr	r2, [pc, #160]	@ (8000d7c <HAL_TIM_Base_MspInit+0x12c>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ce0:	e043      	b.n	8000d6a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM8)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a27      	ldr	r2, [pc, #156]	@ (8000d84 <HAL_TIM_Base_MspInit+0x134>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d13e      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <HAL_TIM_Base_MspInit+0x128>)
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf4:	4a20      	ldr	r2, [pc, #128]	@ (8000d78 <HAL_TIM_Base_MspInit+0x128>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <HAL_TIM_Base_MspInit+0x128>)
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_up.Instance = DMA2_Stream1;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d0a:	4a20      	ldr	r2, [pc, #128]	@ (8000d8c <HAL_TIM_Base_MspInit+0x13c>)
 8000d0c:	601a      	str	r2, [r3, #0]
    hdma_tim8_up.Init.Channel = DMA_CHANNEL_7;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d10:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_tim8_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d18:	2240      	movs	r2, #64	@ 0x40
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_tim8_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_tim8_up.Init.MemInc = DMA_MINC_ENABLE;
 8000d22:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_tim8_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d30:	615a      	str	r2, [r3, #20]
    hdma_tim8_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_tim8_up.Init.Mode = DMA_CIRCULAR;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d40:	61da      	str	r2, [r3, #28]
    hdma_tim8_up.Init.Priority = DMA_PRIORITY_LOW;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
    hdma_tim8_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_up) != HAL_OK)
 8000d4e:	480e      	ldr	r0, [pc, #56]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d50:	f000 fbec 	bl	800152c <HAL_DMA_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 8000d5a:	f7ff ff07 	bl	8000b6c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim8_up);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d62:	621a      	str	r2, [r3, #32]
 8000d64:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_TIM_Base_MspInit+0x138>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40010000 	.word	0x40010000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	200000cc 	.word	0x200000cc
 8000d80:	40026488 	.word	0x40026488
 8000d84:	40010400 	.word	0x40010400
 8000d88:	2000012c 	.word	0x2000012c
 8000d8c:	40026428 	.word	0x40026428

08000d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a24      	ldr	r2, [pc, #144]	@ (8000e40 <HAL_TIM_MspPostInit+0xb0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d11f      	bne.n	8000df2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <HAL_TIM_MspPostInit+0xb4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a22      	ldr	r2, [pc, #136]	@ (8000e44 <HAL_TIM_MspPostInit+0xb4>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <HAL_TIM_MspPostInit+0xb4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <HAL_TIM_MspPostInit+0xb8>)
 8000dec:	f000 fef2 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000df0:	e022      	b.n	8000e38 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <HAL_TIM_MspPostInit+0xbc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d11d      	bne.n	8000e38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <HAL_TIM_MspPostInit+0xb4>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <HAL_TIM_MspPostInit+0xb4>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <HAL_TIM_MspPostInit+0xb4>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <HAL_TIM_MspPostInit+0xc0>)
 8000e34:	f000 fece 	bl	8001bd4 <HAL_GPIO_Init>
}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	@ 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40010000 	.word	0x40010000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40010400 	.word	0x40010400
 8000e50:	40020800 	.word	0x40020800

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000eca:	f000 fe83 	bl	8001bd4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <NMI_Handler+0x4>

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3a:	f000 f8a5 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_up);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <DMA2_Stream1_IRQHandler+0x10>)
 8000f4a:	f000 fbd9 	bl	8001700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000012c 	.word	0x2000012c

08000f58 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <DMA2_Stream5_IRQHandler+0x10>)
 8000f5e:	f000 fbcf 	bl	8001700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000cc 	.word	0x200000cc

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f002 ffef 	bl	8003fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fa97 	bl	80004f4 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd4:	08006034 	.word	0x08006034
  ldr r2, =_sbss
 8000fd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fdc:	200001d8 	.word	0x200001d8

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <HAL_Init+0x40>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_Init+0x40>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <HAL_Init+0x40>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f94f 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fdae 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f967 	bl	800131a <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f92f 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	200001d4 	.word	0x200001d4

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200001d4 	.word	0x200001d4

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	@ (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	@ 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e014      	b.n	800136e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fc37 	bl	8000bc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2202      	movs	r2, #2
 800135e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e046      	b.n	8001418 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	795b      	ldrb	r3, [r3, #5]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_DAC_Start+0x20>
 8001392:	2302      	movs	r3, #2
 8001394:	e040      	b.n	8001418 <HAL_DAC_Start+0xa2>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2201      	movs	r2, #1
 80013b0:	409a      	lsls	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10f      	bne.n	80013e0 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80013ca:	2b3c      	cmp	r3, #60	@ 0x3c
 80013cc:	d11d      	bne.n	800140a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	e014      	b.n	800140a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	213c      	movs	r1, #60	@ 0x3c
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d107      	bne.n	800140a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0202 	orr.w	r2, r2, #2
 8001408:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e015      	b.n	800146c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	3308      	adds	r3, #8
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	e004      	b.n	8001462 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	3314      	adds	r3, #20
 8001460:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	461a      	mov	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <HAL_DAC_ConfigChannel+0x1c>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e042      	b.n	800151e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_DAC_ConfigChannel+0x2c>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e03c      	b.n	800151e <HAL_DAC_ConfigChannel+0xa6>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2202      	movs	r2, #2
 80014ae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	22c0      	movs	r2, #192	@ 0xc0
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2201      	movs	r2, #1
 8001514:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800151c:	7ffb      	ldrb	r3, [r7, #31]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff fdba 	bl	80010b0 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e099      	b.n	800167c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001568:	e00f      	b.n	800158a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156a:	f7ff fda1 	bl	80010b0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b05      	cmp	r3, #5
 8001576:	d908      	bls.n	800158a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e078      	b.n	800167c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e8      	bne.n	800156a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4b38      	ldr	r3, [pc, #224]	@ (8001684 <HAL_DMA_Init+0x158>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d107      	bne.n	80015f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	4313      	orrs	r3, r2
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f023 0307 	bic.w	r3, r3, #7
 800160a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	4313      	orrs	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	2b04      	cmp	r3, #4
 800161c:	d117      	bne.n	800164e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fa53 	bl	8001adc <DMA_CheckFifoParam>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800164a:	2301      	movs	r3, #1
 800164c:	e016      	b.n	800167c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fa0a 	bl	8001a70 <DMA_CalcBaseAndBitshift>
 800165c:	4603      	mov	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001664:	223f      	movs	r2, #63	@ 0x3f
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	f010803f 	.word	0xf010803f

08001688 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_DMA_Start+0x20>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e026      	b.n	80016f6 <HAL_DMA_Start+0x6e>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d115      	bne.n	80016e8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 f99f 	bl	8001a14 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0201 	orr.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e005      	b.n	80016f4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
 80016f2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800170c:	4b8e      	ldr	r3, [pc, #568]	@ (8001948 <HAL_DMA_IRQHandler+0x248>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a8e      	ldr	r2, [pc, #568]	@ (800194c <HAL_DMA_IRQHandler+0x24c>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0a9b      	lsrs	r3, r3, #10
 8001718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172a:	2208      	movs	r2, #8
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0204 	bic.w	r2, r2, #4
 8001752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001758:	2208      	movs	r2, #8
 800175a:	409a      	lsls	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001770:	2201      	movs	r2, #1
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d012      	beq.n	80017a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	2201      	movs	r2, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179a:	f043 0202 	orr.w	r2, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	2204      	movs	r2, #4
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d012      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c4:	2204      	movs	r2, #4
 80017c6:	409a      	lsls	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d0:	f043 0204 	orr.w	r2, r3, #4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017dc:	2210      	movs	r2, #16
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d043      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03c      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fa:	2210      	movs	r2, #16
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d018      	beq.n	8001842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d108      	bne.n	8001830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d024      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
 800182e:	e01f      	b.n	8001870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
 8001840:	e016      	b.n	8001870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0208 	bic.w	r2, r2, #8
 800185e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001874:	2220      	movs	r2, #32
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 808f 	beq.w	80019a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8087 	beq.w	80019a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001896:	2220      	movs	r2, #32
 8001898:	409a      	lsls	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d136      	bne.n	8001918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0216 	bic.w	r2, r2, #22
 80018b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <HAL_DMA_IRQHandler+0x1da>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0208 	bic.w	r2, r2, #8
 80018e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ee:	223f      	movs	r2, #63	@ 0x3f
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190a:	2b00      	cmp	r3, #0
 800190c:	d07e      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
        }
        return;
 8001916:	e079      	b.n	8001a0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01d      	beq.n	8001962 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10d      	bne.n	8001950 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	2b00      	cmp	r3, #0
 800193a:	d031      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
 8001944:	e02c      	b.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
 8001960:	e01e      	b.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10f      	bne.n	8001990 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0210 	bic.w	r2, r2, #16
 800197e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d032      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d022      	beq.n	80019fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2205      	movs	r2, #5
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d307      	bcc.n	80019e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f2      	bne.n	80019cc <HAL_DMA_IRQHandler+0x2cc>
 80019e6:	e000      	b.n	80019ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
 8001a0a:	e000      	b.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a0c:	bf00      	nop
    }
  }
}
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b40      	cmp	r3, #64	@ 0x40
 8001a40:	d108      	bne.n	8001a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a52:	e007      	b.n	8001a64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	3b10      	subs	r3, #16
 8001a80:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d909      	bls.n	8001ab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	1d1a      	adds	r2, r3, #4
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ab0:	e007      	b.n	8001ac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	aaaaaaab 	.word	0xaaaaaaab
 8001ad8:	0800601c 	.word	0x0800601c

08001adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d11f      	bne.n	8001b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d856      	bhi.n	8001baa <DMA_CheckFifoParam+0xce>
 8001afc:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <DMA_CheckFifoParam+0x28>)
 8001afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b02:	bf00      	nop
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b27 	.word	0x08001b27
 8001b0c:	08001b15 	.word	0x08001b15
 8001b10:	08001bab 	.word	0x08001bab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d046      	beq.n	8001bae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b24:	e043      	b.n	8001bae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b2e:	d140      	bne.n	8001bb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b34:	e03d      	b.n	8001bb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b3e:	d121      	bne.n	8001b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d837      	bhi.n	8001bb6 <DMA_CheckFifoParam+0xda>
 8001b46:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <DMA_CheckFifoParam+0x70>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b63 	.word	0x08001b63
 8001b54:	08001b5d 	.word	0x08001b5d
 8001b58:	08001b75 	.word	0x08001b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b60:	e030      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d025      	beq.n	8001bba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b72:	e022      	b.n	8001bba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b7c:	d11f      	bne.n	8001bbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b82:	e01c      	b.n	8001bbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d903      	bls.n	8001b92 <DMA_CheckFifoParam+0xb6>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d003      	beq.n	8001b98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b90:	e018      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
      break;
 8001b96:	e015      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00e      	beq.n	8001bc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e00b      	b.n	8001bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001baa:	bf00      	nop
 8001bac:	e00a      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bae:	bf00      	nop
 8001bb0:	e008      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb2:	bf00      	nop
 8001bb4:	e006      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb6:	bf00      	nop
 8001bb8:	e004      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bba:	bf00      	nop
 8001bbc:	e002      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bbe:	bf00      	nop
 8001bc0:	e000      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bc2:	bf00      	nop
    }
  } 
  
  return status; 
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	@ 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e165      	b.n	8001ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8154 	bne.w	8001eb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d130      	bne.n	8001c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0201 	and.w	r2, r3, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d017      	beq.n	8001cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80ae 	beq.w	8001eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <HAL_GPIO_Init+0x300>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed4 <HAL_GPIO_Init+0x300>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed4 <HAL_GPIO_Init+0x300>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a58      	ldr	r2, [pc, #352]	@ (8001ed8 <HAL_GPIO_Init+0x304>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001edc <HAL_GPIO_Init+0x308>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d025      	beq.n	8001dee <HAL_GPIO_Init+0x21a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01f      	beq.n	8001dea <HAL_GPIO_Init+0x216>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <HAL_GPIO_Init+0x310>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x212>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <HAL_GPIO_Init+0x314>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x20e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8001eec <HAL_GPIO_Init+0x318>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x20a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef0 <HAL_GPIO_Init+0x31c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x206>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a49      	ldr	r2, [pc, #292]	@ (8001ef4 <HAL_GPIO_Init+0x320>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x202>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e00c      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e00a      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dee:	2300      	movs	r3, #0
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e00:	4935      	ldr	r1, [pc, #212]	@ (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e32:	4a31      	ldr	r2, [pc, #196]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb0:	4a11      	ldr	r2, [pc, #68]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	f67f ae96 	bls.w	8001bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	@ 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40021400 	.word	0x40021400
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_PWREx_EnableOverDrive+0x94>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f28:	f7ff f8c2 	bl	80010b0 <HAL_GetTick>
 8001f2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f2e:	e009      	b.n	8001f44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f30:	f7ff f8be 	bl	80010b0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f3e:	d901      	bls.n	8001f44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e01f      	b.n	8001f84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f44:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f50:	d1ee      	bne.n	8001f30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f58:	f7ff f8aa 	bl	80010b0 <HAL_GetTick>
 8001f5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f5e:	e009      	b.n	8001f74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f60:	f7ff f8a6 	bl	80010b0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f6e:	d901      	bls.n	8001f74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e007      	b.n	8001f84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f74:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f80:	d1ee      	bne.n	8001f60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	420e0040 	.word	0x420e0040
 8001f94:	40007000 	.word	0x40007000
 8001f98:	420e0044 	.word	0x420e0044

08001f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0cc      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b68      	ldr	r3, [pc, #416]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d90c      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b65      	ldr	r3, [pc, #404]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b63      	ldr	r3, [pc, #396]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b8      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff0:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a58      	ldr	r2, [pc, #352]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ffa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a52      	ldr	r2, [pc, #328]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	494d      	ldr	r1, [pc, #308]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d044      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d119      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e07f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d003      	beq.n	800205a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b3f      	ldr	r3, [pc, #252]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3b      	ldr	r3, [pc, #236]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e067      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b37      	ldr	r3, [pc, #220]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4934      	ldr	r1, [pc, #208]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7ff f810 	bl	80010b0 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff f80c 	bl	80010b0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e04f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d20c      	bcs.n	80020e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e032      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4916      	ldr	r1, [pc, #88]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	490e      	ldr	r1, [pc, #56]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002122:	f000 f855 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 8002126:	4602      	mov	r2, r0
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	490a      	ldr	r1, [pc, #40]	@ (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	5ccb      	ldrb	r3, [r1, r3]
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe ff70 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00
 8002158:	40023800 	.word	0x40023800
 800215c:	08006004 	.word	0x08006004
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_RCC_GetHCLKFreq+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002184:	f7ff fff0 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0a9b      	lsrs	r3, r3, #10
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	@ (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08006014 	.word	0x08006014

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffdc 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0b5b      	lsrs	r3, r3, #13
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08006014 	.word	0x08006014

080021d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d4:	b0ae      	sub	sp, #184	@ 0xb8
 80021d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f6:	4bcb      	ldr	r3, [pc, #812]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	f200 8206 	bhi.w	8002610 <HAL_RCC_GetSysClockFreq+0x440>
 8002204:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002241 	.word	0x08002241
 8002210:	08002611 	.word	0x08002611
 8002214:	08002611 	.word	0x08002611
 8002218:	08002611 	.word	0x08002611
 800221c:	08002249 	.word	0x08002249
 8002220:	08002611 	.word	0x08002611
 8002224:	08002611 	.word	0x08002611
 8002228:	08002611 	.word	0x08002611
 800222c:	08002251 	.word	0x08002251
 8002230:	08002611 	.word	0x08002611
 8002234:	08002611 	.word	0x08002611
 8002238:	08002611 	.word	0x08002611
 800223c:	08002441 	.word	0x08002441
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4bb9      	ldr	r3, [pc, #740]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x358>)
 8002242:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002246:	e1e7      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4bb8      	ldr	r3, [pc, #736]	@ (800252c <HAL_RCC_GetSysClockFreq+0x35c>)
 800224a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800224e:	e1e3      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002250:	4bb4      	ldr	r3, [pc, #720]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225c:	4bb1      	ldr	r3, [pc, #708]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d071      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002268:	4bae      	ldr	r3, [pc, #696]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002274:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800227c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002280:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800228a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800228e:	4622      	mov	r2, r4
 8002290:	462b      	mov	r3, r5
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	0159      	lsls	r1, r3, #5
 800229c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a0:	0150      	lsls	r0, r2, #5
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4621      	mov	r1, r4
 80022a8:	1a51      	subs	r1, r2, r1
 80022aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80022ac:	4629      	mov	r1, r5
 80022ae:	eb63 0301 	sbc.w	r3, r3, r1
 80022b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80022c0:	4649      	mov	r1, r9
 80022c2:	018b      	lsls	r3, r1, #6
 80022c4:	4641      	mov	r1, r8
 80022c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ca:	4641      	mov	r1, r8
 80022cc:	018a      	lsls	r2, r1, #6
 80022ce:	4641      	mov	r1, r8
 80022d0:	1a51      	subs	r1, r2, r1
 80022d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022d4:	4649      	mov	r1, r9
 80022d6:	eb63 0301 	sbc.w	r3, r3, r1
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80022e8:	4649      	mov	r1, r9
 80022ea:	00cb      	lsls	r3, r1, #3
 80022ec:	4641      	mov	r1, r8
 80022ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f2:	4641      	mov	r1, r8
 80022f4:	00ca      	lsls	r2, r1, #3
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	4622      	mov	r2, r4
 80022fe:	189b      	adds	r3, r3, r2
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
 8002302:	462b      	mov	r3, r5
 8002304:	460a      	mov	r2, r1
 8002306:	eb42 0303 	adc.w	r3, r2, r3
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002318:	4629      	mov	r1, r5
 800231a:	024b      	lsls	r3, r1, #9
 800231c:	4621      	mov	r1, r4
 800231e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002322:	4621      	mov	r1, r4
 8002324:	024a      	lsls	r2, r1, #9
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800232e:	2200      	movs	r2, #0
 8002330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002334:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002338:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800233c:	f7fd ff62 	bl	8000204 <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4613      	mov	r3, r2
 8002346:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800234a:	e067      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234c:	4b75      	ldr	r3, [pc, #468]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	2200      	movs	r2, #0
 8002354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002358:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800235c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002364:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002366:	2300      	movs	r3, #0
 8002368:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800236a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800236e:	4622      	mov	r2, r4
 8002370:	462b      	mov	r3, r5
 8002372:	f04f 0000 	mov.w	r0, #0
 8002376:	f04f 0100 	mov.w	r1, #0
 800237a:	0159      	lsls	r1, r3, #5
 800237c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002380:	0150      	lsls	r0, r2, #5
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4621      	mov	r1, r4
 8002388:	1a51      	subs	r1, r2, r1
 800238a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800238c:	4629      	mov	r1, r5
 800238e:	eb63 0301 	sbc.w	r3, r3, r1
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80023a0:	4649      	mov	r1, r9
 80023a2:	018b      	lsls	r3, r1, #6
 80023a4:	4641      	mov	r1, r8
 80023a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023aa:	4641      	mov	r1, r8
 80023ac:	018a      	lsls	r2, r1, #6
 80023ae:	4641      	mov	r1, r8
 80023b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80023b4:	4649      	mov	r1, r9
 80023b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ce:	4692      	mov	sl, r2
 80023d0:	469b      	mov	fp, r3
 80023d2:	4623      	mov	r3, r4
 80023d4:	eb1a 0303 	adds.w	r3, sl, r3
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	462b      	mov	r3, r5
 80023dc:	eb4b 0303 	adc.w	r3, fp, r3
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023ee:	4629      	mov	r1, r5
 80023f0:	028b      	lsls	r3, r1, #10
 80023f2:	4621      	mov	r1, r4
 80023f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f8:	4621      	mov	r1, r4
 80023fa:	028a      	lsls	r2, r1, #10
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002404:	2200      	movs	r2, #0
 8002406:	673b      	str	r3, [r7, #112]	@ 0x70
 8002408:	677a      	str	r2, [r7, #116]	@ 0x74
 800240a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800240e:	f7fd fef9 	bl	8000204 <__aeabi_uldivmod>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4613      	mov	r3, r2
 8002418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800241c:	4b41      	ldr	r3, [pc, #260]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	3301      	adds	r3, #1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800242e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800243e:	e0eb      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002440:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244c:	4b35      	ldr	r3, [pc, #212]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d06b      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002458:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x354>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	2200      	movs	r2, #0
 8002460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002462:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246a:	663b      	str	r3, [r7, #96]	@ 0x60
 800246c:	2300      	movs	r3, #0
 800246e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002470:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002474:	4622      	mov	r2, r4
 8002476:	462b      	mov	r3, r5
 8002478:	f04f 0000 	mov.w	r0, #0
 800247c:	f04f 0100 	mov.w	r1, #0
 8002480:	0159      	lsls	r1, r3, #5
 8002482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002486:	0150      	lsls	r0, r2, #5
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4621      	mov	r1, r4
 800248e:	1a51      	subs	r1, r2, r1
 8002490:	61b9      	str	r1, [r7, #24]
 8002492:	4629      	mov	r1, r5
 8002494:	eb63 0301 	sbc.w	r3, r3, r1
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024a6:	4659      	mov	r1, fp
 80024a8:	018b      	lsls	r3, r1, #6
 80024aa:	4651      	mov	r1, sl
 80024ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b0:	4651      	mov	r1, sl
 80024b2:	018a      	lsls	r2, r1, #6
 80024b4:	4651      	mov	r1, sl
 80024b6:	ebb2 0801 	subs.w	r8, r2, r1
 80024ba:	4659      	mov	r1, fp
 80024bc:	eb63 0901 	sbc.w	r9, r3, r1
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d4:	4690      	mov	r8, r2
 80024d6:	4699      	mov	r9, r3
 80024d8:	4623      	mov	r3, r4
 80024da:	eb18 0303 	adds.w	r3, r8, r3
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	462b      	mov	r3, r5
 80024e2:	eb49 0303 	adc.w	r3, r9, r3
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024f4:	4629      	mov	r1, r5
 80024f6:	024b      	lsls	r3, r1, #9
 80024f8:	4621      	mov	r1, r4
 80024fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024fe:	4621      	mov	r1, r4
 8002500:	024a      	lsls	r2, r1, #9
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250a:	2200      	movs	r2, #0
 800250c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800250e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002510:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002514:	f7fd fe76 	bl	8000204 <__aeabi_uldivmod>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4613      	mov	r3, r2
 800251e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002522:	e065      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x420>
 8002524:	40023800 	.word	0x40023800
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002530:	4b3d      	ldr	r3, [pc, #244]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x458>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	2200      	movs	r2, #0
 8002538:	4618      	mov	r0, r3
 800253a:	4611      	mov	r1, r2
 800253c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002540:	653b      	str	r3, [r7, #80]	@ 0x50
 8002542:	2300      	movs	r3, #0
 8002544:	657b      	str	r3, [r7, #84]	@ 0x54
 8002546:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800254a:	4642      	mov	r2, r8
 800254c:	464b      	mov	r3, r9
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4641      	mov	r1, r8
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	4649      	mov	r1, r9
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800257c:	4659      	mov	r1, fp
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4651      	mov	r1, sl
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4651      	mov	r1, sl
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	1a54      	subs	r4, r2, r1
 800258e:	4659      	mov	r1, fp
 8002590:	eb63 0501 	sbc.w	r5, r3, r1
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	00eb      	lsls	r3, r5, #3
 800259e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a2:	00e2      	lsls	r2, r4, #3
 80025a4:	4614      	mov	r4, r2
 80025a6:	461d      	mov	r5, r3
 80025a8:	4643      	mov	r3, r8
 80025aa:	18e3      	adds	r3, r4, r3
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	464b      	mov	r3, r9
 80025b0:	eb45 0303 	adc.w	r3, r5, r3
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c2:	4629      	mov	r1, r5
 80025c4:	028b      	lsls	r3, r1, #10
 80025c6:	4621      	mov	r1, r4
 80025c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025cc:	4621      	mov	r1, r4
 80025ce:	028a      	lsls	r2, r1, #10
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025d8:	2200      	movs	r2, #0
 80025da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025e2:	f7fd fe0f 	bl	8000204 <__aeabi_uldivmod>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4613      	mov	r3, r2
 80025ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x458>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0f1b      	lsrs	r3, r3, #28
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80025fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800260e:	e003      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002612:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002616:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002618:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800261c:	4618      	mov	r0, r3
 800261e:	37b8      	adds	r7, #184	@ 0xb8
 8002620:	46bd      	mov	sp, r7
 8002622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	00f42400 	.word	0x00f42400

08002630 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e28d      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8083 	beq.w	8002756 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002650:	4b94      	ldr	r3, [pc, #592]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b04      	cmp	r3, #4
 800265a:	d019      	beq.n	8002690 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800265c:	4b91      	ldr	r3, [pc, #580]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
        || \
 8002664:	2b08      	cmp	r3, #8
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002668:	4b8e      	ldr	r3, [pc, #568]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002674:	d00c      	beq.n	8002690 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002676:	4b8b      	ldr	r3, [pc, #556]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d112      	bne.n	80026a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002682:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800268e:	d10b      	bne.n	80026a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	4b84      	ldr	r3, [pc, #528]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d05b      	beq.n	8002754 <HAL_RCC_OscConfig+0x124>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d157      	bne.n	8002754 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e25a      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b0:	d106      	bne.n	80026c0 <HAL_RCC_OscConfig+0x90>
 80026b2:	4b7c      	ldr	r3, [pc, #496]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7b      	ldr	r2, [pc, #492]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xcc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xb4>
 80026ca:	4b76      	ldr	r3, [pc, #472]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a75      	ldr	r2, [pc, #468]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b73      	ldr	r3, [pc, #460]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a72      	ldr	r2, [pc, #456]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xcc>
 80026e4:	4b6f      	ldr	r3, [pc, #444]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6e      	ldr	r2, [pc, #440]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b6c      	ldr	r3, [pc, #432]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6b      	ldr	r2, [pc, #428]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fcd4 	bl	80010b0 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fcd0 	bl	80010b0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e21f      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b61      	ldr	r3, [pc, #388]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xdc>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fcc0 	bl	80010b0 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fcbc 	bl	80010b0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e20b      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	4b57      	ldr	r3, [pc, #348]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x104>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d06f      	beq.n	8002842 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002762:	4b50      	ldr	r3, [pc, #320]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d017      	beq.n	800279e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800276e:	4b4d      	ldr	r3, [pc, #308]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
        || \
 8002776:	2b08      	cmp	r3, #8
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800277a:	4b4a      	ldr	r3, [pc, #296]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b47      	ldr	r3, [pc, #284]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b44      	ldr	r3, [pc, #272]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b41      	ldr	r3, [pc, #260]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x186>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1d3      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b3b      	ldr	r3, [pc, #236]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4937      	ldr	r1, [pc, #220]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e03a      	b.n	8002842 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b34      	ldr	r3, [pc, #208]	@ (80028a8 <HAL_RCC_OscConfig+0x278>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fc69 	bl	80010b0 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fc65 	bl	80010b0 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1b4      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4925      	ldr	r1, [pc, #148]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
 8002814:	e015      	b.n	8002842 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_OscConfig+0x278>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fc48 	bl	80010b0 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002824:	f7fe fc44 	bl	80010b0 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e193      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d036      	beq.n	80028bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <HAL_RCC_OscConfig+0x27c>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fc28 	bl	80010b0 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe fc24 	bl	80010b0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e173      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_RCC_OscConfig+0x274>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x234>
 8002882:	e01b      	b.n	80028bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_OscConfig+0x27c>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f7fe fc11 	bl	80010b0 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	e00e      	b.n	80028b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002892:	f7fe fc0d 	bl	80010b0 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d907      	bls.n	80028b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e15c      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
 80028a4:	40023800 	.word	0x40023800
 80028a8:	42470000 	.word	0x42470000
 80028ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b8a      	ldr	r3, [pc, #552]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ea      	bne.n	8002892 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8097 	beq.w	80029f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b83      	ldr	r3, [pc, #524]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b7f      	ldr	r3, [pc, #508]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	4a7e      	ldr	r2, [pc, #504]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ea:	4b7c      	ldr	r3, [pc, #496]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <HAL_RCC_OscConfig+0x4b0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d118      	bne.n	8002938 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b76      	ldr	r3, [pc, #472]	@ (8002ae0 <HAL_RCC_OscConfig+0x4b0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a75      	ldr	r2, [pc, #468]	@ (8002ae0 <HAL_RCC_OscConfig+0x4b0>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7fe fbcd 	bl	80010b0 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7fe fbc9 	bl	80010b0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e118      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae0 <HAL_RCC_OscConfig+0x4b0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x31e>
 8002940:	4b66      	ldr	r3, [pc, #408]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a65      	ldr	r2, [pc, #404]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
 800294c:	e01c      	b.n	8002988 <HAL_RCC_OscConfig+0x358>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b05      	cmp	r3, #5
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x340>
 8002956:	4b61      	ldr	r3, [pc, #388]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	4a60      	ldr	r2, [pc, #384]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6713      	str	r3, [r2, #112]	@ 0x70
 8002962:	4b5e      	ldr	r3, [pc, #376]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	4a5d      	ldr	r2, [pc, #372]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6713      	str	r3, [r2, #112]	@ 0x70
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0x358>
 8002970:	4b5a      	ldr	r3, [pc, #360]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	4a59      	ldr	r2, [pc, #356]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	@ 0x70
 800297c:	4b57      	ldr	r3, [pc, #348]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	4a56      	ldr	r2, [pc, #344]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fb8e 	bl	80010b0 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fb8a 	bl	80010b0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e0d7      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	4b4b      	ldr	r3, [pc, #300]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ee      	beq.n	8002998 <HAL_RCC_OscConfig+0x368>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fb78 	bl	80010b0 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe fb74 	bl	80010b0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0c1      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029da:	4b40      	ldr	r3, [pc, #256]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ee      	bne.n	80029c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ec:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	4a3a      	ldr	r2, [pc, #232]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80ad 	beq.w	8002b5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a02:	4b36      	ldr	r3, [pc, #216]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d060      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d145      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b33      	ldr	r3, [pc, #204]	@ (8002ae4 <HAL_RCC_OscConfig+0x4b4>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fb48 	bl	80010b0 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fb44 	bl	80010b0 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e093      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	4b29      	ldr	r3, [pc, #164]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	061b      	lsls	r3, r3, #24
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	071b      	lsls	r3, r3, #28
 8002a6e:	491b      	ldr	r1, [pc, #108]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_OscConfig+0x4b4>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fb19 	bl	80010b0 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe fb15 	bl	80010b0 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e064      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x452>
 8002aa0:	e05c      	b.n	8002b5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <HAL_RCC_OscConfig+0x4b4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fb02 	bl	80010b0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fafe 	bl	80010b0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e04d      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_RCC_OscConfig+0x4ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x480>
 8002ace:	e045      	b.n	8002b5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e040      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <HAL_RCC_OscConfig+0x538>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d030      	beq.n	8002b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d129      	bne.n	8002b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d122      	bne.n	8002b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d119      	bne.n	8002b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	3b01      	subs	r3, #1
 8002b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d10f      	bne.n	8002b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800

08002b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e041      	b.n	8002c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe f85c 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f000 fb42 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d001      	beq.n	8002c24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e046      	b.n	8002cb2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a23      	ldr	r2, [pc, #140]	@ (8002cc0 <HAL_TIM_Base_Start+0xb4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d022      	beq.n	8002c7c <HAL_TIM_Base_Start+0x70>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3e:	d01d      	beq.n	8002c7c <HAL_TIM_Base_Start+0x70>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc4 <HAL_TIM_Base_Start+0xb8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d018      	beq.n	8002c7c <HAL_TIM_Base_Start+0x70>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_TIM_Base_Start+0xbc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d013      	beq.n	8002c7c <HAL_TIM_Base_Start+0x70>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1c      	ldr	r2, [pc, #112]	@ (8002ccc <HAL_TIM_Base_Start+0xc0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00e      	beq.n	8002c7c <HAL_TIM_Base_Start+0x70>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd0 <HAL_TIM_Base_Start+0xc4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d009      	beq.n	8002c7c <HAL_TIM_Base_Start+0x70>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	@ (8002cd4 <HAL_TIM_Base_Start+0xc8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_TIM_Base_Start+0x70>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_TIM_Base_Start+0xcc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d111      	bne.n	8002ca0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d010      	beq.n	8002cb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	e007      	b.n	8002cb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800
 8002ccc:	40000c00 	.word	0x40000c00
 8002cd0:	40010400 	.word	0x40010400
 8002cd4:	40014000 	.word	0x40014000
 8002cd8:	40001800 	.word	0x40001800

08002cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e041      	b.n	8002d72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f839 	bl	8002d7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 fa8a 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_TIM_PWM_Start+0x24>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e022      	b.n	8002dfa <HAL_TIM_PWM_Start+0x6a>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d109      	bne.n	8002dce <HAL_TIM_PWM_Start+0x3e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e015      	b.n	8002dfa <HAL_TIM_PWM_Start+0x6a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d109      	bne.n	8002de8 <HAL_TIM_PWM_Start+0x58>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e008      	b.n	8002dfa <HAL_TIM_PWM_Start+0x6a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07c      	b.n	8002efc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x82>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e10:	e013      	b.n	8002e3a <HAL_TIM_PWM_Start+0xaa>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start+0x92>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e20:	e00b      	b.n	8002e3a <HAL_TIM_PWM_Start+0xaa>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start+0xa2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e30:	e003      	b.n	8002e3a <HAL_TIM_PWM_Start+0xaa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fcec 	bl	8003820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f04 <HAL_TIM_PWM_Start+0x174>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_TIM_PWM_Start+0xcc>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2c      	ldr	r2, [pc, #176]	@ (8002f08 <HAL_TIM_PWM_Start+0x178>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <HAL_TIM_PWM_Start+0xd0>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_PWM_Start+0xd2>
 8002e60:	2300      	movs	r3, #0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a22      	ldr	r2, [pc, #136]	@ (8002f04 <HAL_TIM_PWM_Start+0x174>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d022      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x136>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e88:	d01d      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x136>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002f0c <HAL_TIM_PWM_Start+0x17c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x136>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <HAL_TIM_PWM_Start+0x180>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x136>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_TIM_PWM_Start+0x184>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x136>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a16      	ldr	r2, [pc, #88]	@ (8002f08 <HAL_TIM_PWM_Start+0x178>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x136>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a18      	ldr	r2, [pc, #96]	@ (8002f18 <HAL_TIM_PWM_Start+0x188>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x136>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <HAL_TIM_PWM_Start+0x18c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d010      	beq.n	8002efa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	e007      	b.n	8002efa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010400 	.word	0x40010400
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40001800 	.word	0x40001800

08002f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0ae      	b.n	800309c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	f200 809f 	bhi.w	800308c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	0800308d 	.word	0x0800308d
 8002f5c:	0800308d 	.word	0x0800308d
 8002f60:	0800308d 	.word	0x0800308d
 8002f64:	08002fc9 	.word	0x08002fc9
 8002f68:	0800308d 	.word	0x0800308d
 8002f6c:	0800308d 	.word	0x0800308d
 8002f70:	0800308d 	.word	0x0800308d
 8002f74:	0800300b 	.word	0x0800300b
 8002f78:	0800308d 	.word	0x0800308d
 8002f7c:	0800308d 	.word	0x0800308d
 8002f80:	0800308d 	.word	0x0800308d
 8002f84:	0800304b 	.word	0x0800304b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f9fc 	bl	800338c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
      break;
 8002fc6:	e064      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa4c 	bl	800346c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	021a      	lsls	r2, r3, #8
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	619a      	str	r2, [r3, #24]
      break;
 8003008:	e043      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 faa1 	bl	8003558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0208 	orr.w	r2, r2, #8
 8003024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      break;
 8003048:	e023      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 faf5 	bl	8003640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	61da      	str	r2, [r3, #28]
      break;
 800308a:	e002      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIM_ConfigClockSource+0x1c>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0b4      	b.n	800322a <HAL_TIM_ConfigClockSource+0x186>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030f8:	d03e      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0xd4>
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030fe:	f200 8087 	bhi.w	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003106:	f000 8086 	beq.w	8003216 <HAL_TIM_ConfigClockSource+0x172>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310e:	d87f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b70      	cmp	r3, #112	@ 0x70
 8003112:	d01a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xa6>
 8003114:	2b70      	cmp	r3, #112	@ 0x70
 8003116:	d87b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b60      	cmp	r3, #96	@ 0x60
 800311a:	d050      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x11a>
 800311c:	2b60      	cmp	r3, #96	@ 0x60
 800311e:	d877      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b50      	cmp	r3, #80	@ 0x50
 8003122:	d03c      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xfa>
 8003124:	2b50      	cmp	r3, #80	@ 0x50
 8003126:	d873      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b40      	cmp	r3, #64	@ 0x40
 800312a:	d058      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x13a>
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d86f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b30      	cmp	r3, #48	@ 0x30
 8003132:	d064      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	2b30      	cmp	r3, #48	@ 0x30
 8003136:	d86b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d060      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d867      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05c      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b10      	cmp	r3, #16
 8003146:	d05a      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	e062      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	f000 fb41 	bl	80037e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800316c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	609a      	str	r2, [r3, #8]
      break;
 8003176:	e04f      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	f000 fb2a 	bl	80037e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800319a:	609a      	str	r2, [r3, #8]
      break;
 800319c:	e03c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	461a      	mov	r2, r3
 80031ac:	f000 fa9e 	bl	80036ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2150      	movs	r1, #80	@ 0x50
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 faf7 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 80031bc:	e02c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ca:	461a      	mov	r2, r3
 80031cc:	f000 fabd 	bl	800374a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2160      	movs	r1, #96	@ 0x60
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fae7 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 80031dc:	e01c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 fa7e 	bl	80036ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2140      	movs	r1, #64	@ 0x40
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fad7 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 80031fc:	e00c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f000 face 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 800320e:	e003      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e000      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a46      	ldr	r2, [pc, #280]	@ (8003360 <TIM_Base_SetConfig+0x12c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d013      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003252:	d00f      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a43      	ldr	r2, [pc, #268]	@ (8003364 <TIM_Base_SetConfig+0x130>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00b      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a42      	ldr	r2, [pc, #264]	@ (8003368 <TIM_Base_SetConfig+0x134>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a41      	ldr	r2, [pc, #260]	@ (800336c <TIM_Base_SetConfig+0x138>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a40      	ldr	r2, [pc, #256]	@ (8003370 <TIM_Base_SetConfig+0x13c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d108      	bne.n	8003286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a35      	ldr	r2, [pc, #212]	@ (8003360 <TIM_Base_SetConfig+0x12c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02b      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003294:	d027      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a32      	ldr	r2, [pc, #200]	@ (8003364 <TIM_Base_SetConfig+0x130>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d023      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a31      	ldr	r2, [pc, #196]	@ (8003368 <TIM_Base_SetConfig+0x134>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01f      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a30      	ldr	r2, [pc, #192]	@ (800336c <TIM_Base_SetConfig+0x138>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01b      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003370 <TIM_Base_SetConfig+0x13c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d017      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003374 <TIM_Base_SetConfig+0x140>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003378 <TIM_Base_SetConfig+0x144>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2c      	ldr	r2, [pc, #176]	@ (800337c <TIM_Base_SetConfig+0x148>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003380 <TIM_Base_SetConfig+0x14c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003384 <TIM_Base_SetConfig+0x150>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a29      	ldr	r2, [pc, #164]	@ (8003388 <TIM_Base_SetConfig+0x154>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <TIM_Base_SetConfig+0x12c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0xf8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a12      	ldr	r2, [pc, #72]	@ (8003370 <TIM_Base_SetConfig+0x13c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	611a      	str	r2, [r3, #16]
  }
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40010400 	.word	0x40010400
 8003374:	40014000 	.word	0x40014000
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800
 8003380:	40001800 	.word	0x40001800
 8003384:	40001c00 	.word	0x40001c00
 8003388:	40002000 	.word	0x40002000

0800338c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 0201 	bic.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 0302 	bic.w	r3, r3, #2
 80033d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a20      	ldr	r2, [pc, #128]	@ (8003464 <TIM_OC1_SetConfig+0xd8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_OC1_SetConfig+0x64>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003468 <TIM_OC1_SetConfig+0xdc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10c      	bne.n	800340a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0308 	bic.w	r3, r3, #8
 80033f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <TIM_OC1_SetConfig+0xd8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_OC1_SetConfig+0x8e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a14      	ldr	r2, [pc, #80]	@ (8003468 <TIM_OC1_SetConfig+0xdc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d111      	bne.n	800343e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40010000 	.word	0x40010000
 8003468:	40010400 	.word	0x40010400

0800346c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 0210 	bic.w	r2, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0320 	bic.w	r3, r3, #32
 80034b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a22      	ldr	r2, [pc, #136]	@ (8003550 <TIM_OC2_SetConfig+0xe4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_OC2_SetConfig+0x68>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a21      	ldr	r2, [pc, #132]	@ (8003554 <TIM_OC2_SetConfig+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10d      	bne.n	80034f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <TIM_OC2_SetConfig+0xe4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC2_SetConfig+0x94>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <TIM_OC2_SetConfig+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d113      	bne.n	8003528 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800350e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40010400 	.word	0x40010400

08003558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a21      	ldr	r2, [pc, #132]	@ (8003638 <TIM_OC3_SetConfig+0xe0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_OC3_SetConfig+0x66>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a20      	ldr	r2, [pc, #128]	@ (800363c <TIM_OC3_SetConfig+0xe4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10d      	bne.n	80035da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a16      	ldr	r2, [pc, #88]	@ (8003638 <TIM_OC3_SetConfig+0xe0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_OC3_SetConfig+0x92>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a15      	ldr	r2, [pc, #84]	@ (800363c <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d113      	bne.n	8003612 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	621a      	str	r2, [r3, #32]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40010000 	.word	0x40010000
 800363c:	40010400 	.word	0x40010400

08003640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800368a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	031b      	lsls	r3, r3, #12
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <TIM_OC4_SetConfig+0xa4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC4_SetConfig+0x68>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a11      	ldr	r2, [pc, #68]	@ (80036e8 <TIM_OC4_SetConfig+0xa8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d109      	bne.n	80036bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010400 	.word	0x40010400

080036ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0201 	bic.w	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 030a 	bic.w	r3, r3, #10
 8003728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800374a:	b480      	push	{r7}
 800374c:	b087      	sub	sp, #28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f023 0210 	bic.w	r2, r3, #16
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	031b      	lsls	r3, r3, #12
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003786:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f043 0307 	orr.w	r3, r3, #7
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	431a      	orrs	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2201      	movs	r2, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	43db      	mvns	r3, r3
 8003842:	401a      	ands	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003880:	2302      	movs	r3, #2
 8003882:	e05a      	b.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a21      	ldr	r2, [pc, #132]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d0:	d01d      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1d      	ldr	r2, [pc, #116]	@ (800394c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a18      	ldr	r2, [pc, #96]	@ (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a15      	ldr	r2, [pc, #84]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10c      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40010400 	.word	0x40010400
 800395c:	40014000 	.word	0x40014000
 8003960:	40001800 	.word	0x40001800

08003964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800397c:	2302      	movs	r3, #2
 800397e:	e03d      	b.n	80039fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e042      	b.n	8003aa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fa10 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	@ 0x24
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f82b 	bl	8003aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b0c0      	sub	sp, #256	@ 0x100
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	68d9      	ldr	r1, [r3, #12]
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	ea40 0301 	orr.w	r3, r0, r1
 8003ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b00:	f021 010c 	bic.w	r1, r1, #12
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	6999      	ldr	r1, [r3, #24]
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	ea40 0301 	orr.w	r3, r0, r1
 8003b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b8f      	ldr	r3, [pc, #572]	@ (8003d74 <UART_SetConfig+0x2cc>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d005      	beq.n	8003b48 <UART_SetConfig+0xa0>
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b8d      	ldr	r3, [pc, #564]	@ (8003d78 <UART_SetConfig+0x2d0>)
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d104      	bne.n	8003b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7fe fb2e 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b50:	e003      	b.n	8003b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b52:	f7fe fb15 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8003b56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b64:	f040 810c 	bne.w	8003d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	1891      	adds	r1, r2, r2
 8003b80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b82:	415b      	adcs	r3, r3
 8003b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	eb12 0801 	adds.w	r8, r2, r1
 8003b90:	4629      	mov	r1, r5
 8003b92:	eb43 0901 	adc.w	r9, r3, r1
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003baa:	4690      	mov	r8, r2
 8003bac:	4699      	mov	r9, r3
 8003bae:	4623      	mov	r3, r4
 8003bb0:	eb18 0303 	adds.w	r3, r8, r3
 8003bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bb8:	462b      	mov	r3, r5
 8003bba:	eb49 0303 	adc.w	r3, r9, r3
 8003bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	18db      	adds	r3, r3, r3
 8003bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bdc:	4613      	mov	r3, r2
 8003bde:	eb42 0303 	adc.w	r3, r2, r3
 8003be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bec:	f7fc fb0a 	bl	8000204 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4b61      	ldr	r3, [pc, #388]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	011c      	lsls	r4, r3, #4
 8003bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c20:	4641      	mov	r1, r8
 8003c22:	eb12 0a01 	adds.w	sl, r2, r1
 8003c26:	4649      	mov	r1, r9
 8003c28:	eb43 0b01 	adc.w	fp, r3, r1
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c40:	4692      	mov	sl, r2
 8003c42:	469b      	mov	fp, r3
 8003c44:	4643      	mov	r3, r8
 8003c46:	eb1a 0303 	adds.w	r3, sl, r3
 8003c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	eb4b 0303 	adc.w	r3, fp, r3
 8003c54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	18db      	adds	r3, r3, r3
 8003c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c72:	4613      	mov	r3, r2
 8003c74:	eb42 0303 	adc.w	r3, r2, r3
 8003c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c82:	f7fc fabf 	bl	8000204 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2264      	movs	r2, #100	@ 0x64
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	1acb      	subs	r3, r1, r3
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ca2:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cb0:	441c      	add	r4, r3
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	1851      	adds	r1, r2, r1
 8003cd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cda:	4649      	mov	r1, r9
 8003cdc:	414b      	adcs	r3, r1
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cec:	4659      	mov	r1, fp
 8003cee:	00cb      	lsls	r3, r1, #3
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	00ca      	lsls	r2, r1, #3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4642      	mov	r2, r8
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d08:	464b      	mov	r3, r9
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d28:	460b      	mov	r3, r1
 8003d2a:	18db      	adds	r3, r3, r3
 8003d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d2e:	4613      	mov	r3, r2
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d3e:	f7fc fa61 	bl	8000204 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003d48:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	2164      	movs	r1, #100	@ 0x64
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	3332      	adds	r3, #50	@ 0x32
 8003d5a:	4a08      	ldr	r2, [pc, #32]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	f003 0207 	and.w	r2, r3, #7
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4422      	add	r2, r4
 8003d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d70:	e106      	b.n	8003f80 <UART_SetConfig+0x4d8>
 8003d72:	bf00      	nop
 8003d74:	40011000 	.word	0x40011000
 8003d78:	40011400 	.word	0x40011400
 8003d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d92:	4642      	mov	r2, r8
 8003d94:	464b      	mov	r3, r9
 8003d96:	1891      	adds	r1, r2, r2
 8003d98:	6239      	str	r1, [r7, #32]
 8003d9a:	415b      	adcs	r3, r3
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003da2:	4641      	mov	r1, r8
 8003da4:	1854      	adds	r4, r2, r1
 8003da6:	4649      	mov	r1, r9
 8003da8:	eb43 0501 	adc.w	r5, r3, r1
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	00eb      	lsls	r3, r5, #3
 8003db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dba:	00e2      	lsls	r2, r4, #3
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	18e3      	adds	r3, r4, r3
 8003dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dc8:	464b      	mov	r3, r9
 8003dca:	eb45 0303 	adc.w	r3, r5, r3
 8003dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dee:	4629      	mov	r1, r5
 8003df0:	008b      	lsls	r3, r1, #2
 8003df2:	4621      	mov	r1, r4
 8003df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df8:	4621      	mov	r1, r4
 8003dfa:	008a      	lsls	r2, r1, #2
 8003dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e00:	f7fc fa00 	bl	8000204 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4b60      	ldr	r3, [pc, #384]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	011c      	lsls	r4, r3, #4
 8003e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e24:	4642      	mov	r2, r8
 8003e26:	464b      	mov	r3, r9
 8003e28:	1891      	adds	r1, r2, r2
 8003e2a:	61b9      	str	r1, [r7, #24]
 8003e2c:	415b      	adcs	r3, r3
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e34:	4641      	mov	r1, r8
 8003e36:	1851      	adds	r1, r2, r1
 8003e38:	6139      	str	r1, [r7, #16]
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e4c:	4659      	mov	r1, fp
 8003e4e:	00cb      	lsls	r3, r1, #3
 8003e50:	4651      	mov	r1, sl
 8003e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e56:	4651      	mov	r1, sl
 8003e58:	00ca      	lsls	r2, r1, #3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4642      	mov	r2, r8
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e68:	464b      	mov	r3, r9
 8003e6a:	460a      	mov	r2, r1
 8003e6c:	eb42 0303 	adc.w	r3, r2, r3
 8003e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	008b      	lsls	r3, r1, #2
 8003e90:	4641      	mov	r1, r8
 8003e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e96:	4641      	mov	r1, r8
 8003e98:	008a      	lsls	r2, r1, #2
 8003e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e9e:	f7fc f9b1 	bl	8000204 <__aeabi_uldivmod>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2264      	movs	r2, #100	@ 0x64
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	1acb      	subs	r3, r1, r3
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3332      	adds	r3, #50	@ 0x32
 8003ebc:	4a33      	ldr	r2, [pc, #204]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ec8:	441c      	add	r4, r3
 8003eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ece:	2200      	movs	r2, #0
 8003ed0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ed2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ed4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee8:	4641      	mov	r1, r8
 8003eea:	1851      	adds	r1, r2, r1
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	4649      	mov	r1, r9
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f00:	4659      	mov	r1, fp
 8003f02:	00cb      	lsls	r3, r1, #3
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	00ca      	lsls	r2, r1, #3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	4642      	mov	r2, r8
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	eb42 0303 	adc.w	r3, r2, r3
 8003f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	008b      	lsls	r3, r1, #2
 8003f40:	4641      	mov	r1, r8
 8003f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f46:	4641      	mov	r1, r8
 8003f48:	008a      	lsls	r2, r1, #2
 8003f4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f4e:	f7fc f959 	bl	8000204 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003f58:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	2164      	movs	r1, #100	@ 0x64
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	3332      	adds	r3, #50	@ 0x32
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 020f 	and.w	r2, r3, #15
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4422      	add	r2, r4
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f86:	46bd      	mov	sp, r7
 8003f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8c:	51eb851f 	.word	0x51eb851f

08003f90 <memset>:
 8003f90:	4402      	add	r2, r0
 8003f92:	4603      	mov	r3, r0
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d100      	bne.n	8003f9a <memset+0xa>
 8003f98:	4770      	bx	lr
 8003f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9e:	e7f9      	b.n	8003f94 <memset+0x4>

08003fa0 <__libc_init_array>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8003fd8 <__libc_init_array+0x38>)
 8003fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8003fdc <__libc_init_array+0x3c>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	2600      	movs	r6, #0
 8003fac:	42a6      	cmp	r6, r4
 8003fae:	d109      	bne.n	8003fc4 <__libc_init_array+0x24>
 8003fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8003fe0 <__libc_init_array+0x40>)
 8003fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8003fe4 <__libc_init_array+0x44>)
 8003fb4:	f000 f826 	bl	8004004 <_init>
 8003fb8:	1b64      	subs	r4, r4, r5
 8003fba:	10a4      	asrs	r4, r4, #2
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	42a6      	cmp	r6, r4
 8003fc0:	d105      	bne.n	8003fce <__libc_init_array+0x2e>
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc8:	4798      	blx	r3
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7ee      	b.n	8003fac <__libc_init_array+0xc>
 8003fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd2:	4798      	blx	r3
 8003fd4:	3601      	adds	r6, #1
 8003fd6:	e7f2      	b.n	8003fbe <__libc_init_array+0x1e>
 8003fd8:	0800602c 	.word	0x0800602c
 8003fdc:	0800602c 	.word	0x0800602c
 8003fe0:	0800602c 	.word	0x0800602c
 8003fe4:	08006030 	.word	0x08006030

08003fe8 <memcpy>:
 8003fe8:	440a      	add	r2, r1
 8003fea:	4291      	cmp	r1, r2
 8003fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ff0:	d100      	bne.n	8003ff4 <memcpy+0xc>
 8003ff2:	4770      	bx	lr
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ffe:	4291      	cmp	r1, r2
 8004000:	d1f9      	bne.n	8003ff6 <memcpy+0xe>
 8004002:	bd10      	pop	{r4, pc}

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
